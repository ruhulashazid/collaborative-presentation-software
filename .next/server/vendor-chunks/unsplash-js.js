"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unsplash-js";
exports.ids = ["vendor-chunks/unsplash-js"];
exports.modules = {

/***/ "(rsc)/./node_modules/unsplash-js/dist/unsplash-js.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/unsplash-js/dist/unsplash-js.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Language: () => (/* binding */ Language),\n/* harmony export */   OrderBy: () => (/* binding */ OrderBy),\n/* harmony export */   _internals: () => (/* binding */ internals),\n/* harmony export */   createApi: () => (/* binding */ createApi)\n/* harmony export */ });\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar checkIsString = /*#__PURE__*/getRefinement(function (value) {\n  return typeof value === 'string' ? value : null;\n});\nvar isDefined = function isDefined(x) {\n  return x !== null && x !== undefined;\n};\nfunction getRefinement(getB) {\n  return function (a) {\n    return isDefined(getB(a));\n  };\n}\nvar checkIsNonEmptyArray = function checkIsNonEmptyArray(a) {\n  return a.length > 0;\n};\n\n/** Takes a dictionary containing nullish values and returns a dictionary of all the defined\r\n * (non-nullish) values.\r\n */\n\nvar compactDefined = function compactDefined(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    var _ref;\n\n    var value = obj[key];\n    return _extends({}, acc, isDefined(value) ? (_ref = {}, _ref[key] = value, _ref) : {});\n  }, {});\n};\nfunction flow() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  var len = fns.length - 1;\n  return function () {\n    for (var _len2 = arguments.length, x = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      x[_key2] = arguments[_key2];\n    }\n\n    var y = fns[0].apply(this, x);\n\n    for (var i = 1; i <= len; i++) {\n      y = fns[i].call(this, y);\n    }\n\n    return y;\n  };\n}\n\nvar checkIsObject = /*#__PURE__*/getRefinement(function (response) {\n  return isDefined(response) && typeof response === 'object' && !Array.isArray(response) ? response : null;\n});\nvar checkIsErrors = /*#__PURE__*/getRefinement(function (errors) {\n  return Array.isArray(errors) && errors.every(checkIsString) && checkIsNonEmptyArray(errors) ? errors : null;\n});\nvar checkIsApiError = /*#__PURE__*/getRefinement(function (response) {\n  return checkIsObject(response) && 'errors' in response && checkIsErrors(response.errors) ? {\n    errors: response.errors\n  } : null;\n});\nvar getErrorForBadStatusCode = function getErrorForBadStatusCode(jsonResponse) {\n  if (checkIsApiError(jsonResponse)) {\n    return {\n      errors: jsonResponse.errors,\n      source: 'api'\n    };\n  } else {\n    return {\n      errors: ['Responded with a status code outside the 2xx range, and the response body is not recognisable.'],\n      source: 'decoding'\n    };\n  }\n};\nvar DecodingError = function DecodingError(message) {\n  this.message = message;\n};\n\nvar isJSON = function isJSON(contentType) {\n  return /application\\/[^+]*[+]?(json);?.*/.test(contentType);\n};\n\nvar checkIsJsonResponse = function checkIsJsonResponse(response) {\n  var contentTypeHeader = response.headers.get('content-type');\n  return isDefined(contentTypeHeader) && isJSON(contentTypeHeader);\n};\n/**\r\n * Note: restrict the type of JSON to `AnyJson` so that `any` doesn't leak downstream.\r\n */\n\n\nvar getJsonResponse = function getJsonResponse(response) {\n  if (checkIsJsonResponse(response)) {\n    return response.json()[\"catch\"](function (_err) {\n      throw new DecodingError('unable to parse JSON response.');\n    });\n  } else {\n    throw new DecodingError('expected JSON response from server.');\n  }\n};\n\nvar handleFetchResponse = function handleFetchResponse(handleResponse) {\n  return function (response) {\n    return (response.ok ? handleResponse({\n      response: response\n    }).then(function (handledResponse) {\n      return {\n        type: 'success',\n        status: response.status,\n        response: handledResponse,\n        originalResponse: response\n      };\n    }) : getJsonResponse(response).then(function (jsonResponse) {\n      return _extends({\n        type: 'error',\n        status: response.status\n      }, getErrorForBadStatusCode(jsonResponse), {\n        originalResponse: response\n      });\n    }))[\"catch\"](function (error) {\n      /**\r\n       * We want to separate expected decoding errors from unknown ones. We do so by throwing a custom\r\n       * `DecodingError` whenever we encounter one within `handleFetchResponse` and catch them all\r\n       * here. This allows us to easily handle all of these errors at once. Unexpected errors are not\r\n       * caught, so that they bubble up and fail loudly.\r\n       *\r\n       * Note: Ideally we'd use an Either type, but this does the job without introducing dependencies\r\n       * like `fp-ts`.\r\n       */\n      if (error instanceof DecodingError) {\n        return {\n          type: 'error',\n          source: 'decoding',\n          status: response.status,\n          originalResponse: response,\n          errors: [error.message]\n        };\n      } else {\n        throw error;\n      }\n    });\n  };\n};\nvar castResponse = function castResponse() {\n  return function (_ref) {\n    var response = _ref.response;\n    return getJsonResponse(response);\n  };\n};\n\nvar addQueryToUrl = function addQueryToUrl(query) {\n  return function (url) {\n    Object.keys(query).forEach(function (queryKey) {\n      return url.searchParams.set(queryKey, query[queryKey].toString());\n    });\n  };\n};\n\nvar addPathnameToUrl = function addPathnameToUrl(pathname) {\n  return function (url) {\n    // When there is no existing pathname, the value is `/`. Appending would give us a URL with two\n    // forward slashes. This is why we replace the value in that scenario.\n    if (url.pathname === '/') {\n      url.pathname = pathname;\n    } else {\n      url.pathname += pathname;\n    }\n  };\n};\n\nvar buildUrl = function buildUrl(_ref) {\n  var pathname = _ref.pathname,\n      query = _ref.query;\n  return function (apiUrl) {\n    var url = new URL(apiUrl);\n    addPathnameToUrl(pathname)(url);\n    addQueryToUrl(query)(url);\n    return url.toString();\n  };\n};\n\nvar getQueryFromSearchParams = function getQueryFromSearchParams(searchParams) {\n  var query = {};\n  searchParams.forEach(function (value, key) {\n    query[key] = value;\n  });\n  return query;\n};\n\nvar parseQueryAndPathname = function parseQueryAndPathname(url) {\n  var _URL = new URL(url),\n      pathname = _URL.pathname,\n      searchParams = _URL.searchParams;\n\n  var query = getQueryFromSearchParams(searchParams);\n  return {\n    query: query,\n    pathname: pathname === '/' ? undefined : pathname\n  };\n};\n\n/**\r\n * helper used to type-check the arguments, and add default params for all requests\r\n */\n\nvar createRequestHandler = function createRequestHandler(fn) {\n  return function (a, additionalFetchOptions) {\n    if (additionalFetchOptions === void 0) {\n      additionalFetchOptions = {};\n    }\n\n    var _fn = fn(a),\n        headers = _fn.headers,\n        query = _fn.query,\n        baseReqParams = _objectWithoutPropertiesLoose(_fn, [\"headers\", \"query\"]);\n\n    return _extends({}, baseReqParams, additionalFetchOptions, {\n      query: query,\n      headers: _extends({}, headers, additionalFetchOptions.headers)\n    });\n  };\n};\nvar makeEndpoint = function makeEndpoint(endpoint) {\n  return endpoint;\n};\nvar initMakeRequest = function initMakeRequest(_ref) {\n  var accessKey = _ref.accessKey,\n      _ref$apiVersion = _ref.apiVersion,\n      apiVersion = _ref$apiVersion === void 0 ? 'v1' : _ref$apiVersion,\n      _ref$apiUrl = _ref.apiUrl,\n      apiUrl = _ref$apiUrl === void 0 ? 'https://api.unsplash.com' : _ref$apiUrl,\n      generalHeaders = _ref.headers,\n      providedFetch = _ref.fetch,\n      generalFetchOptions = _objectWithoutPropertiesLoose(_ref, [\"accessKey\", \"apiVersion\", \"apiUrl\", \"headers\", \"fetch\"]);\n\n  return function (_ref2) {\n    var handleResponse = _ref2.handleResponse,\n        handleRequest = _ref2.handleRequest;\n    return flow(handleRequest, function (_ref3) {\n      var pathname = _ref3.pathname,\n          query = _ref3.query,\n          _ref3$method = _ref3.method,\n          method = _ref3$method === void 0 ? 'GET' : _ref3$method,\n          endpointHeaders = _ref3.headers,\n          body = _ref3.body,\n          signal = _ref3.signal;\n      var url = buildUrl({\n        pathname: pathname,\n        query: query\n      })(apiUrl);\n\n      var fetchOptions = _extends({\n        method: method,\n        headers: _extends({}, generalHeaders, endpointHeaders, {\n          'Accept-Version': apiVersion\n        }, isDefined(accessKey) ? {\n          Authorization: \"Client-ID \" + accessKey\n        } : {}),\n        body: body,\n        signal: signal\n      }, generalFetchOptions);\n\n      var fetchToUse = providedFetch != null ? providedFetch : fetch;\n      return fetchToUse(url, fetchOptions).then(handleFetchResponse(handleResponse));\n    });\n  };\n};\n\nvar TOTAL_RESPONSE_HEADER = 'x-total';\n\nvar getTotalFromApiFeedResponse = function getTotalFromApiFeedResponse(response) {\n  var totalsStr = response.headers.get(TOTAL_RESPONSE_HEADER);\n\n  if (isDefined(totalsStr)) {\n    var total = parseInt(totalsStr);\n\n    if (Number.isInteger(total)) {\n      return total;\n    } else {\n      throw new DecodingError(\"expected \" + TOTAL_RESPONSE_HEADER + \" header to be valid integer.\");\n    }\n  } else {\n    throw new DecodingError(\"expected \" + TOTAL_RESPONSE_HEADER + \" header to exist.\");\n  }\n};\n\nvar handleFeedResponse = function handleFeedResponse() {\n  return function (_ref) {\n    var response = _ref.response;\n    return castResponse()({\n      response: response\n    }).then(function (results) {\n      return {\n        results: results,\n        total: getTotalFromApiFeedResponse(response)\n      };\n    });\n  };\n};\n\nvar getCollections = function getCollections(collectionIds) {\n  return isDefined(collectionIds) ? {\n    collections: collectionIds.join()\n  } : {};\n};\nvar getTopics = function getTopics(topicIds) {\n  return isDefined(topicIds) ? {\n    topics: topicIds.join()\n  } : {};\n};\nvar getFeedParams = function getFeedParams(_ref) {\n  var page = _ref.page,\n      perPage = _ref.perPage,\n      orderBy = _ref.orderBy;\n  return compactDefined({\n    per_page: perPage,\n    order_by: orderBy,\n    page: page\n  });\n};\n\nvar COLLECTIONS_PATH_PREFIX = '/collections';\nvar getPhotos = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref) {\n    var collectionId = _ref.collectionId;\n    return COLLECTIONS_PATH_PREFIX + \"/\" + collectionId + \"/photos\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref2) {\n      var collectionId = _ref2.collectionId,\n          orientation = _ref2.orientation,\n          paginationParams = _objectWithoutPropertiesLoose(_ref2, [\"collectionId\", \"orientation\"]);\n\n      return {\n        pathname: getPathname({\n          collectionId: collectionId\n        }),\n        query: compactDefined(_extends({}, getFeedParams(paginationParams), {\n          orientation: orientation\n        }))\n      };\n    }),\n    handleResponse: handleFeedResponse()\n  });\n}();\nvar get = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref3) {\n    var collectionId = _ref3.collectionId;\n    return COLLECTIONS_PATH_PREFIX + \"/\" + collectionId;\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref4) {\n      var collectionId = _ref4.collectionId;\n      return {\n        pathname: getPathname({\n          collectionId: collectionId\n        }),\n        query: {}\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar list = /*#__PURE__*/function () {\n  var getPathname = function getPathname() {\n    return COLLECTIONS_PATH_PREFIX;\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (paginationParams) {\n      if (paginationParams === void 0) {\n        paginationParams = {};\n      }\n\n      return {\n        pathname: getPathname(),\n        query: getFeedParams(paginationParams)\n      };\n    }),\n    handleResponse: handleFeedResponse()\n  });\n}();\nvar getRelated = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref5) {\n    var collectionId = _ref5.collectionId;\n    return COLLECTIONS_PATH_PREFIX + \"/\" + collectionId + \"/related\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref6) {\n      var collectionId = _ref6.collectionId;\n      return {\n        pathname: getPathname({\n          collectionId: collectionId\n        }),\n        query: {}\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\n\nvar index = {\n  __proto__: null,\n  getPhotos: getPhotos,\n  get: get,\n  list: list,\n  getRelated: getRelated\n};\n\nvar PHOTOS_PATH_PREFIX = '/photos';\nvar list$1 = /*#__PURE__*/function () {\n  var _getPathname = function getPathname() {\n    return PHOTOS_PATH_PREFIX;\n  };\n\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: function getPathname(_params) {\n      return _getPathname();\n    },\n    handleRequest: createRequestHandler(function (feedParams) {\n      if (feedParams === void 0) {\n        feedParams = {};\n      }\n\n      return {\n        pathname: PHOTOS_PATH_PREFIX,\n        query: compactDefined(getFeedParams(feedParams))\n      };\n    }),\n    handleResponse: handleFeedResponse()\n  });\n}();\nvar get$1 = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref) {\n    var photoId = _ref.photoId;\n    return PHOTOS_PATH_PREFIX + \"/\" + photoId;\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref2) {\n      var photoId = _ref2.photoId;\n      return {\n        pathname: getPathname({\n          photoId: photoId\n        }),\n        query: {}\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar getStats = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref3) {\n    var photoId = _ref3.photoId;\n    return PHOTOS_PATH_PREFIX + \"/\" + photoId + \"/statistics\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref4) {\n      var photoId = _ref4.photoId;\n      return {\n        pathname: getPathname({\n          photoId: photoId\n        }),\n        query: {}\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar getRandom = /*#__PURE__*/function () {\n  var getPathname = function getPathname() {\n    return PHOTOS_PATH_PREFIX + \"/random\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_temp) {\n      var _ref5 = _temp === void 0 ? {} : _temp,\n          collectionIds = _ref5.collectionIds,\n          contentFilter = _ref5.contentFilter,\n          topicIds = _ref5.topicIds,\n          queryParams = _objectWithoutPropertiesLoose(_ref5, [\"collectionIds\", \"contentFilter\", \"topicIds\"]);\n\n      return {\n        pathname: getPathname(),\n        query: compactDefined(_extends({}, queryParams, {\n          content_filter: contentFilter\n        }, getCollections(collectionIds), getTopics(topicIds))),\n        headers: {\n          /**\r\n           * Avoid response caching\r\n           */\n          'cache-control': 'no-cache'\n        }\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar trackDownload = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref6) {\n    var downloadLocation = _ref6.downloadLocation;\n\n    var _parseQueryAndPathnam = parseQueryAndPathname(downloadLocation),\n        pathname = _parseQueryAndPathnam.pathname,\n        query = _parseQueryAndPathnam.query;\n\n    if (!isDefined(pathname)) {\n      throw new Error('Could not parse pathname from url.');\n    }\n\n    return {\n      pathname: pathname,\n      query: compactDefined(query)\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\n\nvar index$1 = {\n  __proto__: null,\n  list: list$1,\n  get: get$1,\n  getStats: getStats,\n  getRandom: getRandom,\n  trackDownload: trackDownload\n};\n\nvar SEARCH_PATH_PREFIX = \"/search\";\nvar getPhotos$1 = /*#__PURE__*/function () {\n  var _getPathname = function getPathname() {\n    return SEARCH_PATH_PREFIX + \"/photos\";\n  };\n\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: function getPathname(_params) {\n      return _getPathname();\n    },\n    handleRequest: createRequestHandler(function (_ref) {\n      var query = _ref.query,\n          page = _ref.page,\n          perPage = _ref.perPage,\n          orderBy = _ref.orderBy,\n          collectionIds = _ref.collectionIds,\n          lang = _ref.lang,\n          contentFilter = _ref.contentFilter,\n          filters = _objectWithoutPropertiesLoose(_ref, [\"query\", \"page\", \"perPage\", \"orderBy\", \"collectionIds\", \"lang\", \"contentFilter\"]);\n\n      return {\n        pathname: _getPathname(),\n        query: compactDefined(_extends({\n          query: query,\n          content_filter: contentFilter,\n          lang: lang,\n          order_by: orderBy\n        }, getFeedParams({\n          page: page,\n          perPage: perPage\n        }), getCollections(collectionIds), filters))\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar getCollections$1 = /*#__PURE__*/function () {\n  var _getPathname2 = function getPathname() {\n    return SEARCH_PATH_PREFIX + \"/collections\";\n  };\n\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: function getPathname(_params) {\n      return _getPathname2();\n    },\n    handleRequest: createRequestHandler(function (_ref2) {\n      var query = _ref2.query,\n          paginationParams = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n      return {\n        pathname: _getPathname2(),\n        query: _extends({\n          query: query\n        }, getFeedParams(paginationParams))\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar getUsers = /*#__PURE__*/function () {\n  var _getPathname3 = function getPathname() {\n    return SEARCH_PATH_PREFIX + \"/users\";\n  };\n\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: function getPathname(_params) {\n      return _getPathname3();\n    },\n    handleRequest: createRequestHandler(function (_ref3) {\n      var query = _ref3.query,\n          paginationParams = _objectWithoutPropertiesLoose(_ref3, [\"query\"]);\n\n      return {\n        pathname: _getPathname3(),\n        query: _extends({\n          query: query\n        }, getFeedParams(paginationParams))\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\n\nvar index$2 = {\n  __proto__: null,\n  getPhotos: getPhotos$1,\n  getCollections: getCollections$1,\n  getUsers: getUsers\n};\n\nvar USERS_PATH_PREFIX = '/users';\nvar get$2 = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref) {\n    var username = _ref.username;\n    return USERS_PATH_PREFIX + \"/\" + username;\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref2) {\n      var username = _ref2.username;\n      return {\n        pathname: getPathname({\n          username: username\n        }),\n        query: {}\n      };\n    }),\n    handleResponse: castResponse()\n  });\n}();\nvar getPhotos$2 = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref3) {\n    var username = _ref3.username;\n    return USERS_PATH_PREFIX + \"/\" + username + \"/photos\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref4) {\n      var username = _ref4.username,\n          stats = _ref4.stats,\n          orientation = _ref4.orientation,\n          paginationParams = _objectWithoutPropertiesLoose(_ref4, [\"username\", \"stats\", \"orientation\"]);\n\n      return {\n        pathname: getPathname({\n          username: username\n        }),\n        query: compactDefined(_extends({}, getFeedParams(paginationParams), {\n          orientation: orientation,\n          stats: stats\n        }))\n      };\n    }),\n    handleResponse: handleFeedResponse()\n  });\n}();\nvar getLikes = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref5) {\n    var username = _ref5.username;\n    return USERS_PATH_PREFIX + \"/\" + username + \"/likes\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref6) {\n      var username = _ref6.username,\n          orientation = _ref6.orientation,\n          paginationParams = _objectWithoutPropertiesLoose(_ref6, [\"username\", \"orientation\"]);\n\n      return {\n        pathname: getPathname({\n          username: username\n        }),\n        query: compactDefined(_extends({}, getFeedParams(paginationParams), {\n          orientation: orientation\n        }))\n      };\n    }),\n    handleResponse: handleFeedResponse()\n  });\n}();\nvar getCollections$2 = /*#__PURE__*/function () {\n  var getPathname = function getPathname(_ref7) {\n    var username = _ref7.username;\n    return USERS_PATH_PREFIX + \"/\" + username + \"/collections\";\n  };\n\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: createRequestHandler(function (_ref8) {\n      var username = _ref8.username,\n          paginationParams = _objectWithoutPropertiesLoose(_ref8, [\"username\"]);\n\n      return {\n        pathname: getPathname({\n          username: username\n        }),\n        query: getFeedParams(paginationParams)\n      };\n    }),\n    handleResponse: handleFeedResponse()\n  });\n}();\n\nvar index$3 = {\n  __proto__: null,\n  get: get$2,\n  getPhotos: getPhotos$2,\n  getLikes: getLikes,\n  getCollections: getCollections$2\n};\n\nvar BASE_TOPIC_PATH = '/topics';\n\nvar getTopicPath = function getTopicPath(_ref) {\n  var topicIdOrSlug = _ref.topicIdOrSlug;\n  return BASE_TOPIC_PATH + \"/\" + topicIdOrSlug;\n};\n\nvar list$2 = /*#__PURE__*/makeEndpoint({\n  getPathname: getTopicPath,\n  handleRequest: function handleRequest(_ref2) {\n    var page = _ref2.page,\n        perPage = _ref2.perPage,\n        orderBy = _ref2.orderBy,\n        topicIdsOrSlugs = _ref2.topicIdsOrSlugs;\n    return {\n      pathname: BASE_TOPIC_PATH,\n      query: compactDefined(_extends({}, getFeedParams({\n        page: page,\n        perPage: perPage\n      }), {\n        ids: topicIdsOrSlugs == null ? void 0 : topicIdsOrSlugs.join(','),\n        order_by: orderBy\n      }))\n    };\n  },\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n});\nvar get$3 = /*#__PURE__*/makeEndpoint({\n  getPathname: getTopicPath,\n  handleRequest: function handleRequest(_ref3) {\n    var topicIdOrSlug = _ref3.topicIdOrSlug;\n    return {\n      pathname: getTopicPath({\n        topicIdOrSlug: topicIdOrSlug\n      }),\n      query: {}\n    };\n  },\n  handleResponse: /*#__PURE__*/castResponse()\n});\nvar getPhotos$3 = /*#__PURE__*/function () {\n  var getPathname = /*#__PURE__*/flow(getTopicPath, function (topicPath) {\n    return topicPath + \"/photos\";\n  });\n  return makeEndpoint({\n    getPathname: getPathname,\n    handleRequest: function handleRequest(_ref4) {\n      var topicIdOrSlug = _ref4.topicIdOrSlug,\n          orientation = _ref4.orientation,\n          feedParams = _objectWithoutPropertiesLoose(_ref4, [\"topicIdOrSlug\", \"orientation\"]);\n\n      return {\n        pathname: getPathname({\n          topicIdOrSlug: topicIdOrSlug\n        }),\n        query: compactDefined(_extends({}, getFeedParams(feedParams), {\n          orientation: orientation\n        }))\n      };\n    },\n    handleResponse: handleFeedResponse()\n  });\n}();\n\nvar index$4 = {\n  __proto__: null,\n  list: list$2,\n  get: get$3,\n  getPhotos: getPhotos$3\n};\n\nvar trackNonHotLinkedPhotoView = function trackNonHotLinkedPhotoView(_ref) {\n  var appId = _ref.appId;\n  return function (_ref2) {\n    var photoId = _ref2.photoId;\n    var ids = !Array.isArray(photoId) ? [photoId] : photoId;\n\n    if (ids.length > 20) {\n      throw new Error('You cannot track more than 20 photos at once. Please try again with fewer photos.');\n    }\n\n    return fetch(\"views.unsplash.com/v?photo_id=\" + ids.join() + \"&app_id=\" + appId);\n  };\n};\n\n\n\nvar internals = {\n  __proto__: null,\n  collections: index,\n  photos: index$1,\n  search: index$2,\n  users: index$3,\n  topics: index$4,\n  trackNonHotLinkedPhotoView: trackNonHotLinkedPhotoView\n};\n\nvar Language;\n\n(function (Language) {\n  Language[\"Afrikaans\"] = \"af\";\n  Language[\"Amharic\"] = \"am\";\n  Language[\"Arabic\"] = \"ar\";\n  Language[\"Azerbaijani\"] = \"az\";\n  Language[\"Belarusian\"] = \"be\";\n  Language[\"Bulgarian\"] = \"bg\";\n  Language[\"Bengali\"] = \"bn\";\n  Language[\"Bosnian\"] = \"bs\";\n  Language[\"Catalan\"] = \"ca\";\n  Language[\"Cebuano\"] = \"ceb\";\n  Language[\"Corsican\"] = \"co\";\n  Language[\"Czech\"] = \"cs\";\n  Language[\"Welsh\"] = \"cy\";\n  Language[\"Danish\"] = \"da\";\n  Language[\"German\"] = \"de\";\n  Language[\"Greek\"] = \"el\";\n  Language[\"English\"] = \"en\";\n  Language[\"Esperanto\"] = \"eo\";\n  Language[\"Spanish\"] = \"es\";\n  Language[\"Estonian\"] = \"et\";\n  Language[\"Basque\"] = \"eu\";\n  Language[\"Persian\"] = \"fa\";\n  Language[\"Finnish\"] = \"fi\";\n  Language[\"French\"] = \"fr\";\n  Language[\"Frisian\"] = \"fy\";\n  Language[\"Irish\"] = \"ga\";\n  Language[\"ScotsGaelic\"] = \"gd\";\n  Language[\"Galician\"] = \"gl\";\n  Language[\"Gujarati\"] = \"gu\";\n  Language[\"Hausa\"] = \"ha\";\n  Language[\"Hawaiian\"] = \"haw\";\n  Language[\"Hindi\"] = \"hi\";\n  Language[\"Hmong\"] = \"hmn\";\n  Language[\"Croatian\"] = \"hr\";\n  Language[\"HaitianCreole\"] = \"ht\";\n  Language[\"Hungarian\"] = \"hu\";\n  Language[\"Armenian\"] = \"hy\";\n  Language[\"Indonesian\"] = \"id\";\n  Language[\"Igbo\"] = \"ig\";\n  Language[\"Icelandic\"] = \"is\";\n  Language[\"Italian\"] = \"it\";\n  Language[\"Hebrew\"] = \"iw\";\n  Language[\"Japanese\"] = \"ja\";\n  Language[\"Javanese\"] = \"jw\";\n  Language[\"Georgian\"] = \"ka\";\n  Language[\"Kazakh\"] = \"kk\";\n  Language[\"Khmer\"] = \"km\";\n  Language[\"Kannada\"] = \"kn\";\n  Language[\"Korean\"] = \"ko\";\n  Language[\"Kurdish\"] = \"ku\";\n  Language[\"Kyrgyz\"] = \"ky\";\n  Language[\"Latin\"] = \"la\";\n  Language[\"Luxembourgish\"] = \"lb\";\n  Language[\"Lao\"] = \"lo\";\n  Language[\"Lithuanian\"] = \"lt\";\n  Language[\"Latvian\"] = \"lv\";\n  Language[\"Malagasy\"] = \"mg\";\n  Language[\"Maori\"] = \"mi\";\n  Language[\"Macedonian\"] = \"mk\";\n  Language[\"Malayalam\"] = \"ml\";\n  Language[\"Mongolian\"] = \"mn\";\n  Language[\"Marathi\"] = \"mr\";\n  Language[\"Malay\"] = \"ms\";\n  Language[\"Maltese\"] = \"mt\";\n  Language[\"Myanmar\"] = \"my\";\n  Language[\"Nepali\"] = \"ne\";\n  Language[\"Dutch\"] = \"nl\";\n  Language[\"Norwegian\"] = \"no\";\n  Language[\"Nyanja\"] = \"ny\";\n  Language[\"Oriya\"] = \"or\";\n  Language[\"Punjabi\"] = \"pa\";\n  Language[\"Polish\"] = \"pl\";\n  Language[\"Pashto\"] = \"ps\";\n  Language[\"Portuguese\"] = \"pt\";\n  Language[\"Romanian\"] = \"ro\";\n  Language[\"Russian\"] = \"ru\";\n  Language[\"Kinyarwanda\"] = \"rw\";\n  Language[\"Sindhi\"] = \"sd\";\n  Language[\"Sinhala\"] = \"si\";\n  Language[\"Slovak\"] = \"sk\";\n  Language[\"Slovenian\"] = \"sl\";\n  Language[\"Samoan\"] = \"sm\";\n  Language[\"Shona\"] = \"sn\";\n  Language[\"Somali\"] = \"so\";\n  Language[\"Albanian\"] = \"sq\";\n  Language[\"Serbian\"] = \"sr\";\n  Language[\"Sesotho\"] = \"st\";\n  Language[\"Sundanese\"] = \"su\";\n  Language[\"Swedish\"] = \"sv\";\n  Language[\"Swahili\"] = \"sw\";\n  Language[\"Tamil\"] = \"ta\";\n  Language[\"Telugu\"] = \"te\";\n  Language[\"Tajik\"] = \"tg\";\n  Language[\"Thai\"] = \"th\";\n  Language[\"Turkmen\"] = \"tk\";\n  Language[\"Filipino\"] = \"tl\";\n  Language[\"Turkish\"] = \"tr\";\n  Language[\"Tatar\"] = \"tt\";\n  Language[\"Uighur\"] = \"ug\";\n  Language[\"Ukrainian\"] = \"uk\";\n  Language[\"Urdu\"] = \"ur\";\n  Language[\"Uzbek\"] = \"uz\";\n  Language[\"Vietnamese\"] = \"vi\";\n  Language[\"Xhosa\"] = \"xh\";\n  Language[\"Yiddish\"] = \"yi\";\n  Language[\"Yoruba\"] = \"yo\";\n  Language[\"ChineseSimplified\"] = \"zh\";\n  Language[\"ChineseTraditional\"] = \"zh-TW\";\n  Language[\"Zulu\"] = \"zu\";\n})(Language || (Language = {}));\n\nvar OrderBy;\n\n(function (OrderBy) {\n  OrderBy[\"LATEST\"] = \"latest\";\n  OrderBy[\"POPULAR\"] = \"popular\";\n  OrderBy[\"VIEWS\"] = \"views\";\n  OrderBy[\"DOWNLOADS\"] = \"downloads\";\n  OrderBy[\"OLDEST\"] = \"oldest\";\n})(OrderBy || (OrderBy = {}));\n\nvar createApi = /*#__PURE__*/flow(initMakeRequest, function (makeRequest) {\n  return {\n    photos: {\n      get: makeRequest(get$1),\n      list: makeRequest(list$1),\n      getStats: makeRequest(getStats),\n      getRandom: makeRequest(getRandom),\n      trackDownload: makeRequest(trackDownload)\n    },\n    users: {\n      getPhotos: makeRequest(getPhotos$2),\n      getCollections: makeRequest(getCollections$2),\n      getLikes: makeRequest(getLikes),\n      get: makeRequest(get$2)\n    },\n    search: {\n      getCollections: makeRequest(getCollections$1),\n      getPhotos: makeRequest(getPhotos$1),\n      getUsers: makeRequest(getUsers)\n    },\n    collections: {\n      getPhotos: makeRequest(getPhotos),\n      get: makeRequest(get),\n      list: makeRequest(list),\n      getRelated: makeRequest(getRelated)\n    },\n    topics: {\n      list: makeRequest(list$2),\n      get: makeRequest(get$3),\n      getPhotos: makeRequest(getPhotos$3)\n    }\n  };\n});\n\n\n//# sourceMappingURL=unsplash-js.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/unsplash-js/dist/unsplash-js.esm.js\n");

/***/ })

};
;