"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/effect";
exports.ids = ["vendor-chunks/effect"];
exports.modules = {

/***/ "(ssr)/./node_modules/effect/dist/esm/Array.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Array.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   allocate: () => (/* binding */ allocate),\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendAll: () => (/* binding */ appendAll),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   cartesian: () => (/* binding */ cartesian),\n/* harmony export */   cartesianWith: () => (/* binding */ cartesianWith),\n/* harmony export */   chop: () => (/* binding */ chop),\n/* harmony export */   chunksOf: () => (/* binding */ chunksOf),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   dedupe: () => (/* binding */ dedupe),\n/* harmony export */   dedupeAdjacent: () => (/* binding */ dedupeAdjacent),\n/* harmony export */   dedupeAdjacentWith: () => (/* binding */ dedupeAdjacentWith),\n/* harmony export */   dedupeWith: () => (/* binding */ dedupeWith),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   differenceWith: () => (/* binding */ differenceWith),\n/* harmony export */   drop: () => (/* binding */ drop),\n/* harmony export */   dropRight: () => (/* binding */ dropRight),\n/* harmony export */   dropWhile: () => (/* binding */ dropWhile),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   ensure: () => (/* binding */ ensure),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterMapWhile: () => (/* binding */ filterMapWhile),\n/* harmony export */   findFirst: () => (/* binding */ findFirst),\n/* harmony export */   findFirstIndex: () => (/* binding */ findFirstIndex),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   findLastIndex: () => (/* binding */ findLastIndex),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromIterable: () => (/* binding */ fromIterable),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   fromRecord: () => (/* binding */ fromRecord),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLefts: () => (/* binding */ getLefts),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getRights: () => (/* binding */ getRights),\n/* harmony export */   getSomes: () => (/* binding */ getSomes),\n/* harmony export */   group: () => (/* binding */ group),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   groupWith: () => (/* binding */ groupWith),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   headNonEmpty: () => (/* binding */ headNonEmpty),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   initNonEmpty: () => (/* binding */ initNonEmpty),\n/* harmony export */   insertAt: () => (/* binding */ insertAt),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   intersectionWith: () => (/* binding */ intersectionWith),\n/* harmony export */   intersperse: () => (/* binding */ intersperse),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isEmptyArray: () => (/* binding */ isEmptyArray),\n/* harmony export */   isEmptyReadonlyArray: () => (/* binding */ isEmptyReadonlyArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray),\n/* harmony export */   isNonEmptyReadonlyArray: () => (/* binding */ isNonEmptyReadonlyArray),\n/* harmony export */   join: () => (/* binding */ join),\n/* harmony export */   last: () => (/* binding */ last),\n/* harmony export */   lastNonEmpty: () => (/* binding */ lastNonEmpty),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   liftEither: () => (/* binding */ liftEither),\n/* harmony export */   liftNullable: () => (/* binding */ liftNullable),\n/* harmony export */   liftOption: () => (/* binding */ liftOption),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeBy: () => (/* binding */ makeBy),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapAccum: () => (/* binding */ mapAccum),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   matchLeft: () => (/* binding */ matchLeft),\n/* harmony export */   matchRight: () => (/* binding */ matchRight),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   modify: () => (/* binding */ modify),\n/* harmony export */   modifyNonEmptyHead: () => (/* binding */ modifyNonEmptyHead),\n/* harmony export */   modifyNonEmptyLast: () => (/* binding */ modifyNonEmptyLast),\n/* harmony export */   modifyOption: () => (/* binding */ modifyOption),\n/* harmony export */   of: () => (/* binding */ of),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependAll: () => (/* binding */ prependAll),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   reduceRight: () => (/* binding */ reduceRight),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   replace: () => (/* binding */ replace),\n/* harmony export */   replaceOption: () => (/* binding */ replaceOption),\n/* harmony export */   replicate: () => (/* binding */ replicate),\n/* harmony export */   reverse: () => (/* binding */ reverse),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   scanRight: () => (/* binding */ scanRight),\n/* harmony export */   separate: () => (/* binding */ separate),\n/* harmony export */   setNonEmptyHead: () => (/* binding */ setNonEmptyHead),\n/* harmony export */   setNonEmptyLast: () => (/* binding */ setNonEmptyLast),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   sort: () => (/* binding */ sort),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   sortWith: () => (/* binding */ sortWith),\n/* harmony export */   span: () => (/* binding */ span),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   splitAt: () => (/* binding */ splitAt),\n/* harmony export */   splitNonEmptyAt: () => (/* binding */ splitNonEmptyAt),\n/* harmony export */   splitWhere: () => (/* binding */ splitWhere),\n/* harmony export */   tail: () => (/* binding */ tail),\n/* harmony export */   tailNonEmpty: () => (/* binding */ tailNonEmpty),\n/* harmony export */   take: () => (/* binding */ take),\n/* harmony export */   takeRight: () => (/* binding */ takeRight),\n/* harmony export */   takeWhile: () => (/* binding */ takeWhile),\n/* harmony export */   unappend: () => (/* binding */ unappend),\n/* harmony export */   unfold: () => (/* binding */ unfold),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   unionWith: () => (/* binding */ unionWith),\n/* harmony export */   unprepend: () => (/* binding */ unprepend),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet),\n/* harmony export */   unzip: () => (/* binding */ unzip),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/array.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/array.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _Iterable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Iterable.js */ \"(ssr)/./node_modules/effect/dist/esm/Iterable.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Record_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Record.js */ \"(ssr)/./node_modules/effect/dist/esm/Record.js\");\n/* harmony import */ var _Tuple_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Tuple.js */ \"(ssr)/./node_modules/effect/dist/esm/Tuple.js\");\n/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst make = (...elements) => elements;\n/**\n * Creates a new `Array` of the specified length.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * assert.deepStrictEqual(result.length, 3)\n *\n * @category constructors\n * @since 2.0.0\n */\nconst allocate = n => new Array(n);\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Array\"\n *\n * assert.deepStrictEqual(makeBy(5, n => n * 2), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst makeBy = (n, f) => {\n  const max = Math.max(1, Math.floor(n));\n  const out = new Array(max);\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i);\n  }\n  return out;\n};\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from \"effect/Array\"\n *\n * assert.deepStrictEqual(range(1, 3), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst range = (start, end) => start <= end ? makeBy(end - start + 1, i => start + i) : [start];\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst replicate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (a, n) => makeBy(n, () => a));\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const set = new Set([1, 2, 3])\n * const result = Array.fromIterable(set)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromIterable = collection => Array.isArray(collection) ? collection : Array.from(collection);\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.ensure(\"a\"), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\"]), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"])\n *\n * @category constructors\n * @since 3.3.0\n */\nconst ensure = self => Array.isArray(self) ? self : [self];\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.fromRecord(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst fromRecord = _Record_js__WEBPACK_IMPORTED_MODULE_1__.toEntries;\n/**\n * Converts an `Option` to an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Array.fromOption(Option.some(1)), [1])\n * assert.deepStrictEqual(Array.fromOption(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst fromOption = _Option_js__WEBPACK_IMPORTED_MODULE_2__.toArray;\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(match([]), \"empty\")\n * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, {\n  onEmpty,\n  onNonEmpty\n}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty());\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(matchLeft([]), \"empty\")\n * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst matchLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, {\n  onEmpty,\n  onNonEmpty\n}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty());\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * assert.deepStrictEqual(matchRight([]), \"empty\")\n * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst matchRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, {\n  onEmpty,\n  onNonEmpty\n}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) : onEmpty());\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [2, 3, 4];\n * const result = Array.prepend(original, 1);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst prepend = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, head) => [head, ...self]);\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const prefix = [0, 1];\n * const array = [2, 3];\n * const result = Array.prependAll(array, prefix);\n * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst prependAll = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => fromIterable(that).concat(fromIterable(self)));\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [1, 2, 3];\n * const result = Array.append(original, 4);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst append = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, last) => [...self, last]);\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst appendAll = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => fromIterable(self).concat(fromIterable(that)));\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n *\n * @category folding\n * @since 2.0.0\n */\nconst scan = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f) => {\n  const out = [b];\n  let i = 0;\n  for (const a of self) {\n    out[i + 1] = f(out[i], a);\n    i++;\n  }\n  return out;\n});\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n *\n * @category folding\n * @since 2.0.0\n */\nconst scanRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f) => {\n  const input = fromIterable(self);\n  const out = new Array(input.length + 1);\n  out[input.length] = b;\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i]);\n  }\n  return out;\n});\n/**\n * Determine if `unknown` is an Array.\n *\n * @param self - The value to check.\n *\n * @example\n * import { isArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isArray(null), false);\n * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isArray = Array.isArray;\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyArray([]), true);\n * assert.deepStrictEqual(isEmptyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEmptyArray = self => self.length === 0;\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyArray([]), true);\n * assert.deepStrictEqual(isEmptyReadonlyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEmptyReadonlyArray = isEmptyArray;\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isNonEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNonEmptyArray = _internal_array_js__WEBPACK_IMPORTED_MODULE_3__.isNonEmptyArray;\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isNonEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNonEmptyReadonlyArray = _internal_array_js__WEBPACK_IMPORTED_MODULE_3__.isNonEmptyArray;\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nconst length = self => self.length;\nconst isOutOfBound = (i, as) => i < 0 || i >= as.length;\nconst clamp = (i, as) => Math.floor(Math.min(Math.max(0, i), as.length));\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nconst get = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, index) => {\n  const i = Math.floor(index);\n  return isOutOfBound(i, self) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.none() : _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(self[i]);\n});\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nconst unsafeGet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, index) => {\n  const i = Math.floor(index);\n  if (isOutOfBound(i, self)) {\n    throw new Error(`Index ${i} out of bounds`);\n  }\n  return self[i];\n});\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, [2, 3, 4]])\n *\n * @category splitting\n * @since 2.0.0\n */\nconst unprepend = self => [headNonEmpty(self), tailNonEmpty(self)];\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [[1, 2, 3], 4])\n *\n * @category splitting\n * @since 2.0.0\n */\nconst unappend = self => [initNonEmpty(self), lastNonEmpty(self)];\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nconst head = /*#__PURE__*/get(0);\n/**\n * Get the first element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 1)\n *\n * @category getters\n * @since 2.0.0\n */\nconst headNonEmpty = /*#__PURE__*/unsafeGet(0);\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nconst last = self => isNonEmptyReadonlyArray(self) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(lastNonEmpty(self)) : _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n/**\n * Get the last element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 4)\n *\n * @category getters\n * @since 2.0.0\n */\nconst lastNonEmpty = self => self[self.length - 1];\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nconst tail = self => {\n  const input = fromIterable(self);\n  return isNonEmptyReadonlyArray(input) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(tailNonEmpty(input)) : _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n};\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [2, 3, 4])\n *\n * @category getters\n * @since 2.0.0\n */\nconst tailNonEmpty = self => self.slice(1);\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nconst init = self => {\n  const input = fromIterable(self);\n  return isNonEmptyReadonlyArray(input) ? _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(initNonEmpty(input)) : _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n};\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nconst initNonEmpty = self => self.slice(0, -1);\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.take(numbers, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nconst take = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  return input.slice(0, clamp(n, input));\n});\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.takeRight(numbers, 3)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nconst takeRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  const i = clamp(n, input);\n  return i === 0 ? [] : input.slice(-i);\n});\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 3, 2, 4, 1, 2]\n * const result = Array.takeWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [1, 3, 2])\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n *\n * @category getters\n * @since 2.0.0\n */\nconst takeWhile = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  let i = 0;\n  const out = [];\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break;\n    }\n    out.push(a);\n    i++;\n  }\n  return out;\n});\nconst spanIndex = (self, predicate) => {\n  let i = 0;\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break;\n    }\n    i++;\n  }\n  return i;\n};\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nconst span = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => splitAt(self, spanIndex(self, predicate)));\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.drop(numbers, 2)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nconst drop = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  return input.slice(clamp(n, input), input.length);\n});\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropRight(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nconst dropRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  return input.slice(0, input.length - clamp(n, input));\n});\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nconst dropWhile = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => fromIterable(self).slice(spanIndex(self, predicate)));\n/**\n * Return the first index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [5, 3, 8, 9]\n * const result = Array.findFirstIndex(numbers, x => x > 5)\n * assert.deepStrictEqual(result, Option.some(2))\n *\n * @category elements\n * @since 2.0.0\n */\nconst findFirstIndex = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  let i = 0;\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(i);\n    }\n    i++;\n  }\n  return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n});\n/**\n * Return the last index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 3, 8, 9]\n * const result = Array.findLastIndex(numbers, x => x < 5)\n * assert.deepStrictEqual(result, Option.some(1))\n *\n * @category elements\n * @since 2.0.0\n */\nconst findLastIndex = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  const input = fromIterable(self);\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(i);\n    }\n  }\n  return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n});\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findFirst(numbers, x => x > 3)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nconst findFirst = _Iterable_js__WEBPACK_IMPORTED_MODULE_4__.findFirst;\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findLast(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nconst findLast = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const input = fromIterable(self);\n  for (let i = input.length - 1; i >= 0; i--) {\n    const a = input[i];\n    const o = f(a, i);\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.isBoolean)(o)) {\n      if (o) {\n        return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(a);\n      }\n    } else {\n      if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(o)) {\n        return o;\n      }\n    }\n  }\n  return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n});\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'e']\n * const result = Array.insertAt(letters, 3, 'd')\n * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n *\n * @since 2.0.0\n */\nconst insertAt = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, b) => {\n  const out = Array.from(self);\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n  }\n  out.splice(i, 0, b);\n  return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(out);\n});\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.replace(1, 'z')(letters)\n * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n *\n * @since 2.0.0\n */\nconst replace = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, b) => modify(self, i, () => b));\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.replaceOption(numbers, 1, 4)\n * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n *\n * @since 2.0.0\n */\nconst replaceOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, b) => modifyOption(self, i, () => b));\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modify(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6, 4])\n *\n * @since 2.0.0\n */\nconst modify = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, f) => _Option_js__WEBPACK_IMPORTED_MODULE_2__.getOrElse(modifyOption(self, i, f), () => Array.from(self)));\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n *\n * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n *\n * @since 2.0.0\n */\nconst modifyOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, i, f) => {\n  const out = Array.from(self);\n  if (isOutOfBound(i, out)) {\n    return _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n  }\n  const next = f(out[i]);\n  // @ts-expect-error\n  out[i] = next;\n  return _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(out);\n});\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.remove(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * const outOfBoundsResult = Array.remove(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n *\n * @since 2.0.0\n */\nconst remove = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, i) => {\n  const out = Array.from(self);\n  if (isOutOfBound(i, out)) {\n    return out;\n  }\n  out.splice(i, 1);\n  return out;\n});\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.reverse(numbers)\n * assert.deepStrictEqual(result, [4, 3, 2, 1])\n *\n * @category elements\n * @since 2.0.0\n */\nconst reverse = self => Array.from(self).reverse();\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nconst sort = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, O) => {\n  const out = Array.from(self);\n  out.sort(O);\n  return out;\n});\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const strings = [\"aaa\", \"b\", \"cc\"]\n * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n *\n * @since 2.0.0\n * @category elements\n */\nconst sortWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, f, order) => sort(self, _Order_js__WEBPACK_IMPORTED_MODULE_6__.mapInput(order, f)));\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = Array.sortBy(\n *   Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *   Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n * )(users)\n *\n * assert.deepStrictEqual(result, [\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Charlie\", age: 30 }\n * ])\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n *\n * @category sorting\n * @since 2.0.0\n */\nconst sortBy = (...orders) => {\n  const sortByAll = sort(_Order_js__WEBPACK_IMPORTED_MODULE_6__.combineAll(orders));\n  return self => {\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input);\n    }\n    return [];\n  };\n};\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = ['a', 'b']\n * const result = Array.zip(array1, array2)\n * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zip = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => zipWith(self, that, _Tuple_js__WEBPACK_IMPORTED_MODULE_7__.make));\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [4, 5, 6]\n * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n * assert.deepStrictEqual(result, [5, 7, 9])\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f) => {\n  const as = fromIterable(self);\n  const bs = fromIterable(that);\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out = [f(headNonEmpty(as), headNonEmpty(bs))];\n    const len = Math.min(as.length, bs.length);\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i]);\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * assert.deepStrictEqual(result, [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nconst unzip = self => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const fa = [input[0][0]];\n    const fb = [input[0][1]];\n    for (let i = 1; i < input.length; i++) {\n      fa[i] = input[i][0];\n      fb[i] = input[i][1];\n    }\n    return [fa, fb];\n  }\n  return [[], []];\n};\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.intersperse(numbers, 0)\n * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n *\n * @since 2.0.0\n */\nconst intersperse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, middle) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const out = [headNonEmpty(input)];\n    const tail = tailNonEmpty(input);\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle);\n      }\n      out.push(tail[i]);\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nconst modifyNonEmptyHead = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => [f(headNonEmpty(self)), ...tailNonEmpty(self)]);\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nconst setNonEmptyHead = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, b) => modifyNonEmptyHead(self, () => b));\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6])\n *\n * @since 2.0.0\n */\nconst modifyNonEmptyLast = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => append(initNonEmpty(self), f(lastNonEmpty(self))));\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * @since 2.0.0\n */\nconst setNonEmptyLast = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, b) => modifyNonEmptyLast(self, () => b));\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.rotate(letters, 2)\n * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n *\n * @since 2.0.0\n */\nconst rotate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length;\n    const m = Math.round(n) % len;\n    if (isOutOfBound(Math.abs(m), input) || m === 0) {\n      return copy(input);\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m);\n      return appendAll(s, f);\n    } else {\n      return rotate(self, m - len);\n    }\n  }\n  return [];\n});\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = containsNumber(3)(numbers)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nconst containsWith = isEquivalent => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, a) => {\n  for (const i of self) {\n    if (isEquivalent(a, i)) {\n      return true;\n    }\n  }\n  return false;\n});\nconst _equivalence = /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence();\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.contains('c')(letters)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nconst contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n *\n * @since 2.0.0\n */\nconst chop = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input);\n    const out = [b];\n    let next = rest;\n    while (_internal_array_js__WEBPACK_IMPORTED_MODULE_3__.isNonEmptyArray(next)) {\n      const [b, rest] = f(next);\n      out.push(b);\n      next = rest;\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitAt(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nconst splitAt = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = Array.from(self);\n  const _n = Math.floor(n);\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n);\n    }\n    return [[], input];\n  }\n  return [input, []];\n});\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n *\n * @category splitting\n * @since 2.0.0\n */\nconst splitNonEmptyAt = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const _n = Math.max(1, Math.floor(n));\n  return _n >= self.length ? [copy(self), []] : [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)];\n});\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n * const result = Array.split(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n *\n * @since 2.0.0\n * @category splitting\n */\nconst split = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)));\n});\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitWhere(numbers, n => n > 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nconst splitWhere = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => span(self, (a, i) => !predicate(a, i)));\n/**\n * Copies an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const copy = Array.copy(numbers)\n * assert.deepStrictEqual(copy, [1, 2, 3])\n *\n * @since 2.0.0\n */\nconst copy = self => self.slice();\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chunksOf(numbers, 2)\n * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n *\n * @category splitting\n * @since 2.0.0\n */\nconst chunksOf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n));\n  }\n  return [];\n});\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n *\n * @category grouping\n * @since 2.0.0\n */\nconst groupWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent) => chop(self, as => {\n  const h = headNonEmpty(as);\n  const out = [h];\n  let i = 1;\n  for (; i < as.length; i++) {\n    const a = as[i];\n    if (isEquivalent(a, h)) {\n      out.push(a);\n    } else {\n      break;\n    }\n  }\n  return [out, as.slice(i)];\n}));\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * assert.deepStrictEqual(result, [[1, 1], [2, 2, 2], [3], [1]])\n *\n * @category grouping\n * @since 2.0.0\n */\nconst group = /*#__PURE__*/groupWith( /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence());\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n * const result = Array.groupBy(people, person => person.group)\n * assert.deepStrictEqual(result, {\n *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n *   B: [{ name: \"Bob\", group: \"B\" }]\n * })\n *\n * @category grouping\n * @since 2.0.0\n */\nconst groupBy = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = {};\n  for (const a of self) {\n    const k = f(a);\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a);\n    } else {\n      out[k] = [a];\n    }\n  }\n  return out;\n});\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n * assert.deepStrictEqual(union, [1, 2, 3])\n *\n * @since 2.0.0\n */\nconst unionWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, isEquivalent) => {\n  const a = fromIterable(self);\n  const b = fromIterable(that);\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent);\n      return dedupe(appendAll(a, b));\n    }\n    return a;\n  }\n  return b;\n});\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const result = Array.union(array1, array2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @since 2.0.0\n */\nconst union = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => unionWith(self, that, _equivalence));\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * assert.deepStrictEqual(result, [{ id: 1 }, { id: 3 }])\n *\n * @since 2.0.0\n */\nconst intersectionWith = isEquivalent => {\n  const has = containsWith(isEquivalent);\n  return (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => fromIterable(self).filter(a => has(that, a)));\n};\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [3, 4, 1]\n * const result = Array.intersection(array1, array2)\n * assert.deepStrictEqual(result, [1, 3])\n *\n * @since 2.0.0\n */\nconst intersection = /*#__PURE__*/intersectionWith(_equivalence);\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nconst differenceWith = isEquivalent => {\n  const has = containsWith(isEquivalent);\n  return (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => fromIterable(self).filter(a => !has(that, a)));\n};\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.difference(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nconst difference = /*#__PURE__*/differenceWith(_equivalence);\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst empty = () => [];\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst of = a => [a];\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => self.map(f));\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  if (isEmptyReadonlyArray(self)) {\n    return [];\n  }\n  const out = [];\n  for (let i = 0; i < self.length; i++) {\n    const inner = f(self[i], i);\n    for (let j = 0; j < inner.length; j++) {\n      out.push(inner[j]);\n    }\n  }\n  return out;\n});\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const nestedArrays = [[1, 2], [], [3, 4], [], [5, 6]]\n * const result = Array.flatten(nestedArrays)\n *\n * assert.deepStrictEqual(result, [1, 2, 3, 4, 5, 6]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatten = /*#__PURE__*/flatMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5];\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMap(data, evenSquares);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filterMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const as = fromIterable(self);\n  const out = [];\n  for (let i = 0; i < as.length; i++) {\n    const o = f(as[i], i);\n    if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(o)) {\n      out.push(o.value);\n    }\n  }\n  return out;\n});\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [2, 4, 5];\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMapWhile(data, toSquareTillOdd);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filterMapWhile = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  let i = 0;\n  const out = [];\n  for (const a of self) {\n    const b = f(a, i);\n    if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(b)) {\n      out.push(b.value);\n    } else {\n      break;\n    }\n    i++;\n  }\n  return out;\n});\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * @example\n * import { Array, Either } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5]\n * const isEven = (x: number) => x % 2 === 0\n * const partitioned = Array.partitionMap(data, x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n *\n * assert.deepStrictEqual(partitioned, [\n *   [1, 3, 5],\n *   [2, 4]\n * ])\n *\n * @category filtering\n * @since 2.0.0\n */\nconst partitionMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const left = [];\n  const right = [];\n  const as = fromIterable(self);\n  for (let i = 0; i < as.length; i++) {\n    const e = f(as[i], i);\n    if (_Either_js__WEBPACK_IMPORTED_MODULE_9__.isLeft(e)) {\n      left.push(e.left);\n    } else {\n      right.push(e.right);\n    }\n  }\n  return [left, right];\n});\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getSomes([Option.some(1), Option.none(), Option.some(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getSomes = /*#__PURE__*/filterMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getLefts = self => {\n  const out = [];\n  for (const a of self) {\n    if (_Either_js__WEBPACK_IMPORTED_MODULE_9__.isLeft(a)) {\n      out.push(a.left);\n    }\n  }\n  return out;\n};\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getRights = self => {\n  const out = [];\n  for (const a of self) {\n    if (_Either_js__WEBPACK_IMPORTED_MODULE_9__.isRight(a)) {\n      out.push(a.right);\n    }\n  }\n  return out;\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nconst filter = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  const as = fromIterable(self);\n  const out = [];\n  for (let i = 0; i < as.length; i++) {\n    if (predicate(as[i], i)) {\n      out.push(as[i]);\n    }\n  }\n  return out;\n});\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nconst partition = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  const left = [];\n  const right = [];\n  const as = fromIterable(self);\n  for (let i = 0; i < as.length; i++) {\n    if (predicate(as[i], i)) {\n      right.push(as[i]);\n    } else {\n      left.push(as[i]);\n    }\n  }\n  return [left, right];\n});\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.partition(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, [[1, 3], [2, 4]])\n *\n * @category filtering\n * @since 2.0.0\n */\nconst separate = /*#__PURE__*/partitionMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Reduces an array from the left.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nconst reduce = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f) => fromIterable(self).reduce((b, a, i) => f(b, a, i), b));\n/**\n * Reduces an array from the right.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nconst reduceRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f) => fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b));\n/**\n * Lifts a predicate into an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * assert.deepStrictEqual(to(1), [])\n * assert.deepStrictEqual(to(2), [2])\n *\n * @category lifting\n * @since 2.0.0\n */\nconst liftPredicate = predicate => b => predicate(b) ? [b] : [];\n/**\n * @category lifting\n * @since 2.0.0\n */\nconst liftOption = f => (...a) => fromOption(f(...a));\n/**\n * @category conversions\n * @since 2.0.0\n */\nconst fromNullable = a => a == null ? empty() : [a];\n/**\n * @category lifting\n * @since 2.0.0\n */\nconst liftNullable = f => (...a) => fromNullable(f(...a));\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n * assert.deepStrictEqual(result, [1, 3])\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMapNullable = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => flatMap(self, a => fromNullable(f(a))));\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * assert.deepStrictEqual(result1, [42])\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * assert.deepStrictEqual(result2, [])\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n *\n * @category lifting\n * @since 2.0.0\n */\nconst liftEither = f => (...a) => {\n  const e = f(...a);\n  return _Either_js__WEBPACK_IMPORTED_MODULE_9__.isLeft(e) ? [] : [e.right];\n};\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nconst every = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, refinement) => self.every(refinement));\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nconst some = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => self.some(predicate));\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.extend(numbers, as => as.length)\n * assert.deepStrictEqual(result, [3, 2, 1])\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n *\n * @since 2.0.0\n */\nconst extend = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => self.map((_, i, as) => f(as.slice(i))));\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const min = Array.min([3, 1, 2], Order.number)\n * assert.deepStrictEqual(min, 1)\n *\n * @since 2.0.0\n */\nconst min = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, O) => self.reduce(_Order_js__WEBPACK_IMPORTED_MODULE_6__.min(O)));\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const max = Array.max([3, 1, 2], Order.number)\n * assert.deepStrictEqual(max, 3)\n *\n * @since 2.0.0\n */\nconst max = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, O) => self.reduce(_Order_js__WEBPACK_IMPORTED_MODULE_6__.max(O)));\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst unfold = (b, f) => {\n  const out = [];\n  let next = b;\n  let o;\n  while (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isSome(o = f(next))) {\n    const [a, b] = o.value;\n    out.push(a);\n    next = b;\n  }\n  return out;\n};\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nconst getOrder = _Order_js__WEBPACK_IMPORTED_MODULE_6__.array;\n/**\n * Creates an equivalence relation for arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers1 = [1, 2, 3]\n * const numbers2 = [1, 2, 3]\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * assert.deepStrictEqual(eq(numbers1, numbers2), true)\n *\n * @category instances\n * @since 2.0.0\n */\nconst getEquivalence = _Equivalence_js__WEBPACK_IMPORTED_MODULE_10__.array;\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n *\n * @since 2.0.0\n */\nconst forEach = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => fromIterable(self).forEach((a, i) => f(a, i)));\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 2, 3, 3, 3]\n * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nconst dedupeWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const out = [headNonEmpty(input)];\n    const rest = tailNonEmpty(input);\n    for (const r of rest) {\n      if (out.every(a => !isEquivalent(r, a))) {\n        out.push(r);\n      }\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nconst dedupe = self => dedupeWith(self, _Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence());\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nconst dedupeAdjacentWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent) => {\n  const out = [];\n  let lastA = _Option_js__WEBPACK_IMPORTED_MODULE_2__.none();\n  for (const a of self) {\n    if (_Option_js__WEBPACK_IMPORTED_MODULE_2__.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a);\n      lastA = _Option_js__WEBPACK_IMPORTED_MODULE_2__.some(a);\n    }\n  }\n  return out;\n});\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacent(numbers)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nconst dedupeAdjacent = /*#__PURE__*/dedupeAdjacentWith( /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_8__.equivalence());\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * assert.deepStrictEqual(joined, \"a-b-c\")\n *\n * @since 2.0.0\n * @category folding\n */\nconst join = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, sep) => fromIterable(self).join(sep));\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n *\n * @since 2.0.0\n * @category folding\n */\nconst mapAccum = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, s, f) => {\n  let i = 0;\n  let s1 = s;\n  const out = [];\n  for (const a of self) {\n    const r = f(s1, a, i);\n    s1 = r[0];\n    out.push(r[1]);\n    i++;\n  }\n  return [s1, out];\n});\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n *\n * @since 2.0.0\n * @category elements\n */\nconst cartesianWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f) => flatMap(self, a => map(that, b => f(a, b))));\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesian(array1, array2)\n * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n *\n * @since 2.0.0\n * @category elements\n */\nconst cartesian = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => cartesianWith(self, that, (a, b) => [a, b]));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nconst Do = /*#__PURE__*/of({});\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bind(map, flatMap);\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bindTo(map);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.let_(map);\n\n//# sourceMappingURL=Array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Context.js":
/*!*************************************************!*\
  !*** ./node_modules/effect/dist/esm/Context.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenericTag: () => (/* binding */ GenericTag),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getOption: () => (/* binding */ getOption),\n/* harmony export */   isContext: () => (/* binding */ isContext),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet),\n/* harmony export */   unsafeMake: () => (/* binding */ unsafeMake)\n/* harmony export */ });\n/* harmony import */ var _internal_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/context.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/context.js\");\n\nconst TagTypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.TagTypeId;\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @param key - A key that will be used to compare tags.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n *\n * @since 2.0.0\n * @category constructors\n */\nconst GenericTag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.makeGenericTag;\nconst TypeId = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.TypeId;\n/**\n * @since 2.0.0\n * @category constructors\n */\nconst unsafeMake = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.makeContext;\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @param input - The value to be checked if it is a `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category guards\n */\nconst isContext = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isContext;\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @param input - The value to be checked if it is a `Tag`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n *\n * @since 2.0.0\n * @category guards\n */\nconst isTag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.isTag;\n/**\n * Returns an empty `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category constructors\n */\nconst empty = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.empty;\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n *\n * @since 2.0.0\n * @category constructors\n */\nconst make = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.make;\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nconst add = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.add;\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n * @category getters\n */\nconst get = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.get;\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n *\n * @since 2.0.0\n * @category unsafe\n */\nconst unsafeGet = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.unsafeGet;\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n * @category getters\n */\nconst getOption = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.getOption;\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @param self - The first `Context` to merge.\n * @param that - The second `Context` to merge.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nconst merge = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.merge;\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @param self - The `Context` to prune services from.\n * @param tags - The list of `Tag`s to be included in the new `Context`.\n *\n * @example\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n */\nconst pick = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.pick;\n/**\n * @since 2.0.0\n */\nconst omit = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.omit;\n/**\n * @since 2.0.0\n * @category constructors\n */\nconst Tag = _internal_context_js__WEBPACK_IMPORTED_MODULE_0__.Tag;\n//# sourceMappingURL=Context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Effectable.js":
/*!****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Effectable.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelTypeId: () => (/* binding */ ChannelTypeId),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   CommitPrototype: () => (/* binding */ CommitPrototype),\n/* harmony export */   EffectPrototype: () => (/* binding */ EffectPrototype),\n/* harmony export */   EffectTypeId: () => (/* binding */ EffectTypeId),\n/* harmony export */   SinkTypeId: () => (/* binding */ SinkTypeId),\n/* harmony export */   StreamTypeId: () => (/* binding */ StreamTypeId),\n/* harmony export */   StructuralClass: () => (/* binding */ StructuralClass),\n/* harmony export */   StructuralCommitPrototype: () => (/* binding */ StructuralCommitPrototype)\n/* harmony export */ });\n/* harmony import */ var _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst EffectTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst StreamTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StreamTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst SinkTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.SinkTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nconst ChannelTypeId = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.ChannelTypeId;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nconst EffectPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nconst CommitPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.CommitPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nconst StructuralCommitPrototype = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StructuralCommitPrototype;\nconst Base = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.Base;\nconst StructuralBase = _internal_effectable_js__WEBPACK_IMPORTED_MODULE_0__.StructuralBase;\n/**\n * @since 2.0.0\n * @category constructors\n */\nclass Class extends Base {}\n/**\n * @since 2.0.0\n * @category constructors\n */\nclass StructuralClass extends StructuralBase {}\n//# sourceMappingURL=Effectable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VmZmVjdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFCQUFxQixpRUFBcUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsaUVBQXFCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUJBQW1CLCtEQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNPLHNCQUFzQixrRUFBc0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3QkFBd0Isb0VBQXdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0JBQXdCLG9FQUF3QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNPLGtDQUFrQyw4RUFBa0M7QUFDM0UsYUFBYSx5REFBYTtBQUMxQix1QkFBdUIsbUVBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vRWZmZWN0YWJsZS5qcz8wZTEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGludGVybmFsIGZyb20gXCIuL2ludGVybmFsL2VmZmVjdGFibGUuanNcIjtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFR5cGVJZCA9IGludGVybmFsLkVmZmVjdFR5cGVJZDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFN0cmVhbVR5cGVJZCA9IGludGVybmFsLlN0cmVhbVR5cGVJZDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IFNpbmtUeXBlSWQgPSBpbnRlcm5hbC5TaW5rVHlwZUlkO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSB0eXBlIGlkc1xuICovXG5leHBvcnQgY29uc3QgQ2hhbm5lbFR5cGVJZCA9IGludGVybmFsLkNoYW5uZWxUeXBlSWQ7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHByb3RvdHlwZXNcbiAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFByb3RvdHlwZSA9IGludGVybmFsLkVmZmVjdFByb3RvdHlwZTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgcHJvdG90eXBlc1xuICovXG5leHBvcnQgY29uc3QgQ29tbWl0UHJvdG90eXBlID0gaW50ZXJuYWwuQ29tbWl0UHJvdG90eXBlO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBwcm90b3R5cGVzXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsQ29tbWl0UHJvdG90eXBlID0gaW50ZXJuYWwuU3RydWN0dXJhbENvbW1pdFByb3RvdHlwZTtcbmNvbnN0IEJhc2UgPSBpbnRlcm5hbC5CYXNlO1xuY29uc3QgU3RydWN0dXJhbEJhc2UgPSBpbnRlcm5hbC5TdHJ1Y3R1cmFsQmFzZTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGFzcyBleHRlbmRzIEJhc2Uge31cbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmFsQ2xhc3MgZXh0ZW5kcyBTdHJ1Y3R1cmFsQmFzZSB7fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWZmZWN0YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Effectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Either.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Either.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   ap: () => (/* binding */ ap),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   filterOrLeft: () => (/* binding */ filterOrLeft),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   getOrNull: () => (/* binding */ getOrNull),\n/* harmony export */   getOrThrow: () => (/* binding */ getOrThrow),\n/* harmony export */   getOrThrowWith: () => (/* binding */ getOrThrowWith),\n/* harmony export */   getOrUndefined: () => (/* binding */ getOrUndefined),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isEither: () => (/* binding */ isEither),\n/* harmony export */   isLeft: () => (/* binding */ isLeft),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapLeft: () => (/* binding */ mapLeft),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   \"try\": () => (/* binding */ try_),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_either_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/either.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/either.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nconst TypeId = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.TypeId;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst right = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.right;\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst left = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.left;\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromNullable = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNullable) => self == null ? left(onNullable(self)) : right(self));\n/**\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromOption = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.fromOption;\nconst try_ = evaluate => {\n  if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isFunction)(evaluate)) {\n    try {\n      return right(evaluate());\n    } catch (e) {\n      return left(e);\n    }\n  } else {\n    try {\n      return right(evaluate.try());\n    } catch (e) {\n      return left(evaluate.catch(e));\n    }\n  }\n};\n\n/**\n * Tests if a value is a `Either`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEither = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isEither;\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isLeft;\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.isRight;\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * Alias of {@link toOption}.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n *\n * @category getters\n * @since 2.0.0\n */\nconst getRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n *\n * @category getters\n * @since 2.0.0\n */\nconst getLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_0__.getLeft;\n/**\n * @category equivalence\n * @since 2.0.0\n */\nconst getEquivalence = ({\n  left,\n  right\n}) => _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.make((x, y) => isLeft(x) ? isLeft(y) && left(x.left, y.left) : isRight(y) && right(x.right, y.right));\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst mapBoth = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, {\n  onLeft,\n  onRight\n}) => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right)));\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @param self - The input `Either` value to map.\n * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isLeft(self) ? left(f(self.left)) : right(self.right));\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @param self - An `Either` to map\n * @param f - The function to map over the value of the `Either`\n *\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isRight(self) ? right(f(self.right)) : left(self.left));\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, {\n  onLeft,\n  onRight\n}) => isLeft(self) ? onLeft(self.left) : onRight(self.right));\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     0,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @category lifting\n * @since 3.4.0\n */\nconst liftPredicate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (a, predicate, orLeftWith) => predicate(a) ? right(a) : left(orLeftWith(a)));\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nconst filterOrLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, predicate, orLeftWith) => flatMap(self, r => predicate(r) ? right(r) : left(orLeftWith(r))));\n/**\n * @category getters\n * @since 2.0.0\n */\nconst merge = /*#__PURE__*/match({\n  onLeft: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity,\n  onRight: _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity\n});\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onLeft) => isLeft(self) ? onLeft(self.left) : self.right);\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrNull = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constNull);\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrUndefined = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constUndefined);\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Either` to extract the value from.\n * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrThrowWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onLeft) => {\n  if (isRight(self)) {\n    return self.right;\n  }\n  throw onLeft(self.left);\n});\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Either` to extract the value from.\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error(\"getOrThrow called on a Left\"));\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @param self - The input `Either` value to check and potentially return.\n * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => isLeft(self) ? that(self.left) : right(self.right));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isLeft(self) ? left(self.left) : f(self.right));\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst andThen = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => flatMap(self, a => {\n  const b = (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isFunction)(f) ? f(a) : f;\n  return isEither(b) ? b : right(b);\n}));\n/**\n * @category zipping\n * @since 2.0.0\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, that, f) => flatMap(self, r => map(that, r2 => f(r, r2))));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst ap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => zipWith(self, that, (f, a) => f(a)));\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @param fields - the struct of `Either`s to be sequenced.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nconst all = input => {\n  if (Symbol.iterator in input) {\n    const out = [];\n    for (const e of input) {\n      if (isLeft(e)) {\n        return e;\n      }\n      out.push(e.right);\n    }\n    return right(out);\n  }\n  const out = {};\n  for (const key of Object.keys(input)) {\n    const e = input[key];\n    if (isLeft(e)) {\n      return e;\n    }\n    out[key] = e.right;\n  }\n  return right(out);\n};\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nconst flip = self => isLeft(self) ? right(self.left) : left(self.right);\nconst adapter = /*#__PURE__*/_Utils_js__WEBPACK_IMPORTED_MODULE_4__.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */\nconst gen = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0]);\n  const iterator = f(adapter);\n  let state = iterator.next();\n  if (state.done) {\n    return right(state.value);\n  } else {\n    let current = state.value;\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_4__.isGenKind(current)) {\n      current = current.value;\n    } else {\n      current = _Utils_js__WEBPACK_IMPORTED_MODULE_4__.yieldWrapGet(current);\n    }\n    if (isLeft(current)) {\n      return current;\n    }\n    while (!state.done) {\n      state = iterator.next(current.right);\n      if (!state.done) {\n        current = state.value;\n        if (_Utils_js__WEBPACK_IMPORTED_MODULE_4__.isGenKind(current)) {\n          current = current.value;\n        } else {\n          current = _Utils_js__WEBPACK_IMPORTED_MODULE_4__.yieldWrapGet(current);\n        }\n        if (isLeft(current)) {\n          return current;\n        }\n      }\n    }\n    return right(state.value);\n  }\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst Do = /*#__PURE__*/right({});\n/**\n * The \"do simulation\" in allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.bind(map, flatMap);\n/**\n * The \"do simulation\" in allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.bindTo(map);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_5__.let_(map);\n\n//# sourceMappingURL=Either.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Either.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Equal.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Equal.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   equivalence: () => (/* binding */ equivalence),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst symbol = /*#__PURE__*/Symbol.for(\"effect/Equal\");\nfunction equals() {\n  if (arguments.length === 1) {\n    return self => compareBoth(self, arguments[0]);\n  }\n  return compareBoth(arguments[0], arguments[1]);\n}\nfunction compareBoth(self, that) {\n  if (self === that) {\n    return true;\n  }\n  const selfType = typeof self;\n  if (selfType !== typeof that) {\n    return false;\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (_Hash_js__WEBPACK_IMPORTED_MODULE_0__.hash(self) === _Hash_js__WEBPACK_IMPORTED_MODULE_0__.hash(that) && self[symbol](that)) {\n          return true;\n        } else {\n          return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled && _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString();\n      }\n    }\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]));\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self);\n        const keysThat = Object.keys(that);\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n            }\n          }\n          return true;\n        }\n      }\n      return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n    }\n  }\n  return _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled && _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester ? _Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.tester(self, that) : false;\n}\n/**\n * @since 2.0.0\n * @category guards\n */\nconst isEqual = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty)(u, symbol);\n/**\n * @since 2.0.0\n * @category instances\n */\nconst equivalence = () => equals;\n//# sourceMappingURL=Equal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VxdWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBa0M7QUFDVztBQUNNO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQ0FBUyxXQUFXLDBDQUFTO0FBQ3pDO0FBQ0EsVUFBVTtBQUNWLGlCQUFpQiw0REFBcUIsWUFBWSw0REFBcUIsVUFBVSw0REFBcUI7QUFDdEc7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUSw0REFBcUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNERBQXFCLFVBQVUsNERBQXFCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDREQUFxQixVQUFVLDREQUFxQjtBQUNqRTtBQUNBO0FBQ0EsU0FBUyw0REFBcUIsWUFBWSw0REFBcUIsVUFBVSw0REFBcUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFCQUFxQiwwREFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vRXF1YWwuanM/ZTI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuL0hhc2guanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4vUHJlZGljYXRlLmpzXCI7XG5pbXBvcnQgeyBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUgfSBmcm9tIFwiLi9VdGlscy5qc1wiO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBzeW1ib2xzXG4gKi9cbmV4cG9ydCBjb25zdCBzeW1ib2wgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9FcXVhbFwiKTtcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHNlbGYgPT4gY29tcGFyZUJvdGgoc2VsZiwgYXJndW1lbnRzWzBdKTtcbiAgfVxuICByZXR1cm4gY29tcGFyZUJvdGgoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xufVxuZnVuY3Rpb24gY29tcGFyZUJvdGgoc2VsZiwgdGhhdCkge1xuICBpZiAoc2VsZiA9PT0gdGhhdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHNlbGZUeXBlID0gdHlwZW9mIHNlbGY7XG4gIGlmIChzZWxmVHlwZSAhPT0gdHlwZW9mIHRoYXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHNlbGZUeXBlID09PSBcIm9iamVjdFwiIHx8IHNlbGZUeXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBpZiAoc2VsZiAhPT0gbnVsbCAmJiB0aGF0ICE9PSBudWxsKSB7XG4gICAgICBpZiAoaXNFcXVhbChzZWxmKSAmJiBpc0VxdWFsKHRoYXQpKSB7XG4gICAgICAgIGlmIChIYXNoLmhhc2goc2VsZikgPT09IEhhc2guaGFzaCh0aGF0KSAmJiBzZWxmW3N5bWJvbF0odGhhdCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RydWN0dXJhbFJlZ2lvblN0YXRlLmVuYWJsZWQgJiYgc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlciA/IHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIoc2VsZiwgdGhhdCkgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzZWxmIGluc3RhbmNlb2YgRGF0ZSAmJiB0aGF0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gc2VsZi50b0lTT1N0cmluZygpID09PSB0aGF0LnRvSVNPU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZikgJiYgQXJyYXkuaXNBcnJheSh0aGF0KSkge1xuICAgICAgICByZXR1cm4gc2VsZi5sZW5ndGggPT09IHRoYXQubGVuZ3RoICYmIHNlbGYuZXZlcnkoKHYsIGkpID0+IGNvbXBhcmVCb3RoKHYsIHRoYXRbaV0pKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2VsZikgPT09IE9iamVjdC5wcm90b3R5cGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNlbGYpID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgIGNvbnN0IGtleXNTZWxmID0gT2JqZWN0LmtleXMoc2VsZik7XG4gICAgICAgIGNvbnN0IGtleXNUaGF0ID0gT2JqZWN0LmtleXModGhhdCk7XG4gICAgICAgIGlmIChrZXlzU2VsZi5sZW5ndGggPT09IGtleXNUaGF0Lmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXNTZWxmKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gdGhhdCAmJiBjb21wYXJlQm90aChzZWxmW2tleV0sIHRoYXRba2V5XSkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyID8gc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlcihzZWxmLCB0aGF0KSA6IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cnVjdHVyYWxSZWdpb25TdGF0ZS50ZXN0ZXIgPyBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyKHNlbGYsIHRoYXQpIDogZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCAmJiBzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUudGVzdGVyID8gc3RydWN0dXJhbFJlZ2lvblN0YXRlLnRlc3RlcihzZWxmLCB0aGF0KSA6IGZhbHNlO1xufVxuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBndWFyZHNcbiAqL1xuZXhwb3J0IGNvbnN0IGlzRXF1YWwgPSB1ID0+IGhhc1Byb3BlcnR5KHUsIHN5bWJvbCk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICovXG5leHBvcnQgY29uc3QgZXF1aXZhbGVuY2UgPSAoKSA9PiBlcXVhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcXVhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Equal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Equivalence.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Equivalence.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Date: () => (/* binding */ Date),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   combineAll: () => (/* binding */ combineAll),\n/* harmony export */   combineMany: () => (/* binding */ combineMany),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   strict: () => (/* binding */ strict),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   tuple: () => (/* binding */ tuple)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst make = isEquivalent => (self, that) => self === that || isEquivalent(self, that);\nconst isStrictEquivalent = (x, y) => x === y;\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nconst strict = () => isStrictEquivalent;\n/**\n * @category instances\n * @since 2.0.0\n */\nconst string = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst number = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst boolean = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst bigint = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nconst symbol = /*#__PURE__*/strict();\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combine = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make((x, y) => self(x, y) && that(x, y)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineMany = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection) => make((x, y) => {\n  if (!self(x, y)) {\n    return false;\n  }\n  for (const equivalence of collection) {\n    if (!equivalence(x, y)) {\n      return false;\n    }\n  }\n  return true;\n}));\nconst isAlwaysEquivalent = (_x, _y) => true;\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineAll = collection => combineMany(isAlwaysEquivalent, collection);\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst mapInput = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make((x, y) => self(f(x), f(y))));\n/**\n * @category instances\n * @since 2.0.0\n */\nconst Date = /*#__PURE__*/mapInput(number, date => date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst all = collection => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length);\n    let collectionLength = 0;\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break;\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false;\n      }\n      collectionLength++;\n    }\n    return true;\n  });\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = (self, collection) => {\n  const equivalence = all(collection);\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)));\n};\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst tuple = (...elements) => all(elements);\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst array = item => make((self, that) => {\n  if (self.length !== that.length) {\n    return false;\n  }\n  for (let i = 0; i < self.length; i++) {\n    const isEq = item(self[i], that[i]);\n    if (!isEq) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst struct = fields => {\n  const keys = Object.keys(fields);\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n//# sourceMappingURL=Equivalence.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0VxdWl2YWxlbmNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsa0RBQUk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLGtEQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixrREFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9FcXVpdmFsZW5jZS5qcz9lNzM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIGBFcXVpdmFsZW5jZWAgdHlwZSBjbGFzcywgd2hpY2ggZGVmaW5lcyBhIGJpbmFyeSByZWxhdGlvblxuICogdGhhdCBpcyByZWZsZXhpdmUsIHN5bW1ldHJpYywgYW5kIHRyYW5zaXRpdmUuIEluIG90aGVyIHdvcmRzLCBpdCBkZWZpbmVzIGEgbm90aW9uIG9mIGVxdWl2YWxlbmNlIGJldHdlZW4gdmFsdWVzIG9mIGEgY2VydGFpbiB0eXBlLlxuICogVGhlc2UgcHJvcGVydGllcyBhcmUgYWxzbyBrbm93biBpbiBtYXRoZW1hdGljcyBhcyBhbiBcImVxdWl2YWxlbmNlIHJlbGF0aW9uXCIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCB7IGR1YWwgfSBmcm9tIFwiLi9GdW5jdGlvbi5qc1wiO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG1ha2UgPSBpc0VxdWl2YWxlbnQgPT4gKHNlbGYsIHRoYXQpID0+IHNlbGYgPT09IHRoYXQgfHwgaXNFcXVpdmFsZW50KHNlbGYsIHRoYXQpO1xuY29uc3QgaXNTdHJpY3RFcXVpdmFsZW50ID0gKHgsIHkpID0+IHggPT09IHk7XG4vKipcbiAqIFJldHVybiBhbiBgRXF1aXZhbGVuY2VgIHRoYXQgdXNlcyBzdHJpY3QgZXF1YWxpdHkgKD09PSkgdG8gY29tcGFyZSB2YWx1ZXMuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpY3QgPSAoKSA9PiBpc1N0cmljdEVxdWl2YWxlbnQ7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nID0gLyojX19QVVJFX18qL3N0cmljdCgpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IC8qI19fUFVSRV9fKi9zdHJpY3QoKTtcbi8qKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBib29sZWFuID0gLyojX19QVVJFX18qL3N0cmljdCgpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJpZ2ludCA9IC8qI19fUFVSRV9fKi9zdHJpY3QoKTtcbi8qKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzeW1ib2wgPSAvKiNfX1BVUkVfXyovc3RyaWN0KCk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgY29tYmluZSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCB0aGF0KSA9PiBtYWtlKCh4LCB5KSA9PiBzZWxmKHgsIHkpICYmIHRoYXQoeCwgeSkpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb21iaW5lTWFueSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBjb2xsZWN0aW9uKSA9PiBtYWtlKCh4LCB5KSA9PiB7XG4gIGlmICghc2VsZih4LCB5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IGVxdWl2YWxlbmNlIG9mIGNvbGxlY3Rpb24pIHtcbiAgICBpZiAoIWVxdWl2YWxlbmNlKHgsIHkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufSkpO1xuY29uc3QgaXNBbHdheXNFcXVpdmFsZW50ID0gKF94LCBfeSkgPT4gdHJ1ZTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb21iaW5lQWxsID0gY29sbGVjdGlvbiA9PiBjb21iaW5lTWFueShpc0Fsd2F5c0VxdWl2YWxlbnQsIGNvbGxlY3Rpb24pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbWFwcGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBJbnB1dCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiBtYWtlKCh4LCB5KSA9PiBzZWxmKGYoeCksIGYoeSkpKSk7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgRGF0ZSA9IC8qI19fUFVSRV9fKi9tYXBJbnB1dChudW1iZXIsIGRhdGUgPT4gZGF0ZS5nZXRUaW1lKCkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29tYmluaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2R1Y3QgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gbWFrZSgoW3hhLCB4Yl0sIFt5YSwgeWJdKSA9PiBzZWxmKHhhLCB5YSkgJiYgdGhhdCh4YiwgeWIpKSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYWxsID0gY29sbGVjdGlvbiA9PiB7XG4gIHJldHVybiBtYWtlKCh4LCB5KSA9PiB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oeC5sZW5ndGgsIHkubGVuZ3RoKTtcbiAgICBsZXQgY29sbGVjdGlvbkxlbmd0aCA9IDA7XG4gICAgZm9yIChjb25zdCBlcXVpdmFsZW5jZSBvZiBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbkxlbmd0aCA+PSBsZW4pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoIWVxdWl2YWxlbmNlKHhbY29sbGVjdGlvbkxlbmd0aF0sIHlbY29sbGVjdGlvbkxlbmd0aF0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbGxlY3Rpb25MZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9kdWN0TWFueSA9IChzZWxmLCBjb2xsZWN0aW9uKSA9PiB7XG4gIGNvbnN0IGVxdWl2YWxlbmNlID0gYWxsKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gbWFrZSgoeCwgeSkgPT4gIXNlbGYoeFswXSwgeVswXSkgPyBmYWxzZSA6IGVxdWl2YWxlbmNlKHguc2xpY2UoMSksIHkuc2xpY2UoMSkpKTtcbn07XG4vKipcbiAqIFNpbWlsYXIgdG8gYFByb21pc2UuYWxsYCBidXQgb3BlcmF0ZXMgb24gYEVxdWl2YWxlbmNlYHMuXG4gKlxuICogYGBgXG4gKiBbRXF1aXZhbGVuY2U8QT4sIEVxdWl2YWxlbmNlPEI+LCAuLi5dIC0+IEVxdWl2YWxlbmNlPFtBLCBCLCAuLi5dPlxuICogYGBgXG4gKlxuICogR2l2ZW4gYSB0dXBsZSBvZiBgRXF1aXZhbGVuY2VgcyByZXR1cm5zIGEgbmV3IGBFcXVpdmFsZW5jZWAgdGhhdCBjb21wYXJlcyB2YWx1ZXMgb2YgYSB0dXBsZVxuICogYnkgYXBwbHlpbmcgZWFjaCBgRXF1aXZhbGVuY2VgIHRvIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQgb2YgdGhlIHR1cGxlLlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0dXBsZSA9ICguLi5lbGVtZW50cykgPT4gYWxsKGVsZW1lbnRzKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgRXF1aXZhbGVuY2VgIGZvciBhbiBhcnJheSBvZiB2YWx1ZXMgYmFzZWQgb24gYSBnaXZlbiBgRXF1aXZhbGVuY2VgIGZvciB0aGUgZWxlbWVudHMgb2YgdGhlIGFycmF5LlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBhcnJheSA9IGl0ZW0gPT4gbWFrZSgoc2VsZiwgdGhhdCkgPT4ge1xuICBpZiAoc2VsZi5sZW5ndGggIT09IHRoYXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlzRXEgPSBpdGVtKHNlbGZbaV0sIHRoYXRbaV0pO1xuICAgIGlmICghaXNFcSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0pO1xuLyoqXG4gKiBHaXZlbiBhIHN0cnVjdCBvZiBgRXF1aXZhbGVuY2VgcyByZXR1cm5zIGEgbmV3IGBFcXVpdmFsZW5jZWAgdGhhdCBjb21wYXJlcyB2YWx1ZXMgb2YgYSBzdHJ1Y3RcbiAqIGJ5IGFwcGx5aW5nIGVhY2ggYEVxdWl2YWxlbmNlYCB0byB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBvZiB0aGUgc3RydWN0LlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJ1Y3QgPSBmaWVsZHMgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKTtcbiAgcmV0dXJuIG1ha2UoKHNlbGYsIHRoYXQpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICBpZiAoIWZpZWxkc1trZXldKHNlbGZba2V5XSwgdGhhdFtrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcXVpdmFsZW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Equivalence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Function.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Function.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SK: () => (/* binding */ SK),\n/* harmony export */   absurd: () => (/* binding */ absurd),\n/* harmony export */   apply: () => (/* binding */ apply),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   constFalse: () => (/* binding */ constFalse),\n/* harmony export */   constNull: () => (/* binding */ constNull),\n/* harmony export */   constTrue: () => (/* binding */ constTrue),\n/* harmony export */   constUndefined: () => (/* binding */ constUndefined),\n/* harmony export */   constVoid: () => (/* binding */ constVoid),\n/* harmony export */   constant: () => (/* binding */ constant),\n/* harmony export */   dual: () => (/* binding */ dual),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   flow: () => (/* binding */ flow),\n/* harmony export */   hole: () => (/* binding */ hole),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   satisfies: () => (/* binding */ satisfies),\n/* harmony export */   tupled: () => (/* binding */ tupled),\n/* harmony export */   unsafeCoerce: () => (/* binding */ unsafeCoerce),\n/* harmony export */   untupled: () => (/* binding */ untupled)\n/* harmony export */ });\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isFunction = input => typeof input === \"function\";\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * @param arity - Either the arity of the uncurried function or a predicate\n *                which determines if the function is being used in a data-first\n *                or data-last style.\n * @param body - The definition of the uncurried function.\n *\n * @example\n * import { dual, pipe } from \"effect/Function\"\n *\n * // Exampe using arity to determine data-first or data-last style\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * // Example using a predicate to determine data-first or data-last style\n * const sum2: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * @since 2.0.0\n */\nconst dual = function (arity, body) {\n  if (typeof arity === \"function\") {\n    return function () {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments);\n      }\n      return self => body(self, ...arguments);\n    };\n  }\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`);\n    case 2:\n      return function (a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b);\n        }\n        return function (self) {\n          return body(self, a);\n        };\n      };\n    case 3:\n      return function (a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c);\n        }\n        return function (self) {\n          return body(self, a, b);\n        };\n      };\n    case 4:\n      return function (a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d);\n        }\n        return function (self) {\n          return body(self, a, b, c);\n        };\n      };\n    case 5:\n      return function (a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e);\n        }\n        return function (self) {\n          return body(self, a, b, c, d);\n        };\n      };\n    default:\n      return function () {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments);\n        }\n        const args = arguments;\n        return function (self) {\n          return body(self, ...args);\n        };\n      };\n  }\n};\n/**\n * Apply a function to a given value.\n *\n * @param a - The value that the function will be applied to.\n * @param self - The function to be applied to a value.\n *\n * @example\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n *\n * @since 2.0.0\n */\nconst apply = a => self => self(a);\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @param a - The input argument.\n *\n * @example\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n *\n * @since 2.0.0\n */\nconst identity = a => a;\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n *\n * @since 2.0.0\n */\nconst satisfies = () => b => b;\n/**\n * Casts the result to the specified type.\n *\n * @param a - The value to be casted to the target type.\n *\n * @example\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n *\n * @since 2.0.0\n */\nconst unsafeCoerce = identity;\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @param value - The constant value to be returned.\n *\n * @example\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nconst constant = value => () => value;\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n *\n * @since 2.0.0\n */\nconst constTrue = /*#__PURE__*/constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n *\n * @since 2.0.0\n */\nconst constFalse = /*#__PURE__*/constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nconst constNull = /*#__PURE__*/constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n *\n * @since 2.0.0\n */\nconst constUndefined = /*#__PURE__*/constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n *\n * @since 2.0.0\n */\nconst constVoid = constUndefined;\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @param f - A curried function that takes multiple arguments.\n *\n * @example\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n *\n * @since 2.0.0\n */\nconst flip = f => (...b) => (...a) => f(...a)(...b);\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @param ab - A function that maps from `A` to `B`.\n * @param bc - A function that maps from `B` to `C`.\n *\n * @example\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n *\n * @since 2.0.0\n */\nconst compose = /*#__PURE__*/dual(2, (ab, bc) => a => bc(ab(a)));\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nconst absurd = _ => {\n  throw new Error(\"Called `absurd` function which should be uncallable\");\n};\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n *\n * @since 2.0.0\n */\nconst tupled = f => a => f(...a);\n/**\n * Inverse function of `tupled`\n *\n * @example\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n *\n * @since 2.0.0\n */\nconst untupled = f => (...a) => f(a);\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n  switch (arguments.length) {\n    case 1:\n      return a;\n    case 2:\n      return ab(a);\n    case 3:\n      return bc(ab(a));\n    case 4:\n      return cd(bc(ab(a)));\n    case 5:\n      return de(cd(bc(ab(a))));\n    case 6:\n      return ef(de(cd(bc(ab(a)))));\n    case 7:\n      return fg(ef(de(cd(bc(ab(a))))));\n    case 8:\n      return gh(fg(ef(de(cd(bc(ab(a)))))));\n    case 9:\n      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n    default:\n      {\n        let ret = arguments[0];\n        for (let i = 1; i < arguments.length; i++) {\n          ret = arguments[i](ret);\n        }\n        return ret;\n      }\n  }\n}\nfunction flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n  switch (arguments.length) {\n    case 1:\n      return ab;\n    case 2:\n      return function () {\n        return bc(ab.apply(this, arguments));\n      };\n    case 3:\n      return function () {\n        return cd(bc(ab.apply(this, arguments)));\n      };\n    case 4:\n      return function () {\n        return de(cd(bc(ab.apply(this, arguments))));\n      };\n    case 5:\n      return function () {\n        return ef(de(cd(bc(ab.apply(this, arguments)))));\n      };\n    case 6:\n      return function () {\n        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n      };\n    case 7:\n      return function () {\n        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n      };\n    case 8:\n      return function () {\n        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n      };\n    case 9:\n      return function () {\n        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n      };\n  }\n  return;\n}\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nconst hole = /*#__PURE__*/unsafeCoerce(absurd);\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @param _ - The first argument to be discarded.\n * @param b - The second argument to be returned.\n *\n * @example\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n *\n * @since 2.0.0\n */\nconst SK = (_, b) => b;\n//# sourceMappingURL=Function.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/GlobalValue.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/GlobalValue.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalValue: () => (/* binding */ globalValue)\n/* harmony export */ });\n/* harmony import */ var _internal_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/version.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/version.js\");\n/**\n * @since 2.0.0\n */\n\nconst globalStoreId = /*#__PURE__*/Symbol.for(`effect/GlobalValue/globalStoreId/${/*#__PURE__*/_internal_version_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentVersion()}`);\nif (!(globalStoreId in globalThis)) {\n  ;\n  globalThis[globalStoreId] = /*#__PURE__*/new Map();\n}\nconst globalStore = globalThis[globalStoreId];\n/**\n * @since 2.0.0\n */\nconst globalValue = (id, compute) => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute());\n  }\n  return globalStore.get(id);\n};\n//# sourceMappingURL=GlobalValue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0dsb2JhbFZhbHVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ2lEO0FBQ2pELGtGQUFrRixhQUFhLG1FQUF5QixHQUFHO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9HbG9iYWxWYWx1ZS5qcz9hZGFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCAqIGFzIHZlcnNpb24gZnJvbSBcIi4vaW50ZXJuYWwvdmVyc2lvbi5qc1wiO1xuY29uc3QgZ2xvYmFsU3RvcmVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKGBlZmZlY3QvR2xvYmFsVmFsdWUvZ2xvYmFsU3RvcmVJZC8key8qI19fUFVSRV9fKi92ZXJzaW9uLmdldEN1cnJlbnRWZXJzaW9uKCl9YCk7XG5pZiAoIShnbG9iYWxTdG9yZUlkIGluIGdsb2JhbFRoaXMpKSB7XG4gIDtcbiAgZ2xvYmFsVGhpc1tnbG9iYWxTdG9yZUlkXSA9IC8qI19fUFVSRV9fKi9uZXcgTWFwKCk7XG59XG5jb25zdCBnbG9iYWxTdG9yZSA9IGdsb2JhbFRoaXNbZ2xvYmFsU3RvcmVJZF07XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZ2xvYmFsVmFsdWUgPSAoaWQsIGNvbXB1dGUpID0+IHtcbiAgaWYgKCFnbG9iYWxTdG9yZS5oYXMoaWQpKSB7XG4gICAgZ2xvYmFsU3RvcmUuc2V0KGlkLCBjb21wdXRlKCkpO1xuICB9XG4gIHJldHVybiBnbG9iYWxTdG9yZS5nZXQoaWQpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsb2JhbFZhbHVlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Hash.js":
/*!**********************************************!*\
  !*** ./node_modules/effect/dist/esm/Hash.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   cached: () => (/* binding */ cached),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isHash: () => (/* binding */ isHash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   optimize: () => (/* binding */ optimize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   structure: () => (/* binding */ structure),\n/* harmony export */   structureKeys: () => (/* binding */ structureKeys),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n/** @internal */\nconst randomHashCache = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_0__.globalValue)( /*#__PURE__*/Symbol.for(\"effect/Hash/randomHashCache\"), () => new WeakMap());\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst symbol = /*#__PURE__*/Symbol.for(\"effect/Hash\");\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst hash = self => {\n  if (_Utils_js__WEBPACK_IMPORTED_MODULE_1__.structuralRegionState.enabled === true) {\n    return 0;\n  }\n  switch (typeof self) {\n    case \"number\":\n      return number(self);\n    case \"bigint\":\n      return string(self.toString(10));\n    case \"boolean\":\n      return string(String(self));\n    case \"symbol\":\n      return string(String(self));\n    case \"string\":\n      return string(self);\n    case \"undefined\":\n      return string(\"undefined\");\n    case \"function\":\n    case \"object\":\n      {\n        if (self === null) {\n          return string(\"null\");\n        } else if (self instanceof Date) {\n          return hash(self.toISOString());\n        } else if (isHash(self)) {\n          return self[symbol]();\n        } else {\n          return random(self);\n        }\n      }\n    default:\n      throw new Error(`BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`);\n  }\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst random = self => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)));\n  }\n  return randomHashCache.get(self);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst combine = b => self => self * 53 ^ b;\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst optimize = n => n & 0xbfffffff | n >>> 1 & 0x40000000;\n/**\n * @since 2.0.0\n * @category guards\n */\nconst isHash = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty)(u, symbol);\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst number = n => {\n  if (n !== n || n === Infinity) {\n    return 0;\n  }\n  let h = n | 0;\n  if (h !== n) {\n    h ^= n * 0xffffffff;\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff;\n  }\n  return optimize(n);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst string = str => {\n  let h = 5381,\n    i = str.length;\n  while (i) {\n    h = h * 33 ^ str.charCodeAt(--i);\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst structureKeys = (o, keys) => {\n  let h = 12289;\n  for (let i = 0; i < keys.length; i++) {\n    h ^= (0,_Function_js__WEBPACK_IMPORTED_MODULE_3__.pipe)(string(keys[i]), combine(hash(o[keys[i]])));\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst structure = o => structureKeys(o, Object.keys(o));\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst array = arr => {\n  let h = 6151;\n  for (let i = 0; i < arr.length; i++) {\n    h = (0,_Function_js__WEBPACK_IMPORTED_MODULE_3__.pipe)(h, combine(hash(arr[i])));\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nconst cached = function () {\n  if (arguments.length === 1) {\n    const self = arguments[0];\n    return function (hash) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash;\n        },\n        enumerable: false\n      });\n      return hash;\n    };\n  }\n  const self = arguments[0];\n  const hash = arguments[1];\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash;\n    },\n    enumerable: false\n  });\n  return hash;\n};\n//# sourceMappingURL=Hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0hhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNxQztBQUNVO0FBQ0Y7QUFDTTtBQUNuRDtBQUNBLHFDQUFxQyw0REFBVztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLE1BQU0sNERBQXFCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0JBQW9CLDBEQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DLFNBQVMsa0RBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQyxRQUFRLGtEQUFJO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9IYXNoLmpzP2ZhMTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gXCIuL0Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBnbG9iYWxWYWx1ZSB9IGZyb20gXCIuL0dsb2JhbFZhbHVlLmpzXCI7XG5pbXBvcnQgeyBoYXNQcm9wZXJ0eSB9IGZyb20gXCIuL1ByZWRpY2F0ZS5qc1wiO1xuaW1wb3J0IHsgc3RydWN0dXJhbFJlZ2lvblN0YXRlIH0gZnJvbSBcIi4vVXRpbHMuanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IHJhbmRvbUhhc2hDYWNoZSA9IC8qI19fUFVSRV9fKi9nbG9iYWxWYWx1ZSggLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJlZmZlY3QvSGFzaC9yYW5kb21IYXNoQ2FjaGVcIiksICgpID0+IG5ldyBXZWFrTWFwKCkpO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBzeW1ib2xzXG4gKi9cbmV4cG9ydCBjb25zdCBzeW1ib2wgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9IYXNoXCIpO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBoYXNoaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNoID0gc2VsZiA9PiB7XG4gIGlmIChzdHJ1Y3R1cmFsUmVnaW9uU3RhdGUuZW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHNlbGYpIHtcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICByZXR1cm4gbnVtYmVyKHNlbGYpO1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIHJldHVybiBzdHJpbmcoc2VsZi50b1N0cmluZygxMCkpO1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gc3RyaW5nKFN0cmluZyhzZWxmKSk7XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgcmV0dXJuIHN0cmluZyhTdHJpbmcoc2VsZikpO1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIHJldHVybiBzdHJpbmcoc2VsZik7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIHN0cmluZyhcInVuZGVmaW5lZFwiKTtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICB7XG4gICAgICAgIGlmIChzZWxmID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZyhcIm51bGxcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICByZXR1cm4gaGFzaChzZWxmLnRvSVNPU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSGFzaChzZWxmKSkge1xuICAgICAgICAgIHJldHVybiBzZWxmW3N5bWJvbF0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmFuZG9tKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiB1bmhhbmRsZWQgdHlwZW9mICR7dHlwZW9mIHNlbGZ9IC0gcGxlYXNlIHJlcG9ydCBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vRWZmZWN0LVRTL2VmZmVjdC9pc3N1ZXNgKTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3QgcmFuZG9tID0gc2VsZiA9PiB7XG4gIGlmICghcmFuZG9tSGFzaENhY2hlLmhhcyhzZWxmKSkge1xuICAgIHJhbmRvbUhhc2hDYWNoZS5zZXQoc2VsZiwgbnVtYmVyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkpO1xuICB9XG4gIHJldHVybiByYW5kb21IYXNoQ2FjaGUuZ2V0KHNlbGYpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3QgY29tYmluZSA9IGIgPT4gc2VsZiA9PiBzZWxmICogNTMgXiBiO1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBoYXNoaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBvcHRpbWl6ZSA9IG4gPT4gbiAmIDB4YmZmZmZmZmYgfCBuID4+PiAxICYgMHg0MDAwMDAwMDtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgZ3VhcmRzXG4gKi9cbmV4cG9ydCBjb25zdCBpc0hhc2ggPSB1ID0+IGhhc1Byb3BlcnR5KHUsIHN5bWJvbCk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IG4gPT4ge1xuICBpZiAobiAhPT0gbiB8fCBuID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGxldCBoID0gbiB8IDA7XG4gIGlmIChoICE9PSBuKSB7XG4gICAgaCBePSBuICogMHhmZmZmZmZmZjtcbiAgfVxuICB3aGlsZSAobiA+IDB4ZmZmZmZmZmYpIHtcbiAgICBoIF49IG4gLz0gMHhmZmZmZmZmZjtcbiAgfVxuICByZXR1cm4gb3B0aW1pemUobik7XG59O1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBoYXNoaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSBzdHIgPT4ge1xuICBsZXQgaCA9IDUzODEsXG4gICAgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlIChpKSB7XG4gICAgaCA9IGggKiAzMyBeIHN0ci5jaGFyQ29kZUF0KC0taSk7XG4gIH1cbiAgcmV0dXJuIG9wdGltaXplKGgpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3Qgc3RydWN0dXJlS2V5cyA9IChvLCBrZXlzKSA9PiB7XG4gIGxldCBoID0gMTIyODk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGggXj0gcGlwZShzdHJpbmcoa2V5c1tpXSksIGNvbWJpbmUoaGFzaChvW2tleXNbaV1dKSkpO1xuICB9XG4gIHJldHVybiBvcHRpbWl6ZShoKTtcbn07XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHN0cnVjdHVyZSA9IG8gPT4gc3RydWN0dXJlS2V5cyhvLCBPYmplY3Qua2V5cyhvKSk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGFycmF5ID0gYXJyID0+IHtcbiAgbGV0IGggPSA2MTUxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGggPSBwaXBlKGgsIGNvbWJpbmUoaGFzaChhcnJbaV0pKSk7XG4gIH1cbiAgcmV0dXJuIG9wdGltaXplKGgpO1xufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgaGFzaGluZ1xuICovXG5leHBvcnQgY29uc3QgY2FjaGVkID0gZnVuY3Rpb24gKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHNlbGYgPSBhcmd1bWVudHNbMF07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgc3ltYm9sLCB7XG4gICAgICAgIHZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9O1xuICB9XG4gIGNvbnN0IHNlbGYgPSBhcmd1bWVudHNbMF07XG4gIGNvbnN0IGhhc2ggPSBhcmd1bWVudHNbMV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBzeW1ib2wsIHtcbiAgICB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBoYXNoO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Inspectable.js":
/*!*****************************************************!*\
  !*** ./node_modules/effect/dist/esm/Inspectable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseProto: () => (/* binding */ BaseProto),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   NodeInspectSymbol: () => (/* binding */ NodeInspectSymbol),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   stringifyCircular: () => (/* binding */ stringifyCircular),\n/* harmony export */   toJSON: () => (/* binding */ toJSON),\n/* harmony export */   toStringUnknown: () => (/* binding */ toStringUnknown)\n/* harmony export */ });\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * @since 2.0.0\n */\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nconst NodeInspectSymbol = /*#__PURE__*/Symbol.for(\"nodejs.util.inspect.custom\");\n/**\n * @since 2.0.0\n */\nconst toJSON = x => {\n  if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.hasProperty)(x, \"toJSON\") && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(x[\"toJSON\"]) && x[\"toJSON\"].length === 0) {\n    return x.toJSON();\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON);\n  }\n  return x;\n};\n/**\n * @since 2.0.0\n */\nconst format = x => JSON.stringify(x, null, 2);\n/**\n * @since 2.0.0\n */\nconst BaseProto = {\n  toJSON() {\n    return toJSON(this);\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return format(this.toJSON());\n  }\n};\n/**\n * @since 2.0.0\n */\nclass Class {\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON());\n  }\n}\n/**\n * @since 2.0.0\n */\nconst toStringUnknown = (u, whitespace = 2) => {\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u);\n  } catch (_) {\n    return String(u);\n  }\n};\n/**\n * @since 2.0.0\n */\nconst stringifyCircular = (obj, whitespace) => {\n  let cache = [];\n  const retVal = JSON.stringify(obj, (_key, value) => typeof value === \"object\" && value !== null ? cache.includes(value) ? undefined // circular reference\n  : cache.push(value) && value : value, whitespace);\n  cache = undefined;\n  return retVal;\n};\n//# sourceMappingURL=Inspectable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0luc3BlY3RhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQLE1BQU0sMERBQVcsaUJBQWlCLHlEQUFVO0FBQzVDO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9JbnNwZWN0YWJsZS5qcz9hYTk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCB7IGhhc1Byb3BlcnR5LCBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vUHJlZGljYXRlLmpzXCI7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IHN5bWJvbHNcbiAqL1xuZXhwb3J0IGNvbnN0IE5vZGVJbnNwZWN0U3ltYm9sID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0b0pTT04gPSB4ID0+IHtcbiAgaWYgKGhhc1Byb3BlcnR5KHgsIFwidG9KU09OXCIpICYmIGlzRnVuY3Rpb24oeFtcInRvSlNPTlwiXSkgJiYgeFtcInRvSlNPTlwiXS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4geC50b0pTT04oKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIHgubWFwKHRvSlNPTik7XG4gIH1cbiAgcmV0dXJuIHg7XG59O1xuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdCA9IHggPT4gSlNPTi5zdHJpbmdpZnkoeCwgbnVsbCwgMik7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgQmFzZVByb3RvID0ge1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRvSlNPTih0aGlzKTtcbiAgfSxcbiAgW05vZGVJbnNwZWN0U3ltYm9sXSgpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfSxcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGFzcyB7XG4gIC8qKlxuICAgKiBAc2luY2UgMi4wLjBcbiAgICovXG4gIFtOb2RlSW5zcGVjdFN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU09OKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBzaW5jZSAyLjAuMFxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfVxufVxuLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHRvU3RyaW5nVW5rbm93biA9ICh1LCB3aGl0ZXNwYWNlID0gMikgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgdSA9PT0gXCJvYmplY3RcIiA/IHN0cmluZ2lmeUNpcmN1bGFyKHUsIHdoaXRlc3BhY2UpIDogU3RyaW5nKHUpO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIFN0cmluZyh1KTtcbiAgfVxufTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmdpZnlDaXJjdWxhciA9IChvYmosIHdoaXRlc3BhY2UpID0+IHtcbiAgbGV0IGNhY2hlID0gW107XG4gIGNvbnN0IHJldFZhbCA9IEpTT04uc3RyaW5naWZ5KG9iaiwgKF9rZXksIHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgPyBjYWNoZS5pbmNsdWRlcyh2YWx1ZSkgPyB1bmRlZmluZWQgLy8gY2lyY3VsYXIgcmVmZXJlbmNlXG4gIDogY2FjaGUucHVzaCh2YWx1ZSkgJiYgdmFsdWUgOiB2YWx1ZSwgd2hpdGVzcGFjZSk7XG4gIGNhY2hlID0gdW5kZWZpbmVkO1xuICByZXR1cm4gcmV0VmFsO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUluc3BlY3RhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Inspectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Iterable.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Iterable.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendAll: () => (/* binding */ appendAll),\n/* harmony export */   cartesian: () => (/* binding */ cartesian),\n/* harmony export */   cartesianWith: () => (/* binding */ cartesianWith),\n/* harmony export */   chunksOf: () => (/* binding */ chunksOf),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   dedupeAdjacent: () => (/* binding */ dedupeAdjacent),\n/* harmony export */   dedupeAdjacentWith: () => (/* binding */ dedupeAdjacentWith),\n/* harmony export */   drop: () => (/* binding */ drop),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterMapWhile: () => (/* binding */ filterMapWhile),\n/* harmony export */   findFirst: () => (/* binding */ findFirst),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromRecord: () => (/* binding */ fromRecord),\n/* harmony export */   getLefts: () => (/* binding */ getLefts),\n/* harmony export */   getRights: () => (/* binding */ getRights),\n/* harmony export */   getSomes: () => (/* binding */ getSomes),\n/* harmony export */   group: () => (/* binding */ group),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   groupWith: () => (/* binding */ groupWith),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   intersperse: () => (/* binding */ intersperse),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   makeBy: () => (/* binding */ makeBy),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   of: () => (/* binding */ of),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependAll: () => (/* binding */ prependAll),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   replicate: () => (/* binding */ replicate),\n/* harmony export */   scan: () => (/* binding */ scan),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   take: () => (/* binding */ take),\n/* harmony export */   takeWhile: () => (/* binding */ takeWhile),\n/* harmony export */   unfold: () => (/* binding */ unfold),\n/* harmony export */   unsafeHead: () => (/* binding */ unsafeHead),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Tuple_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tuple.js */ \"(ssr)/./node_modules/effect/dist/esm/Tuple.js\");\n/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */\n\n\n\n\n\n\n/**\n * Return a `Iterable` with element `i` initialized with `f(i)`.\n *\n * If the `length` is not specified, the `Iterable` will be infinite.\n *\n * **Note**. `length` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(makeBy(n => n * 2, { length: 5 })), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst makeBy = (f, options) => {\n  const max = options?.length !== undefined ? Math.max(1, Math.floor(options.length)) : Infinity;\n  return {\n    [Symbol.iterator]() {\n      let i = 0;\n      return {\n        next() {\n          if (i < max) {\n            return {\n              value: f(i++),\n              done: false\n            };\n          }\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n      };\n    }\n  };\n};\n/**\n * Return a `Iterable` containing a range of integers, including both endpoints.\n *\n * If `end` is omitted, the range will not have an upper bound.\n *\n * @example\n * import { range } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(range(1, 3)), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst range = (start, end) => {\n  if (end === undefined) {\n    return makeBy(i => start + i);\n  }\n  return makeBy(i => start + i, {\n    length: start <= end ? end - start + 1 : 1\n  });\n};\n/**\n * Return a `Iterable` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { replicate } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst replicate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (a, n) => makeBy(() => a, {\n  length: n\n}));\n/**\n * Takes a record and returns an Iterable of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { fromRecord } from \"effect/Iterable\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.from(fromRecord(x)), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst fromRecord = self => ({\n  *[Symbol.iterator]() {\n    for (const key in self) {\n      if (Object.prototype.hasOwnProperty.call(self, key)) {\n        yield [key, self[key]];\n      }\n    }\n  }\n});\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst prepend = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, head) => prependAll(self, [head]));\n/**\n * Prepends the specified prefix iterable to the beginning of the specified iterable.\n *\n * @example\n * import { Iterable } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst prependAll = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => appendAll(that, self));\n/**\n * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst append = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, last) => appendAll(self, [last]));\n/**\n * Concatenates two iterables, combining their elements.\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst appendAll = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => ({\n  [Symbol.iterator]() {\n    const iterA = self[Symbol.iterator]();\n    let doneA = false;\n    let iterB;\n    return {\n      next() {\n        if (!doneA) {\n          const r = iterA.next();\n          if (r.done) {\n            doneA = true;\n            iterB = that[Symbol.iterator]();\n            return iterB.next();\n          }\n          return r;\n        }\n        return iterB.next();\n      }\n    };\n  }\n}));\n/**\n * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n *\n * @category folding\n * @since 2.0.0\n */\nconst scan = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f) => ({\n  [Symbol.iterator]() {\n    let acc = b;\n    let iterator;\n    function next() {\n      if (iterator === undefined) {\n        iterator = self[Symbol.iterator]();\n        return {\n          done: false,\n          value: acc\n        };\n      }\n      const result = iterator.next();\n      if (result.done) {\n        return result;\n      }\n      acc = f(acc, result.value);\n      return {\n        done: false,\n        value: acc\n      };\n    }\n    return {\n      next\n    };\n  }\n}));\n/**\n * Determine if an `Iterable` is empty\n *\n * @example\n * import { isEmpty } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(isEmpty([]), true);\n * assert.deepStrictEqual(isEmpty([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEmpty = self => {\n  const iterator = self[Symbol.iterator]();\n  return iterator.next().done === true;\n};\n/**\n * Return the number of elements in a `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nconst size = self => {\n  const iterator = self[Symbol.iterator]();\n  let count = 0;\n  while (!iterator.next().done) {\n    count++;\n  }\n  return count;\n};\n/**\n * Get the first element of a `Iterable`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nconst head = self => {\n  const iterator = self[Symbol.iterator]();\n  const result = iterator.next();\n  return result.done ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.none() : _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(result.value);\n};\n/**\n * Get the first element of a `Iterable`, or throw an error if the `Iterable` is empty.\n *\n * @category getters\n * @since 3.3.0\n */\nconst unsafeHead = self => {\n  const iterator = self[Symbol.iterator]();\n  const result = iterator.next();\n  if (result.done) throw new Error(\"unsafeHead: empty iterable\");\n  return result.value;\n};\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nconst take = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => ({\n  [Symbol.iterator]() {\n    let i = 0;\n    const iterator = self[Symbol.iterator]();\n    return {\n      next() {\n        if (i < n) {\n          i++;\n          return iterator.next();\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nconst takeWhile = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        const result = iterator.next();\n        if (result.done || !predicate(result.value, i++)) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        return result;\n      }\n    };\n  }\n}));\n/**\n * Drop a max number of elements from the start of an `Iterable`\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nconst drop = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        while (i < n) {\n          const result = iterator.next();\n          if (result.done) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          i++;\n        }\n        return iterator.next();\n      }\n    };\n  }\n}));\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nconst findFirst = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  let i = 0;\n  for (const a of self) {\n    const o = f(a, i);\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(o)) {\n      if (o) {\n        return _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(a);\n      }\n    } else {\n      if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(o)) {\n        return o;\n      }\n    }\n    i++;\n  }\n  return _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n});\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nconst findLast = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  let i = 0;\n  let last = _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n  for (const a of self) {\n    const o = f(a, i);\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_2__.isBoolean)(o)) {\n      if (o) {\n        last = _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(a);\n      }\n    } else {\n      if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(o)) {\n        last = o;\n      }\n    }\n    i++;\n  }\n  return last;\n});\n/**\n * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zip = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => zipWith(self, that, _Tuple_js__WEBPACK_IMPORTED_MODULE_3__.make));\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f) => ({\n  [Symbol.iterator]() {\n    const selfIterator = self[Symbol.iterator]();\n    const thatIterator = that[Symbol.iterator]();\n    return {\n      next() {\n        const selfResult = selfIterator.next();\n        const thatResult = thatIterator.next();\n        if (selfResult.done || thatResult.done) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        return {\n          done: false,\n          value: f(selfResult.value, thatResult.value)\n        };\n      }\n    };\n  }\n}));\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @since 2.0.0\n */\nconst intersperse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, middle) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let next = iterator.next();\n    let emitted = false;\n    return {\n      next() {\n        if (next.done) {\n          return next;\n        } else if (emitted) {\n          emitted = false;\n          return {\n            done: false,\n            value: middle\n          };\n        }\n        emitted = true;\n        const result = next;\n        next = iterator.next();\n        return result;\n      }\n    };\n  }\n}));\n/**\n * Returns a function that checks if an `Iterable` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nconst containsWith = isEquivalent => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, a) => {\n  for (const i of self) {\n    if (isEquivalent(a, i)) {\n      return true;\n    }\n  }\n  return false;\n});\nconst _equivalence = /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_4__.equivalence();\n/**\n * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nconst contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`.\n *\n * @category splitting\n * @since 2.0.0\n */\nconst chunksOf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => {\n  const safeN = Math.max(1, Math.floor(n));\n  return {\n    [Symbol.iterator]() {\n      let iterator = self[Symbol.iterator]();\n      return {\n        next() {\n          if (iterator === undefined) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          const chunk = [];\n          for (let i = 0; i < safeN; i++) {\n            const result = iterator.next();\n            if (result.done) {\n              iterator = undefined;\n              return chunk.length === 0 ? {\n                done: true,\n                value: undefined\n              } : {\n                done: false,\n                value: chunk\n              };\n            }\n            chunk.push(result.value);\n          }\n          return {\n            done: false,\n            value: chunk\n          };\n        }\n      };\n    }\n  };\n});\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @category grouping\n * @since 2.0.0\n */\nconst groupWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let nextResult;\n    return {\n      next() {\n        let result;\n        if (nextResult !== undefined) {\n          if (nextResult.done) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          result = nextResult;\n          nextResult = undefined;\n        } else {\n          result = iterator.next();\n          if (result.done) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n        }\n        const chunk = [result.value];\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const next = iterator.next();\n          if (next.done || !isEquivalent(result.value, next.value)) {\n            nextResult = next;\n            return {\n              done: false,\n              value: chunk\n            };\n          }\n          chunk.push(next.value);\n        }\n      }\n    };\n  }\n}));\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s.\n *\n * @category grouping\n * @since 2.0.0\n */\nconst group = /*#__PURE__*/groupWith( /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_4__.equivalence());\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @category grouping\n * @since 2.0.0\n */\nconst groupBy = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = {};\n  for (const a of self) {\n    const k = f(a);\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a);\n    } else {\n      out[k] = [a];\n    }\n  }\n  return out;\n});\nconst constEmpty = {\n  [Symbol.iterator]() {\n    return constEmptyIterator;\n  }\n};\nconst constEmptyIterator = {\n  next() {\n    return {\n      done: true,\n      value: undefined\n    };\n  }\n};\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst empty = () => constEmpty;\n/**\n * Constructs a new `Iterable<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst of = a => [a];\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        const result = iterator.next();\n        if (result.done) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        return {\n          done: false,\n          value: f(result.value, i++)\n        };\n      }\n    };\n  }\n}));\n/**\n * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => flatten(map(self, f)));\n/**\n * Flattens an Iterable of Iterables into a single Iterable\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatten = self => ({\n  [Symbol.iterator]() {\n    const outerIterator = self[Symbol.iterator]();\n    let innerIterator;\n    function next() {\n      if (innerIterator === undefined) {\n        const next = outerIterator.next();\n        if (next.done) {\n          return next;\n        }\n        innerIterator = next.value[Symbol.iterator]();\n      }\n      const result = innerIterator.next();\n      if (result.done) {\n        innerIterator = undefined;\n        return next();\n      }\n      return result;\n    }\n    return {\n      next\n    };\n  }\n});\n/**\n * @category filtering\n * @since 2.0.0\n */\nconst filterMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        let result = iterator.next();\n        while (!result.done) {\n          const b = f(result.value, i++);\n          if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(b)) {\n            return {\n              done: false,\n              value: b.value\n            };\n          }\n          result = iterator.next();\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filterMapWhile = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        const result = iterator.next();\n        if (result.done) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        const b = f(result.value, i++);\n        if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(b)) {\n          return {\n            done: false,\n            value: b.value\n          };\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s.\n *\n * @example\n * import { Iterable, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getSomes([Option.some(1), Option.none(), Option.some(2)])),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getSomes = /*#__PURE__*/filterMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s.\n *\n * @example\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getLefts = self => filterMap(self, _Either_js__WEBPACK_IMPORTED_MODULE_5__.getLeft);\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s.\n *\n * @example\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getRights = self => filterMap(self, _Either_js__WEBPACK_IMPORTED_MODULE_5__.getRight);\n/**\n * @category filtering\n * @since 2.0.0\n */\nconst filter = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        let result = iterator.next();\n        while (!result.done) {\n          if (predicate(result.value, i++)) {\n            return {\n              done: false,\n              value: result.value\n            };\n          }\n          result = iterator.next();\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMapNullable = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => filterMap(self, a => {\n  const b = f(a);\n  return b == null ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.none() : _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(b);\n}));\n/**\n * Check if a predicate holds true for some `Iterable` element.\n *\n * @category elements\n * @since 2.0.0\n */\nconst some = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  let i = 0;\n  for (const a of self) {\n    if (predicate(a, i++)) {\n      return true;\n    }\n  }\n  return false;\n});\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst unfold = (b, f) => ({\n  [Symbol.iterator]() {\n    let next = b;\n    return {\n      next() {\n        const o = f(next);\n        if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isNone(o)) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        const [a, b] = o.value;\n        next = b;\n        return {\n          done: false,\n          value: a\n        };\n      }\n    };\n  }\n});\n/**\n * Iterate over the `Iterable` applying `f`.\n *\n * @since 2.0.0\n */\nconst forEach = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  let i = 0;\n  for (const a of self) {\n    f(a, i++);\n  }\n});\n/**\n * @category folding\n * @since 2.0.0\n */\nconst reduce = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, b, f) => {\n  if (Array.isArray(self)) {\n    return self.reduce(f, b);\n  }\n  let i = 0;\n  let result = b;\n  for (const n of self) {\n    result = f(result, n, i++);\n  }\n  return result;\n});\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @since 2.0.0\n */\nconst dedupeAdjacentWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, isEquivalent) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let first = true;\n    let last;\n    function next() {\n      const result = iterator.next();\n      if (result.done) {\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n      if (first) {\n        first = false;\n        last = result.value;\n        return result;\n      }\n      const current = result.value;\n      if (isEquivalent(last, current)) {\n        return next();\n      }\n      last = current;\n      return result;\n    }\n    return {\n      next\n    };\n  }\n}));\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n */\nconst dedupeAdjacent = /*#__PURE__*/dedupeAdjacentWith( /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_4__.equivalence());\n/**\n * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n *\n * @since 2.0.0\n * @category elements\n */\nconst cartesianWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, f) => flatMap(self, a => map(that, b => f(a, b))));\n/**\n * Zips this Iterable crosswise with the specified Iterable.\n *\n * @since 2.0.0\n * @category elements\n */\nconst cartesian = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => cartesianWith(self, that, (a, b) => [a, b]));\n//# sourceMappingURL=Iterable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL0l0ZXJhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQztBQUNHO0FBQ1c7QUFDZDtBQUNVO0FBQ1A7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBLDBEQUEwRCxXQUFXO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQixrREFBSTtBQUMxQztBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkJBQTZCLGtEQUFJO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGdDQUFnQyxrREFBSTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIsa0RBQUk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLGtEQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQixrREFBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBTSxLQUFLLDRDQUFNO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQixrREFBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQkFBK0Isa0RBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQixrREFBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQixrREFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxRQUFRLHdEQUFTO0FBQ2pCO0FBQ0EsZUFBZSw0Q0FBTTtBQUNyQjtBQUNBLE1BQU07QUFDTixVQUFVLDhDQUFRO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDRDQUFNO0FBQ2YsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhCQUE4QixrREFBSTtBQUN6QztBQUNBLGFBQWEsNENBQU07QUFDbkI7QUFDQTtBQUNBLFFBQVEsd0RBQVM7QUFDakI7QUFDQSxlQUFlLDRDQUFNO0FBQ3JCO0FBQ0EsTUFBTTtBQUNOLFVBQVUsOENBQVE7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlCQUF5QixrREFBSSx3Q0FBd0MsMkNBQVU7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsa0RBQUk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQ0FBcUMsa0RBQUk7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtDQUFrQyxrREFBaUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhCQUE4QixrREFBSTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixXQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQixrREFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG1EQUFtRCxrREFBaUI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUJBQXlCLGtEQUFJO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixrREFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLGtEQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhDQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0NBQW9DLGtEQUFJO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4Q0FBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3Q0FBd0Msa0RBQVE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx5Q0FBeUMsK0NBQVM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywwQ0FBMEMsZ0RBQVU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIsa0RBQUk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQ0FBcUMsa0RBQUk7QUFDaEQ7QUFDQSxxQkFBcUIsNENBQU0sS0FBSyw0Q0FBTTtBQUN0QyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMEJBQTBCLGtEQUFJO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4Q0FBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIsa0RBQUk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3Q0FBd0Msa0RBQUk7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFFQUFxRSxrREFBaUI7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DLGtEQUFJO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQixrREFBSTtBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9JdGVyYWJsZS5qcz8yMWFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCBJdGVyYWJsZXMgaW4gVHlwZVNjcmlwdC5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0ICogYXMgRSBmcm9tIFwiLi9FaXRoZXIuanNcIjtcbmltcG9ydCAqIGFzIEVxdWFsIGZyb20gXCIuL0VxdWFsLmpzXCI7XG5pbXBvcnQgeyBkdWFsLCBpZGVudGl0eSB9IGZyb20gXCIuL0Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBPIGZyb20gXCIuL09wdGlvbi5qc1wiO1xuaW1wb3J0IHsgaXNCb29sZWFuIH0gZnJvbSBcIi4vUHJlZGljYXRlLmpzXCI7XG5pbXBvcnQgKiBhcyBUdXBsZSBmcm9tIFwiLi9UdXBsZS5qc1wiO1xuLyoqXG4gKiBSZXR1cm4gYSBgSXRlcmFibGVgIHdpdGggZWxlbWVudCBgaWAgaW5pdGlhbGl6ZWQgd2l0aCBgZihpKWAuXG4gKlxuICogSWYgdGhlIGBsZW5ndGhgIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBgSXRlcmFibGVgIHdpbGwgYmUgaW5maW5pdGUuXG4gKlxuICogKipOb3RlKiouIGBsZW5ndGhgIGlzIG5vcm1hbGl6ZWQgdG8gYW4gaW50ZWdlciA+PSAxLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtYWtlQnkgfSBmcm9tIFwiZWZmZWN0L0l0ZXJhYmxlXCJcbiAqXG4gKiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKEFycmF5LmZyb20obWFrZUJ5KG4gPT4gbiAqIDIsIHsgbGVuZ3RoOiA1IH0pKSwgWzAsIDIsIDQsIDYsIDhdKVxuICpcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWFrZUJ5ID0gKGYsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgbWF4ID0gb3B0aW9ucz8ubGVuZ3RoICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCgxLCBNYXRoLmZsb29yKG9wdGlvbnMubGVuZ3RoKSkgOiBJbmZpbml0eTtcbiAgcmV0dXJuIHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgaWYgKGkgPCBtYXgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBmKGkrKyksXG4gICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFJldHVybiBhIGBJdGVyYWJsZWAgY29udGFpbmluZyBhIHJhbmdlIG9mIGludGVnZXJzLCBpbmNsdWRpbmcgYm90aCBlbmRwb2ludHMuXG4gKlxuICogSWYgYGVuZGAgaXMgb21pdHRlZCwgdGhlIHJhbmdlIHdpbGwgbm90IGhhdmUgYW4gdXBwZXIgYm91bmQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IHJhbmdlIH0gZnJvbSBcImVmZmVjdC9JdGVyYWJsZVwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChBcnJheS5mcm9tKHJhbmdlKDEsIDMpKSwgWzEsIDIsIDNdKVxuICpcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgcmFuZ2UgPSAoc3RhcnQsIGVuZCkgPT4ge1xuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWFrZUJ5KGkgPT4gc3RhcnQgKyBpKTtcbiAgfVxuICByZXR1cm4gbWFrZUJ5KGkgPT4gc3RhcnQgKyBpLCB7XG4gICAgbGVuZ3RoOiBzdGFydCA8PSBlbmQgPyBlbmQgLSBzdGFydCArIDEgOiAxXG4gIH0pO1xufTtcbi8qKlxuICogUmV0dXJuIGEgYEl0ZXJhYmxlYCBjb250YWluaW5nIGEgdmFsdWUgcmVwZWF0ZWQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGltZXMuXG4gKlxuICogKipOb3RlKiouIGBuYCBpcyBub3JtYWxpemVkIHRvIGFuIGludGVnZXIgPj0gMS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgcmVwbGljYXRlIH0gZnJvbSBcImVmZmVjdC9JdGVyYWJsZVwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChBcnJheS5mcm9tKHJlcGxpY2F0ZShcImFcIiwgMykpLCBbXCJhXCIsIFwiYVwiLCBcImFcIl0pXG4gKlxuICogQGNhdGVnb3J5IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCByZXBsaWNhdGUgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoYSwgbikgPT4gbWFrZUJ5KCgpID0+IGEsIHtcbiAgbGVuZ3RoOiBuXG59KSk7XG4vKipcbiAqIFRha2VzIGEgcmVjb3JkIGFuZCByZXR1cm5zIGFuIEl0ZXJhYmxlIG9mIHR1cGxlcyBjb250YWluaW5nIGl0cyBrZXlzIGFuZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHNlbGYgLSBUaGUgcmVjb3JkIHRvIHRyYW5zZm9ybS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgZnJvbVJlY29yZCB9IGZyb20gXCJlZmZlY3QvSXRlcmFibGVcIlxuICpcbiAqIGNvbnN0IHggPSB7IGE6IDEsIGI6IDIsIGM6IDMgfVxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChBcnJheS5mcm9tKGZyb21SZWNvcmQoeCkpLCBbW1wiYVwiLCAxXSwgW1wiYlwiLCAyXSwgW1wiY1wiLCAzXV0pXG4gKlxuICogQGNhdGVnb3J5IGNvbnZlcnNpb25zXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21SZWNvcmQgPSBzZWxmID0+ICh7XG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzZWxmKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNlbGYsIGtleSkpIHtcbiAgICAgICAgeWllbGQgW2tleSwgc2VsZltrZXldXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuLyoqXG4gKiBQcmVwZW5kIGFuIGVsZW1lbnQgdG8gdGhlIGZyb250IG9mIGFuIGBJdGVyYWJsZWAsIGNyZWF0aW5nIGEgbmV3IGBJdGVyYWJsZWAuXG4gKlxuICogQGNhdGVnb3J5IGNvbmNhdGVuYXRpbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgcHJlcGVuZCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBoZWFkKSA9PiBwcmVwZW5kQWxsKHNlbGYsIFtoZWFkXSkpO1xuLyoqXG4gKiBQcmVwZW5kcyB0aGUgc3BlY2lmaWVkIHByZWZpeCBpdGVyYWJsZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzcGVjaWZpZWQgaXRlcmFibGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IEl0ZXJhYmxlIH0gZnJvbSBcImVmZmVjdFwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAqICAgQXJyYXkuZnJvbShJdGVyYWJsZS5wcmVwZW5kQWxsKFsxLCAyXSwgW1wiYVwiLCBcImJcIl0pKSxcbiAqICAgW1wiYVwiLCBcImJcIiwgMSwgMl1cbiAqIClcbiAqXG4gKiBAY2F0ZWdvcnkgY29uY2F0ZW5hdGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwZW5kQWxsID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRoYXQpID0+IGFwcGVuZEFsbCh0aGF0LCBzZWxmKSk7XG4vKipcbiAqIEFwcGVuZCBhbiBlbGVtZW50IHRvIHRoZSBlbmQgb2YgYW4gYEl0ZXJhYmxlYCwgY3JlYXRpbmcgYSBuZXcgYEl0ZXJhYmxlYC5cbiAqXG4gKiBAY2F0ZWdvcnkgY29uY2F0ZW5hdGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBhcHBlbmQgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgbGFzdCkgPT4gYXBwZW5kQWxsKHNlbGYsIFtsYXN0XSkpO1xuLyoqXG4gKiBDb25jYXRlbmF0ZXMgdHdvIGl0ZXJhYmxlcywgY29tYmluaW5nIHRoZWlyIGVsZW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBjb25jYXRlbmF0aW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGVuZEFsbCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCB0aGF0KSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBpdGVyQSA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGxldCBkb25lQSA9IGZhbHNlO1xuICAgIGxldCBpdGVyQjtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKCFkb25lQSkge1xuICAgICAgICAgIGNvbnN0IHIgPSBpdGVyQS5uZXh0KCk7XG4gICAgICAgICAgaWYgKHIuZG9uZSkge1xuICAgICAgICAgICAgZG9uZUEgPSB0cnVlO1xuICAgICAgICAgICAgaXRlckIgPSB0aGF0W1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVyQi5uZXh0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVyQi5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSkpO1xuLyoqXG4gKiBSZWR1Y2UgYW4gYEl0ZXJhYmxlYCBmcm9tIHRoZSBsZWZ0LCBrZWVwaW5nIGFsbCBpbnRlcm1lZGlhdGUgcmVzdWx0cyBpbnN0ZWFkIG9mIG9ubHkgdGhlIGZpbmFsIHJlc3VsdC5cbiAqXG4gKiBAY2F0ZWdvcnkgZm9sZGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzY2FuID0gLyojX19QVVJFX18qL2R1YWwoMywgKHNlbGYsIGIsIGYpID0+ICh7XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCBhY2MgPSBiO1xuICAgIGxldCBpdGVyYXRvcjtcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKGl0ZXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogYWNjXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGFjYyA9IGYoYWNjLCByZXN1bHQudmFsdWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBhY2NcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuZXh0XG4gICAgfTtcbiAgfVxufSkpO1xuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYW4gYEl0ZXJhYmxlYCBpcyBlbXB0eVxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSBcImVmZmVjdC9JdGVyYWJsZVwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChpc0VtcHR5KFtdKSwgdHJ1ZSk7XG4gKiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGlzRW1wdHkoWzEsIDIsIDNdKSwgZmFsc2UpO1xuICpcbiAqIEBjYXRlZ29yeSBndWFyZHNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgaXNFbXB0eSA9IHNlbGYgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICByZXR1cm4gaXRlcmF0b3IubmV4dCgpLmRvbmUgPT09IHRydWU7XG59O1xuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhIGBJdGVyYWJsZWAuXG4gKlxuICogQGNhdGVnb3J5IGdldHRlcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc2l6ZSA9IHNlbGYgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICBsZXQgY291bnQgPSAwO1xuICB3aGlsZSAoIWl0ZXJhdG9yLm5leHQoKS5kb25lKSB7XG4gICAgY291bnQrKztcbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYSBgSXRlcmFibGVgLCBvciBgTm9uZWAgaWYgdGhlIGBJdGVyYWJsZWAgaXMgZW1wdHkuXG4gKlxuICogQGNhdGVnb3J5IGdldHRlcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgaGVhZCA9IHNlbGYgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICBjb25zdCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gIHJldHVybiByZXN1bHQuZG9uZSA/IE8ubm9uZSgpIDogTy5zb21lKHJlc3VsdC52YWx1ZSk7XG59O1xuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYSBgSXRlcmFibGVgLCBvciB0aHJvdyBhbiBlcnJvciBpZiB0aGUgYEl0ZXJhYmxlYCBpcyBlbXB0eS5cbiAqXG4gKiBAY2F0ZWdvcnkgZ2V0dGVyc1xuICogQHNpbmNlIDMuMy4wXG4gKi9cbmV4cG9ydCBjb25zdCB1bnNhZmVIZWFkID0gc2VsZiA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gc2VsZltTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIGNvbnN0IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgaWYgKHJlc3VsdC5kb25lKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bnNhZmVIZWFkOiBlbXB0eSBpdGVyYWJsZVwiKTtcbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG4vKipcbiAqIEtlZXAgb25seSBhIG1heCBudW1iZXIgb2YgZWxlbWVudHMgZnJvbSB0aGUgc3RhcnQgb2YgYW4gYEl0ZXJhYmxlYCwgY3JlYXRpbmcgYSBuZXcgYEl0ZXJhYmxlYC5cbiAqXG4gKiAqKk5vdGUqKi4gYG5gIGlzIG5vcm1hbGl6ZWQgdG8gYSBub24gbmVnYXRpdmUgaW50ZWdlci5cbiAqXG4gKiBAY2F0ZWdvcnkgZ2V0dGVyc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0YWtlID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIG4pID0+ICh7XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBpdGVyYXRvciA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0KCkge1xuICAgICAgICBpZiAoaSA8IG4pIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKTtcbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBsb25nZXN0IGluaXRpYWwgSXRlcmFibGUgZm9yIHdoaWNoIGFsbCBlbGVtZW50IHNhdGlzZnkgdGhlIHNwZWNpZmllZCBwcmVkaWNhdGUsIGNyZWF0aW5nIGEgbmV3IGBJdGVyYWJsZWAuXG4gKlxuICogQGNhdGVnb3J5IGdldHRlcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgdGFrZVdoaWxlID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHByZWRpY2F0ZSkgPT4gKHtcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHJlc3VsdC5kb25lIHx8ICFwcmVkaWNhdGUocmVzdWx0LnZhbHVlLCBpKyspKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKTtcbi8qKlxuICogRHJvcCBhIG1heCBudW1iZXIgb2YgZWxlbWVudHMgZnJvbSB0aGUgc3RhcnQgb2YgYW4gYEl0ZXJhYmxlYFxuICpcbiAqICoqTm90ZSoqLiBgbmAgaXMgbm9ybWFsaXplZCB0byBhIG5vbiBuZWdhdGl2ZSBpbnRlZ2VyLlxuICpcbiAqIEBjYXRlZ29yeSBnZXR0ZXJzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGRyb3AgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgbikgPT4gKHtcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKTtcbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IHNhdGlzZmllcyB0aGUgc3BlY2lmaWVkXG4gKiBwcmVkaWNhdGUsIG9yIGBOb25lYCBpZiBubyBzdWNoIGVsZW1lbnQgZXhpc3RzLlxuICpcbiAqIEBjYXRlZ29yeSBlbGVtZW50c1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmaW5kRmlyc3QgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgZikgPT4ge1xuICBsZXQgaSA9IDA7XG4gIGZvciAoY29uc3QgYSBvZiBzZWxmKSB7XG4gICAgY29uc3QgbyA9IGYoYSwgaSk7XG4gICAgaWYgKGlzQm9vbGVhbihvKSkge1xuICAgICAgaWYgKG8pIHtcbiAgICAgICAgcmV0dXJuIE8uc29tZShhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKE8uaXNTb21lKG8pKSB7XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIE8ubm9uZSgpO1xufSk7XG4vKipcbiAqIEZpbmQgdGhlIGxhc3QgZWxlbWVudCBmb3Igd2hpY2ggYSBwcmVkaWNhdGUgaG9sZHMuXG4gKlxuICogQGNhdGVnb3J5IGVsZW1lbnRzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmRMYXN0ID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIGYpID0+IHtcbiAgbGV0IGkgPSAwO1xuICBsZXQgbGFzdCA9IE8ubm9uZSgpO1xuICBmb3IgKGNvbnN0IGEgb2Ygc2VsZikge1xuICAgIGNvbnN0IG8gPSBmKGEsIGkpO1xuICAgIGlmIChpc0Jvb2xlYW4obykpIHtcbiAgICAgIGlmIChvKSB7XG4gICAgICAgIGxhc3QgPSBPLnNvbWUoYSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChPLmlzU29tZShvKSkge1xuICAgICAgICBsYXN0ID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIHJldHVybiBsYXN0O1xufSk7XG4vKipcbiAqIFRha2VzIHR3byBgSXRlcmFibGVgcyBhbmQgcmV0dXJucyBhbiBgSXRlcmFibGVgIG9mIGNvcnJlc3BvbmRpbmcgcGFpcnMuXG4gKlxuICogQGNhdGVnb3J5IHppcHBpbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgemlwID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRoYXQpID0+IHppcFdpdGgoc2VsZiwgdGhhdCwgVHVwbGUubWFrZSkpO1xuLyoqXG4gKiBBcHBseSBhIGZ1bmN0aW9uIHRvIHBhaXJzIG9mIGVsZW1lbnRzIGF0IHRoZSBzYW1lIGluZGV4IGluIHR3byBgSXRlcmFibGVgcywgY29sbGVjdGluZyB0aGUgcmVzdWx0cy4gSWYgb25lXG4gKiBpbnB1dCBgSXRlcmFibGVgIGlzIHNob3J0LCBleGNlc3MgZWxlbWVudHMgb2YgdGhlIGxvbmdlciBgSXRlcmFibGVgIGFyZSBkaXNjYXJkZWQuXG4gKlxuICogQGNhdGVnb3J5IHppcHBpbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgemlwV2l0aCA9IC8qI19fUFVSRV9fKi9kdWFsKDMsIChzZWxmLCB0aGF0LCBmKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBzZWxmSXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBjb25zdCB0aGF0SXRlcmF0b3IgPSB0aGF0W1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3Qgc2VsZlJlc3VsdCA9IHNlbGZJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGNvbnN0IHRoYXRSZXN1bHQgPSB0aGF0SXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc2VsZlJlc3VsdC5kb25lIHx8IHRoYXRSZXN1bHQuZG9uZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogZihzZWxmUmVzdWx0LnZhbHVlLCB0aGF0UmVzdWx0LnZhbHVlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKTtcbi8qKlxuICogUGxhY2VzIGFuIGVsZW1lbnQgaW4gYmV0d2VlbiBtZW1iZXJzIG9mIGFuIGBJdGVyYWJsZWAuXG4gKiBJZiB0aGUgaW5wdXQgaXMgYSBub24tZW1wdHkgYXJyYXksIHRoZSByZXN1bHQgaXMgYWxzbyBhIG5vbi1lbXB0eSBhcnJheS5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVyc3BlcnNlID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIG1pZGRsZSkgPT4gKHtcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBsZXQgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICBsZXQgZW1pdHRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0KCkge1xuICAgICAgICBpZiAobmV4dC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZW1pdHRlZCkge1xuICAgICAgICAgIGVtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogbWlkZGxlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV4dDtcbiAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KSk7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhbiBgSXRlcmFibGVgIGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgdXNpbmcgYSBwcm92aWRlZCBgaXNFcXVpdmFsZW50YCBmdW5jdGlvbi5cbiAqXG4gKiBAY2F0ZWdvcnkgZWxlbWVudHNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgY29udGFpbnNXaXRoID0gaXNFcXVpdmFsZW50ID0+IGR1YWwoMiwgKHNlbGYsIGEpID0+IHtcbiAgZm9yIChjb25zdCBpIG9mIHNlbGYpIHtcbiAgICBpZiAoaXNFcXVpdmFsZW50KGEsIGkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSk7XG5jb25zdCBfZXF1aXZhbGVuY2UgPSAvKiNfX1BVUkVfXyovRXF1YWwuZXF1aXZhbGVuY2UoKTtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIGEgYEl0ZXJhYmxlYCBjb250YWlucyBhIGdpdmVuIHZhbHVlIHVzaW5nIHRoZSBkZWZhdWx0IGBFcXVpdmFsZW5jZWAuXG4gKlxuICogQGNhdGVnb3J5IGVsZW1lbnRzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRhaW5zID0gLyojX19QVVJFX18qL2NvbnRhaW5zV2l0aChfZXF1aXZhbGVuY2UpO1xuLyoqXG4gKiBTcGxpdHMgYW4gYEl0ZXJhYmxlYCBpbnRvIGxlbmd0aC1gbmAgcGllY2VzLiBUaGUgbGFzdCBwaWVjZSB3aWxsIGJlIHNob3J0ZXIgaWYgYG5gIGRvZXMgbm90IGV2ZW5seSBkaXZpZGUgdGhlIGxlbmd0aCBvZlxuICogdGhlIGBJdGVyYWJsZWAuXG4gKlxuICogQGNhdGVnb3J5IHNwbGl0dGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjaHVua3NPZiA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBuKSA9PiB7XG4gIGNvbnN0IHNhZmVOID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihuKSk7XG4gIHJldHVybiB7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICBsZXQgaXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNodW5rID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYWZlTjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgaXRlcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIHJldHVybiBjaHVuay5sZW5ndGggPT09IDAgPyB7XG4gICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNodW5rXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaHVuay5wdXNoKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBjaHVua1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufSk7XG4vKipcbiAqIEdyb3VwIGVxdWFsLCBjb25zZWN1dGl2ZSBlbGVtZW50cyBvZiBhbiBgSXRlcmFibGVgIGludG8gYE5vbkVtcHR5QXJyYXlgcyB1c2luZyB0aGUgcHJvdmlkZWQgYGlzRXF1aXZhbGVudGAgZnVuY3Rpb24uXG4gKlxuICogQGNhdGVnb3J5IGdyb3VwaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdyb3VwV2l0aCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBpc0VxdWl2YWxlbnQpID0+ICh7XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gc2VsZltTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgbGV0IG5leHRSZXN1bHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmIChuZXh0UmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAobmV4dFJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBuZXh0UmVzdWx0O1xuICAgICAgICAgIG5leHRSZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2h1bmsgPSBbcmVzdWx0LnZhbHVlXTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIGNvbnN0IG5leHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKG5leHQuZG9uZSB8fCAhaXNFcXVpdmFsZW50KHJlc3VsdC52YWx1ZSwgbmV4dC52YWx1ZSkpIHtcbiAgICAgICAgICAgIG5leHRSZXN1bHQgPSBuZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgIHZhbHVlOiBjaHVua1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2h1bmsucHVzaChuZXh0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKTtcbi8qKlxuICogR3JvdXAgZXF1YWwsIGNvbnNlY3V0aXZlIGVsZW1lbnRzIG9mIGFuIGBJdGVyYWJsZWAgaW50byBgTm9uRW1wdHlBcnJheWBzLlxuICpcbiAqIEBjYXRlZ29yeSBncm91cGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cCA9IC8qI19fUFVSRV9fKi9ncm91cFdpdGgoIC8qI19fUFVSRV9fKi9FcXVhbC5lcXVpdmFsZW5jZSgpKTtcbi8qKlxuICogU3BsaXRzIGFuIGBJdGVyYWJsZWAgaW50byBzdWItbm9uLWVtcHR5LWFycmF5cyBzdG9yZWQgaW4gYW4gb2JqZWN0LCBiYXNlZCBvbiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYSBgc3RyaW5nYC1yZXR1cm5pbmdcbiAqIGZ1bmN0aW9uIG9uIGVhY2ggZWxlbWVudCwgYW5kIGdyb3VwaW5nIHRoZSByZXN1bHRzIGFjY29yZGluZyB0byB2YWx1ZXMgcmV0dXJuZWRcbiAqXG4gKiBAY2F0ZWdvcnkgZ3JvdXBpbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZ3JvdXBCeSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiB7XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IGEgb2Ygc2VsZikge1xuICAgIGNvbnN0IGsgPSBmKGEpO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0LCBrKSkge1xuICAgICAgb3V0W2tdLnB1c2goYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dFtrXSA9IFthXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn0pO1xuY29uc3QgY29uc3RFbXB0eSA9IHtcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIGNvbnN0RW1wdHlJdGVyYXRvcjtcbiAgfVxufTtcbmNvbnN0IGNvbnN0RW1wdHlJdGVyYXRvciA9IHtcbiAgbmV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGVtcHR5ID0gKCkgPT4gY29uc3RFbXB0eTtcbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBgSXRlcmFibGU8QT5gIGZyb20gdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG9mID0gYSA9PiBbYV07XG4vKipcbiAqIEBjYXRlZ29yeSBtYXBwaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG1hcCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBpdGVyYXRvciA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IGYocmVzdWx0LnZhbHVlLCBpKyspXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSkpO1xuLyoqXG4gKiBBcHBsaWVzIGEgZnVuY3Rpb24gdG8gZWFjaCBlbGVtZW50IGluIGFuIEl0ZXJhYmxlIGFuZCByZXR1cm5zIGEgbmV3IEl0ZXJhYmxlIGNvbnRhaW5pbmcgdGhlIGNvbmNhdGVuYXRlZCBtYXBwZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IHNlcXVlbmNpbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZmxhdE1hcCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiBmbGF0dGVuKG1hcChzZWxmLCBmKSkpO1xuLyoqXG4gKiBGbGF0dGVucyBhbiBJdGVyYWJsZSBvZiBJdGVyYWJsZXMgaW50byBhIHNpbmdsZSBJdGVyYWJsZVxuICpcbiAqIEBjYXRlZ29yeSBzZXF1ZW5jaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGZsYXR0ZW4gPSBzZWxmID0+ICh7XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IG91dGVySXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBsZXQgaW5uZXJJdGVyYXRvcjtcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKGlubmVySXRlcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBuZXh0ID0gb3V0ZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChuZXh0LmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpbm5lckl0ZXJhdG9yID0gbmV4dC52YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICBpbm5lckl0ZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHRcbiAgICB9O1xuICB9XG59KTtcbi8qKlxuICogQGNhdGVnb3J5IGZpbHRlcmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXJNYXAgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgZikgPT4gKHtcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBzZWxmW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICBjb25zdCBiID0gZihyZXN1bHQudmFsdWUsIGkrKyk7XG4gICAgICAgICAgaWYgKE8uaXNTb21lKGIpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGIudmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKTtcbi8qKlxuICogVHJhbnNmb3JtcyBhbGwgZWxlbWVudHMgb2YgdGhlIGBJdGVyYWJsZWAgZm9yIGFzIGxvbmcgYXMgdGhlIHNwZWNpZmllZCBmdW5jdGlvbiByZXR1cm5zIHNvbWUgdmFsdWVcbiAqXG4gKiBAY2F0ZWdvcnkgZmlsdGVyaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbHRlck1hcFdoaWxlID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIGYpID0+ICh7XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gc2VsZltTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgbGV0IGkgPSAwO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYiA9IGYocmVzdWx0LnZhbHVlLCBpKyspO1xuICAgICAgICBpZiAoTy5pc1NvbWUoYikpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogYi52YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KSk7XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgYFNvbWVgIHZhbHVlcyBmcm9tIGFuIGBJdGVyYWJsZWAgb2YgYE9wdGlvbmBzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBJdGVyYWJsZSwgT3B0aW9uIH0gZnJvbSBcImVmZmVjdFwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAqICAgQXJyYXkuZnJvbShJdGVyYWJsZS5nZXRTb21lcyhbT3B0aW9uLnNvbWUoMSksIE9wdGlvbi5ub25lKCksIE9wdGlvbi5zb21lKDIpXSkpLFxuICogICBbMSwgMl1cbiAqIClcbiAqXG4gKiBAY2F0ZWdvcnkgZmlsdGVyaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFNvbWVzID0gLyojX19QVVJFX18qL2ZpbHRlck1hcChpZGVudGl0eSk7XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgYExlZnRgIHZhbHVlcyBmcm9tIGFuIGBJdGVyYWJsZWAgb2YgYEVpdGhlcmBzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBJdGVyYWJsZSwgRWl0aGVyIH0gZnJvbSBcImVmZmVjdFwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAqICAgQXJyYXkuZnJvbShJdGVyYWJsZS5nZXRMZWZ0cyhbRWl0aGVyLnJpZ2h0KDEpLCBFaXRoZXIubGVmdChcImVyclwiKSwgRWl0aGVyLnJpZ2h0KDIpXSkpLFxuICogICBbXCJlcnJcIl1cbiAqIClcbiAqXG4gKiBAY2F0ZWdvcnkgZmlsdGVyaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdldExlZnRzID0gc2VsZiA9PiBmaWx0ZXJNYXAoc2VsZiwgRS5nZXRMZWZ0KTtcbi8qKlxuICogUmV0cmlldmVzIHRoZSBgUmlnaHRgIHZhbHVlcyBmcm9tIGFuIGBJdGVyYWJsZWAgb2YgYEVpdGhlcmBzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBJdGVyYWJsZSwgRWl0aGVyIH0gZnJvbSBcImVmZmVjdFwiXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAqICAgQXJyYXkuZnJvbShJdGVyYWJsZS5nZXRSaWdodHMoW0VpdGhlci5yaWdodCgxKSwgRWl0aGVyLmxlZnQoXCJlcnJcIiksIEVpdGhlci5yaWdodCgyKV0pKSxcbiAqICAgWzEsIDJdXG4gKiApXG4gKlxuICogQGNhdGVnb3J5IGZpbHRlcmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRSaWdodHMgPSBzZWxmID0+IGZpbHRlck1hcChzZWxmLCBFLmdldFJpZ2h0KTtcbi8qKlxuICogQGNhdGVnb3J5IGZpbHRlcmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXIgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgcHJlZGljYXRlKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBpdGVyYXRvciA9IHNlbGZbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIGlmIChwcmVkaWNhdGUocmVzdWx0LnZhbHVlLCBpKyspKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC52YWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc2VxdWVuY2luZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmbGF0TWFwTnVsbGFibGUgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgZikgPT4gZmlsdGVyTWFwKHNlbGYsIGEgPT4ge1xuICBjb25zdCBiID0gZihhKTtcbiAgcmV0dXJuIGIgPT0gbnVsbCA/IE8ubm9uZSgpIDogTy5zb21lKGIpO1xufSkpO1xuLyoqXG4gKiBDaGVjayBpZiBhIHByZWRpY2F0ZSBob2xkcyB0cnVlIGZvciBzb21lIGBJdGVyYWJsZWAgZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgZWxlbWVudHNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc29tZSA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBwcmVkaWNhdGUpID0+IHtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKGNvbnN0IGEgb2Ygc2VsZikge1xuICAgIGlmIChwcmVkaWNhdGUoYSwgaSsrKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHVuZm9sZCA9IChiLCBmKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgbmV4dCA9IGI7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGNvbnN0IG8gPSBmKG5leHQpO1xuICAgICAgICBpZiAoTy5pc05vbmUobykpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFthLCBiXSA9IG8udmFsdWU7XG4gICAgICAgIG5leHQgPSBiO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBhXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG4vKipcbiAqIEl0ZXJhdGUgb3ZlciB0aGUgYEl0ZXJhYmxlYCBhcHBseWluZyBgZmAuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JFYWNoID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIGYpID0+IHtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKGNvbnN0IGEgb2Ygc2VsZikge1xuICAgIGYoYSwgaSsrKTtcbiAgfVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBmb2xkaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHJlZHVjZSA9IC8qI19fUFVSRV9fKi9kdWFsKDMsIChzZWxmLCBiLCBmKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNlbGYpKSB7XG4gICAgcmV0dXJuIHNlbGYucmVkdWNlKGYsIGIpO1xuICB9XG4gIGxldCBpID0gMDtcbiAgbGV0IHJlc3VsdCA9IGI7XG4gIGZvciAoY29uc3QgbiBvZiBzZWxmKSB7XG4gICAgcmVzdWx0ID0gZihyZXN1bHQsIG4sIGkrKyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuLyoqXG4gKiBEZWR1cGxpY2F0ZXMgYWRqYWNlbnQgZWxlbWVudHMgdGhhdCBhcmUgaWRlbnRpY2FsIHVzaW5nIHRoZSBwcm92aWRlZCBgaXNFcXVpdmFsZW50YCBmdW5jdGlvbi5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZHVwZUFkamFjZW50V2l0aCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBpc0VxdWl2YWxlbnQpID0+ICh7XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gc2VsZltTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICBsZXQgbGFzdDtcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgbGFzdCA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN1cnJlbnQgPSByZXN1bHQudmFsdWU7XG4gICAgICBpZiAoaXNFcXVpdmFsZW50KGxhc3QsIGN1cnJlbnQpKSB7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9XG4gICAgICBsYXN0ID0gY3VycmVudDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuZXh0XG4gICAgfTtcbiAgfVxufSkpO1xuLyoqXG4gKiBEZWR1cGxpY2F0ZXMgYWRqYWNlbnQgZWxlbWVudHMgdGhhdCBhcmUgaWRlbnRpY2FsLlxuICpcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZGVkdXBlQWRqYWNlbnQgPSAvKiNfX1BVUkVfXyovZGVkdXBlQWRqYWNlbnRXaXRoKCAvKiNfX1BVUkVfXyovRXF1YWwuZXF1aXZhbGVuY2UoKSk7XG4vKipcbiAqIFppcHMgdGhpcyBJdGVyYWJsZSBjcm9zc3dpc2Ugd2l0aCB0aGUgc3BlY2lmaWVkIEl0ZXJhYmxlIHVzaW5nIHRoZSBzcGVjaWZpZWQgY29tYmluZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgZWxlbWVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IGNhcnRlc2lhbldpdGggPSAvKiNfX1BVUkVfXyovZHVhbCgzLCAoc2VsZiwgdGhhdCwgZikgPT4gZmxhdE1hcChzZWxmLCBhID0+IG1hcCh0aGF0LCBiID0+IGYoYSwgYikpKSk7XG4vKipcbiAqIFppcHMgdGhpcyBJdGVyYWJsZSBjcm9zc3dpc2Ugd2l0aCB0aGUgc3BlY2lmaWVkIEl0ZXJhYmxlLlxuICpcbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBjYXJ0ZXNpYW4gPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gY2FydGVzaWFuV2l0aChzZWxmLCB0aGF0LCAoYSwgYikgPT4gW2EsIGJdKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JdGVyYWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Iterable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Micro.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Micro.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   EnvRefTypeId: () => (/* binding */ EnvRefTypeId),\n/* harmony export */   EnvTypeId: () => (/* binding */ EnvTypeId),\n/* harmony export */   Error: () => (/* binding */ Error),\n/* harmony export */   FailureAborted: () => (/* binding */ FailureAborted),\n/* harmony export */   FailureExpected: () => (/* binding */ FailureExpected),\n/* harmony export */   FailureTypeId: () => (/* binding */ FailureTypeId),\n/* harmony export */   FailureUnexpected: () => (/* binding */ FailureUnexpected),\n/* harmony export */   HandleTypeId: () => (/* binding */ HandleTypeId),\n/* harmony export */   MicroScope: () => (/* binding */ MicroScope),\n/* harmony export */   MicroScopeTypeId: () => (/* binding */ MicroScopeTypeId),\n/* harmony export */   NoSuchElementException: () => (/* binding */ NoSuchElementException),\n/* harmony export */   ResultAborted: () => (/* binding */ ResultAborted),\n/* harmony export */   ResultFail: () => (/* binding */ ResultFail),\n/* harmony export */   ResultFailUnexpected: () => (/* binding */ ResultFailUnexpected),\n/* harmony export */   ResultFailWith: () => (/* binding */ ResultFailWith),\n/* harmony export */   ResultSuccess: () => (/* binding */ ResultSuccess),\n/* harmony export */   TaggedError: () => (/* binding */ TaggedError),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   abort: () => (/* binding */ abort),\n/* harmony export */   acquireRelease: () => (/* binding */ acquireRelease),\n/* harmony export */   acquireUseRelease: () => (/* binding */ acquireUseRelease),\n/* harmony export */   addFinalizer: () => (/* binding */ addFinalizer),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   as: () => (/* binding */ as),\n/* harmony export */   asResult: () => (/* binding */ asResult),\n/* harmony export */   asSome: () => (/* binding */ asSome),\n/* harmony export */   asVoid: () => (/* binding */ asVoid),\n/* harmony export */   async: () => (/* binding */ async),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   catchExpected: () => (/* binding */ catchExpected),\n/* harmony export */   catchFailure: () => (/* binding */ catchFailure),\n/* harmony export */   catchFailureIf: () => (/* binding */ catchFailureIf),\n/* harmony export */   catchIf: () => (/* binding */ catchIf),\n/* harmony export */   catchTag: () => (/* binding */ catchTag),\n/* harmony export */   catchUnexpected: () => (/* binding */ catchUnexpected),\n/* harmony export */   context: () => (/* binding */ context),\n/* harmony export */   currentAbortController: () => (/* binding */ currentAbortController),\n/* harmony export */   currentAbortSignal: () => (/* binding */ currentAbortSignal),\n/* harmony export */   currentConcurrency: () => (/* binding */ currentConcurrency),\n/* harmony export */   currentContext: () => (/* binding */ currentContext),\n/* harmony export */   currentMaxDepthBeforeYield: () => (/* binding */ currentMaxDepthBeforeYield),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   delayExponential: () => (/* binding */ delayExponential),\n/* harmony export */   delaySpaced: () => (/* binding */ delaySpaced),\n/* harmony export */   delayWithMax: () => (/* binding */ delayWithMax),\n/* harmony export */   delayWithMaxElapsed: () => (/* binding */ delayWithMaxElapsed),\n/* harmony export */   delayWithRecurs: () => (/* binding */ delayWithRecurs),\n/* harmony export */   die: () => (/* binding */ die),\n/* harmony export */   either: () => (/* binding */ either),\n/* harmony export */   ensuring: () => (/* binding */ ensuring),\n/* harmony export */   envGet: () => (/* binding */ envGet),\n/* harmony export */   envMake: () => (/* binding */ envMake),\n/* harmony export */   envMutate: () => (/* binding */ envMutate),\n/* harmony export */   envRefMake: () => (/* binding */ envRefMake),\n/* harmony export */   envSet: () => (/* binding */ envSet),\n/* harmony export */   envUnsafeMakeEmpty: () => (/* binding */ envUnsafeMakeEmpty),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   failSync: () => (/* binding */ failSync),\n/* harmony export */   failWith: () => (/* binding */ failWith),\n/* harmony export */   failWithSync: () => (/* binding */ failWithSync),\n/* harmony export */   failureIsAborted: () => (/* binding */ failureIsAborted),\n/* harmony export */   failureIsExpected: () => (/* binding */ failureIsExpected),\n/* harmony export */   failureIsUnexpected: () => (/* binding */ failureIsUnexpected),\n/* harmony export */   failureSquash: () => (/* binding */ failureSquash),\n/* harmony export */   failureWithTrace: () => (/* binding */ failureWithTrace),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   filterOrFail: () => (/* binding */ filterOrFail),\n/* harmony export */   filterOrFailWith: () => (/* binding */ filterOrFailWith),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   forever: () => (/* binding */ forever),\n/* harmony export */   fork: () => (/* binding */ fork),\n/* harmony export */   forkDaemon: () => (/* binding */ forkDaemon),\n/* harmony export */   forkIn: () => (/* binding */ forkIn),\n/* harmony export */   forkScoped: () => (/* binding */ forkScoped),\n/* harmony export */   fromEither: () => (/* binding */ fromEither),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   fromResult: () => (/* binding */ fromResult),\n/* harmony export */   fromResultSync: () => (/* binding */ fromResultSync),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEnvRef: () => (/* binding */ getEnvRef),\n/* harmony export */   ignore: () => (/* binding */ ignore),\n/* harmony export */   ignoreLogged: () => (/* binding */ ignoreLogged),\n/* harmony export */   interruptible: () => (/* binding */ interruptible),\n/* harmony export */   isHandle: () => (/* binding */ isHandle),\n/* harmony export */   isMicro: () => (/* binding */ isMicro),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   locally: () => (/* binding */ locally),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapError: () => (/* binding */ mapError),\n/* harmony export */   mapFailure: () => (/* binding */ mapFailure),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   matchFailure: () => (/* binding */ matchFailure),\n/* harmony export */   matchFailureMicro: () => (/* binding */ matchFailureMicro),\n/* harmony export */   matchMicro: () => (/* binding */ matchMicro),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   onAbort: () => (/* binding */ onAbort),\n/* harmony export */   onFailure: () => (/* binding */ onFailure),\n/* harmony export */   onResult: () => (/* binding */ onResult),\n/* harmony export */   onResultIf: () => (/* binding */ onResultIf),\n/* harmony export */   option: () => (/* binding */ option),\n/* harmony export */   orDie: () => (/* binding */ orDie),\n/* harmony export */   orElseSucceed: () => (/* binding */ orElseSucceed),\n/* harmony export */   promise: () => (/* binding */ promise),\n/* harmony export */   provideContext: () => (/* binding */ provideContext),\n/* harmony export */   provideScope: () => (/* binding */ provideScope),\n/* harmony export */   provideService: () => (/* binding */ provideService),\n/* harmony export */   provideServiceMicro: () => (/* binding */ provideServiceMicro),\n/* harmony export */   race: () => (/* binding */ race),\n/* harmony export */   raceAll: () => (/* binding */ raceAll),\n/* harmony export */   raceAllFirst: () => (/* binding */ raceAllFirst),\n/* harmony export */   raceFirst: () => (/* binding */ raceFirst),\n/* harmony export */   repeat: () => (/* binding */ repeat),\n/* harmony export */   repeatResult: () => (/* binding */ repeatResult),\n/* harmony export */   resultIsAborted: () => (/* binding */ resultIsAborted),\n/* harmony export */   resultIsFailure: () => (/* binding */ resultIsFailure),\n/* harmony export */   resultIsFailureExpected: () => (/* binding */ resultIsFailureExpected),\n/* harmony export */   resultIsFailureUnexpected: () => (/* binding */ resultIsFailureUnexpected),\n/* harmony export */   resultIsSuccess: () => (/* binding */ resultIsSuccess),\n/* harmony export */   resultVoid: () => (/* binding */ resultVoid),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   runFork: () => (/* binding */ runFork),\n/* harmony export */   runPromise: () => (/* binding */ runPromise),\n/* harmony export */   runPromiseResult: () => (/* binding */ runPromiseResult),\n/* harmony export */   runSymbol: () => (/* binding */ runSymbol),\n/* harmony export */   runSync: () => (/* binding */ runSync),\n/* harmony export */   runSyncResult: () => (/* binding */ runSyncResult),\n/* harmony export */   sandbox: () => (/* binding */ sandbox),\n/* harmony export */   scope: () => (/* binding */ scope),\n/* harmony export */   scopeMake: () => (/* binding */ scopeMake),\n/* harmony export */   scopeUnsafeMake: () => (/* binding */ scopeUnsafeMake),\n/* harmony export */   scoped: () => (/* binding */ scoped),\n/* harmony export */   service: () => (/* binding */ service),\n/* harmony export */   serviceOption: () => (/* binding */ serviceOption),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   succeed: () => (/* binding */ succeed),\n/* harmony export */   succeedNone: () => (/* binding */ succeedNone),\n/* harmony export */   succeedSome: () => (/* binding */ succeedSome),\n/* harmony export */   suspend: () => (/* binding */ suspend),\n/* harmony export */   sync: () => (/* binding */ sync),\n/* harmony export */   tap: () => (/* binding */ tap),\n/* harmony export */   tapExpected: () => (/* binding */ tapExpected),\n/* harmony export */   tapFailure: () => (/* binding */ tapFailure),\n/* harmony export */   tapFailureIf: () => (/* binding */ tapFailureIf),\n/* harmony export */   tapUnexpected: () => (/* binding */ tapUnexpected),\n/* harmony export */   timeout: () => (/* binding */ timeout),\n/* harmony export */   timeoutOrElse: () => (/* binding */ timeoutOrElse),\n/* harmony export */   \"try\": () => (/* binding */ try_),\n/* harmony export */   tryPromise: () => (/* binding */ tryPromise),\n/* harmony export */   uninterruptible: () => (/* binding */ uninterruptible),\n/* harmony export */   uninterruptibleMask: () => (/* binding */ uninterruptibleMask),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   when: () => (/* binding */ when),\n/* harmony export */   withConcurrency: () => (/* binding */ withConcurrency),\n/* harmony export */   withTrace: () => (/* binding */ withTrace),\n/* harmony export */   yieldFlush: () => (/* binding */ yieldFlush),\n/* harmony export */   yieldNow: () => (/* binding */ yieldNow),\n/* harmony export */   zip: () => (/* binding */ zip),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Context_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Context.js */ \"(ssr)/./node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var _Effectable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Effectable.js\");\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_effectable_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _internal_singleShotGen_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/singleShotGen.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/singleShotGen.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Micro\");\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nconst runSymbol = /*#__PURE__*/Symbol.for(\"effect/Micro/runSymbol\");\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nconst isMicro = u => typeof u === \"object\" && u !== null && TypeId in u;\n// ----------------------------------------------------------------------------\n// Failures\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst FailureTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Failure\");\nconst failureVariance = {\n  _E: _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity\n};\nclass FailureImpl extends globalThis.Error {\n  _tag;\n  traces;\n  [FailureTypeId];\n  constructor(_tag, originalError, traces) {\n    const failureName = `Failure${_tag}`;\n    let name;\n    let message;\n    let stack;\n    if (originalError instanceof globalThis.Error) {\n      name = `(${failureName}) ${originalError.name}`;\n      message = originalError.message;\n      const messageLines = message.split(\"\\n\").length;\n      stack = originalError.stack ? `(${failureName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}` : `${name}: ${message}`;\n    } else {\n      name = failureName;\n      message = (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toStringUnknown)(originalError, 0);\n      stack = `${name}: ${message}`;\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`;\n    }\n    super(message);\n    this._tag = _tag;\n    this.traces = traces;\n    this[FailureTypeId] = failureVariance;\n    this.name = name;\n    this.stack = stack;\n  }\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_2__.pipeArguments)(this, arguments);\n  }\n  toString() {\n    return this.stack;\n  }\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.stack;\n  }\n}\nclass FailureExpectedImpl extends FailureImpl {\n  error;\n  constructor(error, traces = []) {\n    super(\"Expected\", error, traces);\n    this.error = error;\n  }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst FailureExpected = (error, traces = []) => new FailureExpectedImpl(error, traces);\nclass FailureUnexpectedImpl extends FailureImpl {\n  defect;\n  constructor(defect, traces = []) {\n    super(\"Unexpected\", defect, traces);\n    this.defect = defect;\n  }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst FailureUnexpected = (defect, traces = []) => new FailureUnexpectedImpl(defect, traces);\nclass FailureAbortedImpl extends FailureImpl {\n  constructor(traces = []) {\n    super(\"Aborted\", \"aborted\", traces);\n  }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst FailureAborted = (traces = []) => new FailureAbortedImpl(traces);\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst failureIsExpected = self => self._tag === \"Expected\";\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst failureIsUnexpected = self => self._tag === \"Unexpected\";\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst failureIsAborted = self => self._tag === \"Aborted\";\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst failureSquash = self => self._tag === \"Expected\" ? self.error : self._tag === \"Unexpected\" ? self.defect : self;\n/**\n * @since 3.4.0\n * @experimental\n * @category failure\n */\nconst failureWithTrace = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, trace) => {\n  if (self._tag === \"Expected\") {\n    return FailureExpected(self.error, [...self.traces, trace]);\n  } else if (self._tag === \"Unexpected\") {\n    return FailureUnexpected(self.defect, [...self.traces, trace]);\n  }\n  return FailureAborted([...self.traces, trace]);\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst ResultAborted = /*#__PURE__*/_Either_js__WEBPACK_IMPORTED_MODULE_3__.left( /*#__PURE__*/FailureAborted());\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst ResultSuccess = _Either_js__WEBPACK_IMPORTED_MODULE_3__.right;\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst ResultFail = e => _Either_js__WEBPACK_IMPORTED_MODULE_3__.left(FailureExpected(e));\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst ResultFailUnexpected = defect => _Either_js__WEBPACK_IMPORTED_MODULE_3__.left(FailureUnexpected(defect));\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst ResultFailWith = _Either_js__WEBPACK_IMPORTED_MODULE_3__.left;\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst resultIsSuccess = _Either_js__WEBPACK_IMPORTED_MODULE_3__.isRight;\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst resultIsFailure = _Either_js__WEBPACK_IMPORTED_MODULE_3__.isLeft;\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst resultIsAborted = self => resultIsFailure(self) && self.left._tag === \"Aborted\";\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst resultIsFailureExpected = self => resultIsFailure(self) && self.left._tag === \"Expected\";\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst resultIsFailureUnexpected = self => resultIsFailure(self) && self.left._tag === \"Unexpected\";\n/**\n * @since 3.4.0\n * @experimental\n * @category result\n */\nconst resultVoid = /*#__PURE__*/ResultSuccess(void 0);\n// ----------------------------------------------------------------------------\n// env\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst EnvTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Env\");\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst EnvRefTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/EnvRef\");\nconst EnvProto = {\n  [EnvTypeId]: {\n    _R: _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity\n  },\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_2__.pipeArguments)(this, arguments);\n  }\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envMake = refs => {\n  const self = Object.create(EnvProto);\n  self.refs = refs;\n  return self;\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envUnsafeMakeEmpty = () => {\n  const controller = new AbortController();\n  const refs = Object.create(null);\n  refs[currentAbortController.key] = controller;\n  refs[currentAbortSignal.key] = controller.signal;\n  return envMake(refs);\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envGet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, ref) => ref.key in self.refs ? self.refs[ref.key] : ref.initial);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envSet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, ref, value) => {\n  const refs = Object.assign(Object.create(null), self.refs);\n  refs[ref.key] = value;\n  return envMake(refs);\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst envMutate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => envMake(f(Object.assign(Object.create(null), self.refs))));\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst service = tag => make(function (env, onResult) {\n  onResult(ResultSuccess(_Context_js__WEBPACK_IMPORTED_MODULE_4__.get(envGet(env, currentContext), tag)));\n});\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst serviceOption = tag => make(function (env, onResult) {\n  onResult(ResultSuccess(_Context_js__WEBPACK_IMPORTED_MODULE_4__.getOption(envGet(env, currentContext), tag)));\n});\n/**\n * Retrieve the current value of the given `EnvRef`.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst getEnvRef = envRef => make((env, onResult) => onResult(_Either_js__WEBPACK_IMPORTED_MODULE_3__.right(envGet(env, envRef))));\n/**\n * Set the value of the given `EnvRef` for the duration of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst locally = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, fiberRef, value) => make((env, onResult) => self[runSymbol](envSet(env, fiberRef, value), onResult)));\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst context = () => getEnvRef(currentContext);\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst provideContext = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, provided) => make(function (env, onResult) {\n  const context = envGet(env, currentContext);\n  const nextEnv = envSet(env, currentContext, _Context_js__WEBPACK_IMPORTED_MODULE_4__.merge(context, provided));\n  self[runSymbol](nextEnv, onResult);\n}));\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst provideService = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, tag, service) => make(function (env, onResult) {\n  const context = envGet(env, currentContext);\n  const nextEnv = envSet(env, currentContext, _Context_js__WEBPACK_IMPORTED_MODULE_4__.add(context, tag, service));\n  self[runSymbol](nextEnv, onResult);\n}));\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nconst provideServiceMicro = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, tag, acquire) => flatMap(acquire, service => provideService(self, tag, service)));\n// ========================================================================\n// Env refs\n// ========================================================================\nconst EnvRefProto = {\n  [EnvRefTypeId]: EnvRefTypeId\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst envRefMake = (key, initial) => (0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_5__.globalValue)(key, () => {\n  const self = Object.create(EnvRefProto);\n  self.key = key;\n  self.initial = initial();\n  return self;\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentAbortController = /*#__PURE__*/envRefMake(\"effect/Micro/currentAbortController\", () => undefined);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentAbortSignal = /*#__PURE__*/envRefMake(\"effect/Micro/currentAbortSignal\", () => undefined);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentContext = /*#__PURE__*/envRefMake(\"effect/Micro/currentContext\", () => _Context_js__WEBPACK_IMPORTED_MODULE_4__.empty());\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentConcurrency = /*#__PURE__*/envRefMake(\"effect/Micro/currentConcurrency\", () => \"unbounded\");\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nconst currentMaxDepthBeforeYield = /*#__PURE__*/envRefMake(\"effect/Micro/currentMaxDepthBeforeYield\", () => 2048);\nconst currentInterruptible = /*#__PURE__*/envRefMake(\"effect/Micro/currentInterruptible\", () => true);\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n */\nconst withConcurrency = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, concurrency) => locally(self, currentConcurrency, concurrency));\n// ----------------------------------------------------------------------------\n// constructors\n// ----------------------------------------------------------------------------\nconst MicroProto = {\n  ..._Effectable_js__WEBPACK_IMPORTED_MODULE_6__.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: {\n    _A: _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity,\n    _E: _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity,\n    _R: _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity\n  },\n  [Symbol.iterator]() {\n    return new _internal_singleShotGen_js__WEBPACK_IMPORTED_MODULE_7__.SingleShotGen(new _Utils_js__WEBPACK_IMPORTED_MODULE_8__.YieldWrap(this));\n  }\n};\nconst microDepthState = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_5__.globalValue)(\"effect/Micro/microDepthState\", () => ({\n  depth: 0,\n  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial\n}));\nconst unsafeMake = run => {\n  const self = Object.create(MicroProto);\n  self[runSymbol] = run;\n  return self;\n};\nconst unsafeMakeOptions = (run, checkAbort) => unsafeMake(function execute(env, onResult) {\n  if (checkAbort && env.refs[currentInterruptible.key] !== false && env.refs[currentAbortSignal.key].aborted) {\n    return onResult(ResultAborted);\n  }\n  microDepthState.depth++;\n  if (microDepthState.depth === 1) {\n    microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield);\n  }\n  if (microDepthState.depth >= microDepthState.maxDepthBeforeYield) {\n    yieldAdd(() => execute(env, onResult));\n  } else {\n    try {\n      run(env, onResult);\n    } catch (err) {\n      onResult(ResultFailUnexpected(err));\n    }\n  }\n  microDepthState.depth--;\n});\n/**\n * A low-level constructor for creating a `Micro` effect. It takes a function\n * that receives an environment and a callback which should be called with the\n * result of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst make = run => unsafeMakeOptions(run, true);\n/**\n * Converts a `Result` into a `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fromResult = self => make(function (_env, onResult) {\n  onResult(self);\n});\n/**\n * Converts a lazy `Result` into a `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fromResultSync = self => make(function (_env, onResult) {\n  onResult(self());\n});\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst succeed = a => fromResult(ResultSuccess(a));\n/**\n * Creates a `Micro` effect that will succeed with `Option.Some` of the value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst succeedSome = a => succeed(_Option_js__WEBPACK_IMPORTED_MODULE_9__.some(a));\n/**\n * Creates a `Micro` effect that will succeed with `Option.None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst succeedNone = /*#__PURE__*/succeed( /*#__PURE__*/_Option_js__WEBPACK_IMPORTED_MODULE_9__.none());\n/**\n * Creates a `Micro` effect that will fail with the specified error.\n *\n * This will result in a `FailureExpected`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fail = e => fromResult(ResultFail(e));\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This will result in a `FailureExpected`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst failSync = e => make(function (_env, onResult) {\n  onResult(ResultFail(e()));\n});\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This will result in a `FailureUnexpected`, where the error is not tracked at\n * the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst die = defect => fromResult(ResultFailUnexpected(defect));\n/**\n * Creates a `Micro` effect that will fail with the specified `Failure`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst failWith = failure => fromResult(ResultFailWith(failure));\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `Failure`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst failWithSync = failure => fromResultSync(() => ResultFailWith(failure()));\n/**\n * Creates a `Micro` effect that will succeed with the lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with\n * `FailureUnexpected`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst sync = evaluate => make(function (_env, onResult) {\n  onResult(ResultSuccess(evaluate()));\n});\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fromOption = option => make(function (_env, onResult) {\n  onResult(option._tag === \"Some\" ? ResultSuccess(option.value) : ResultFail(new NoSuchElementException({})));\n});\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst fromEither = either => make(function (_env, onResult) {\n  onResult(either._tag === \"Right\" ? either : ResultFail(either.left));\n});\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst suspend = evaluate => make(function (env, onResult) {\n  evaluate()[runSymbol](env, onResult);\n});\nconst void_ = /*#__PURE__*/succeed(void 0);\n\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst async = register => make(function (env, onResult) {\n  let resumed = false;\n  const controller = register.length > 1 ? new AbortController() : undefined;\n  const signal = envGet(env, currentAbortSignal);\n  let cleanup = undefined;\n  function onAbort() {\n    if (cleanup) {\n      resume(uninterruptible(andThen(cleanup, fromResult(ResultAborted))));\n    } else {\n      resume(fromResult(ResultAborted));\n    }\n    if (controller !== undefined) {\n      controller.abort();\n    }\n  }\n  function resume(effect) {\n    if (resumed) {\n      return;\n    }\n    resumed = true;\n    signal.removeEventListener(\"abort\", onAbort);\n    effect[runSymbol](env, onResult);\n  }\n  cleanup = controller === undefined ? register(resume) : register(resume, controller.signal);\n  if (resumed) return;\n  signal.addEventListener(\"abort\", onAbort);\n});\nconst try_ = options => make(function (_env, onResult) {\n  try {\n    onResult(ResultSuccess(options.try()));\n  } catch (err) {\n    onResult(ResultFail(options.catch(err)));\n  }\n});\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will result in a\n * `FailureUnexpected`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst promise = evaluate => async(function (resume, signal) {\n  evaluate(signal).then(a => resume(succeed(a)), e => resume(die(e)));\n});\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\nconst tryPromise = options => async(function (resume, signal) {\n  try {\n    options.try(signal).then(a => resume(succeed(a)), e => resume(fail(options.catch(e))));\n  } catch (err) {\n    resume(fail(options.catch(err)));\n  }\n});\nconst yieldState = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_5__.globalValue)(\"effect/Micro/yieldState\", () => ({\n  tasks: [],\n  working: false\n}));\nconst yieldRunTasks = () => {\n  const tasks = yieldState.tasks;\n  yieldState.tasks = [];\n  for (let i = 0, len = tasks.length; i < len; i++) {\n    tasks[i]();\n  }\n};\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : f => setTimeout(f, 0);\nconst yieldAdd = task => {\n  yieldState.tasks.push(task);\n  if (!yieldState.working) {\n    yieldState.working = true;\n    setImmediate(() => {\n      yieldState.working = false;\n      yieldRunTasks();\n    });\n  }\n};\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst yieldNow = /*#__PURE__*/make(function (_env, onResult) {\n  yieldAdd(() => onResult(resultVoid));\n});\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst yieldFlush = /*#__PURE__*/sync(function () {\n  while (yieldState.tasks.length > 0) {\n    yieldRunTasks();\n  }\n});\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst never = /*#__PURE__*/async(function () {\n  const interval = setInterval(_Function_js__WEBPACK_IMPORTED_MODULE_0__.constVoid, 2147483646);\n  return sync(() => clearInterval(interval));\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nconst gen = (...args) => make(function (env, onResult) {\n  const iterator = args.length === 1 ? args[0]() : args[1].call(args[0]);\n  let running = false;\n  let value = undefined;\n  function run() {\n    running = true;\n    try {\n      let shouldContinue = true;\n      while (shouldContinue) {\n        const result = iterator.next(value);\n        if (result.done) {\n          return onResult(ResultSuccess(result.value));\n        }\n        shouldContinue = false;\n        (0,_Utils_js__WEBPACK_IMPORTED_MODULE_8__.yieldWrapGet)(result.value)[runSymbol](env, function (result) {\n          if (result._tag === \"Left\") {\n            onResult(result);\n          } else {\n            shouldContinue = true;\n            value = result.right;\n            if (!running) run();\n          }\n        });\n      }\n    } catch (err) {\n      onResult(ResultFailUnexpected(err));\n    }\n    running = false;\n  }\n  run();\n});\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst flatten = self => make(function (env, onResult) {\n  self[runSymbol](env, result => result._tag === \"Left\" ? onResult(result) : result.right[runSymbol](env, onResult));\n});\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make(function (env, onResult) {\n  self[runSymbol](env, function (result) {\n    onResult(result._tag === \"Left\" ? result : ResultSuccess(f(result.right)));\n  });\n}));\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst as = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, value) => map(self, _ => value));\n/**\n * Wrap the success value of this `Micro` effect in an `Option.Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst asSome = self => map(self, _Option_js__WEBPACK_IMPORTED_MODULE_9__.some);\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make(function (env, onResult) {\n  self[runSymbol](env, function (result) {\n    if (result._tag === \"Left\") {\n      return onResult(result);\n    }\n    f(result.right)[runSymbol](env, onResult);\n  });\n}));\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst flip = self => matchMicro(self, {\n  onFailure: succeed,\n  onSuccess: fail\n});\n/**\n * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n * a single api.\n *\n * It also allows you to pass in a `Micro` effect directly, which will be\n * executed after the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst andThen = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make(function (env, onResult) {\n  self[runSymbol](env, function (result) {\n    if (result._tag === \"Left\") {\n      return onResult(result);\n    } else if (envGet(env, currentAbortSignal).aborted) {\n      return onResult(ResultAborted);\n    }\n    const value = isMicro(f) ? f : typeof f === \"function\" ? f(result.right) : f;\n    if (isMicro(value)) {\n      value[runSymbol](env, onResult);\n    } else {\n      onResult(ResultSuccess(value));\n    }\n  });\n}));\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst tap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make(function (env, onResult) {\n  self[runSymbol](env, function (selfResult) {\n    if (selfResult._tag === \"Left\") {\n      return onResult(selfResult);\n    } else if (envGet(env, currentAbortSignal).aborted) {\n      return onResult(ResultAborted);\n    }\n    const value = isMicro(f) ? f : typeof f === \"function\" ? f(selfResult.right) : f;\n    if (isMicro(value)) {\n      value[runSymbol](env, function (tapResult) {\n        if (tapResult._tag === \"Left\") {\n          return onResult(tapResult);\n        }\n        onResult(selfResult);\n      });\n    } else {\n      onResult(selfResult);\n    }\n  });\n}));\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst asVoid = self => map(self, _ => void 0);\n/**\n * Access the `Result` of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst asResult = self => make(function (env, onResult) {\n  self[runSymbol](env, function (result) {\n    onResult(ResultSuccess(result));\n  });\n});\n/**\n * Replace the error type of the given `Micro` with the full `Failure` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nconst sandbox = self => catchFailure(self, failure => fail(failure));\nfunction forkSignal(env) {\n  const controller = new AbortController();\n  const parentSignal = envGet(env, currentAbortSignal);\n  function onAbort() {\n    controller.abort();\n    parentSignal.removeEventListener(\"abort\", onAbort);\n  }\n  parentSignal.addEventListener(\"abort\", onAbort);\n  const envWithSignal = envMutate(env, function (refs) {\n    refs[currentAbortController.key] = controller;\n    refs[currentAbortSignal.key] = controller.signal;\n    return refs;\n  });\n  return [envWithSignal, onAbort];\n}\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst raceAll = all => make(function (env, onResult) {\n  const [envWithSignal, onAbort] = forkSignal(env);\n  const effects = Array.from(all);\n  let len = effects.length;\n  let index = 0;\n  let done = 0;\n  let result = undefined;\n  const failures = [];\n  function onDone(result_) {\n    done++;\n    if (result_._tag === \"Right\" && result === undefined) {\n      len = index;\n      result = result_;\n      onAbort();\n    } else if (result_._tag === \"Left\") {\n      failures.push(result_.left);\n    }\n    if (done >= len) {\n      onResult(result ?? _Either_js__WEBPACK_IMPORTED_MODULE_3__.left(failures[0]));\n    }\n  }\n  for (; index < len; index++) {\n    effects[index][runSymbol](envWithSignal, onDone);\n  }\n});\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst raceAllFirst = all => make(function (env, onResult) {\n  const [envWithSignal, onAbort] = forkSignal(env);\n  const effects = Array.from(all);\n  let len = effects.length;\n  let index = 0;\n  let done = 0;\n  let result = undefined;\n  const failures = [];\n  function onDone(result_) {\n    done++;\n    if (result === undefined) {\n      len = index;\n      result = result_;\n      onAbort();\n    }\n    if (done >= len) {\n      onResult(result ?? _Either_js__WEBPACK_IMPORTED_MODULE_3__.left(failures[0]));\n    }\n  }\n  for (; index < len; index++) {\n    effects[index][runSymbol](envWithSignal, onDone);\n  }\n});\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst race = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => raceAll([self, that]));\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nconst raceFirst = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => raceAllFirst([self, that]));\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nconst zip = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(args => isMicro(args[1]), (self, that, options) => zipWith(self, that, (a, a2) => [a, a2], options));\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(args => isMicro(args[1]), (self, that, f, options) => {\n  if (options?.concurrent) {\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    return map(all([self, that], {\n      concurrency: \"unbounded\"\n    }), ([a, a2]) => f(a, a2));\n  }\n  return flatMap(self, a => map(that, a2 => f(a, a2)));\n});\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `Failure` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nconst filterOrFailWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(args => isMicro(args[0]), (self, refinement, orFailWith) => flatMap(self, a => refinement(a) ? succeed(a) : failWith(orFailWith(a))));\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nconst filterOrFail = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(args => isMicro(args[0]), (self, refinement, orFailWith) => flatMap(self, a => refinement(a) ? succeed(a) : fail(orFailWith(a))));\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nconst when = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, condition) => flatMap(isMicro(condition) ? condition : sync(condition), pass => pass ? asSome(self) : succeed(_Option_js__WEBPACK_IMPORTED_MODULE_9__.none())));\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `Result` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nconst repeatResult = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => make(function (env, onResult) {\n  const startedAt = options.delay ? Date.now() : 0;\n  let attempt = 0;\n  self[runSymbol](env, function loop(result) {\n    if (options.while !== undefined && !options.while(result)) {\n      return onResult(result);\n    } else if (options.times !== undefined && attempt >= options.times) {\n      return onResult(result);\n    }\n    attempt++;\n    let delayEffect = yieldNow;\n    if (options.delay !== undefined) {\n      const elapsed = Date.now() - startedAt;\n      const duration = options.delay(attempt, elapsed);\n      if (_Option_js__WEBPACK_IMPORTED_MODULE_9__.isNone(duration)) {\n        return onResult(result);\n      }\n      delayEffect = sleep(duration.value);\n    }\n    delayEffect[runSymbol](env, function (result) {\n      if (result._tag === \"Left\") {\n        return onResult(result);\n      }\n      self[runSymbol](env, loop);\n    });\n  });\n}));\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nconst repeat = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(args => isMicro(args[0]), (self, options) => repeatResult(self, {\n  ...options,\n  while: result => result._tag === \"Right\" && (options?.while === undefined || options.while(result.right))\n}));\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nconst forever = self => repeat(self);\n/**\n * Create a `DelayFn` that will generate a duration with an exponential backoff.\n *\n * @since 3.4.0\n * @experimental\n * @category delay fn\n */\nconst delayExponential = (baseMillis, factor = 2) => attempt => _Option_js__WEBPACK_IMPORTED_MODULE_9__.some(attempt ** factor * baseMillis);\n/**\n * Create a `DelayFn` that will generate a duration with fixed intervals.\n *\n * @since 3.4.0\n * @experimental\n * @category delay fn\n */\nconst delaySpaced = millis => _ => _Option_js__WEBPACK_IMPORTED_MODULE_9__.some(millis);\n/**\n * Transform a `DelayFn` to one that will have a duration that will never exceed\n * the specified maximum.\n *\n * @since 3.4.0\n * @experimental\n * @category delay fn\n */\nconst delayWithMax = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, max) => (attempt, elapsed) => _Option_js__WEBPACK_IMPORTED_MODULE_9__.map(self(attempt, elapsed), duration => Math.min(duration, max)));\n/**\n * Transform a `DelayFn` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.0\n * @experimental\n * @category delay fn\n */\nconst delayWithMaxElapsed = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, max) => (attempt, elapsed) => elapsed < max ? self(attempt, elapsed) : _Option_js__WEBPACK_IMPORTED_MODULE_9__.none());\n/**\n * Transform a `DelayFn` to one that will stop repeating after the specified\n * number of attempts.\n *\n * @since 3.4.0\n * @experimental\n * @category delay fn\n */\nconst delayWithRecurs = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => (attempt, elapsed) => _Option_js__WEBPACK_IMPORTED_MODULE_9__.filter(self(attempt, elapsed), () => attempt <= n));\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n/**\n * Catch the full `Failure` object of the given `Micro` effect, allowing you to\n * recover from any kind of failure.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchFailure = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => catchFailureIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_0__.constTrue, f));\n/**\n * Selectively catch a `Failure` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchFailureIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, refinement, f) => make(function (env, onResult) {\n  self[runSymbol](env, function (result) {\n    if (result._tag === \"Right\" || !refinement(result.left)) {\n      return onResult(result);\n    }\n    f(result.left)[runSymbol](env, onResult);\n  });\n}));\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected (`FailureExpected`) errors.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchExpected = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => catchFailureIf(self, failureIsExpected, failure => f(failure.error)));\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchUnexpected = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => catchFailureIf(self, failureIsUnexpected, failure => f(failure.defect)));\n/**\n * Perform a side effect using the full `Failure` object of the given `Micro`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst tapFailure = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => tapFailureIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_0__.constTrue, f));\n/**\n * Perform a side effect using if a `Failure` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst tapFailureIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, refinement, f) => catchFailureIf(self, refinement, failure => andThen(f(failure), failWith(failure))));\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst tapExpected = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => tapFailureIf(self, failureIsExpected, failure => f(failure.error)));\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst tapUnexpected = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => tapFailureIf(self, failureIsUnexpected, failure => f(failure.defect)));\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, predicate, f) => catchFailureIf(self, f => failureIsExpected(f) && predicate(f.error), failure => f(failure.error)));\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst catchTag = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, k, f) => catchIf(self, (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_10__.isTagged)(k), f));\n/**\n * Transform the full `Failure` object of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst mapFailure = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => catchFailure(self, failure => failWith(f(failure))));\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst mapError = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => catchExpected(self, error => fail(f(error))));\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst orDie = self => catchExpected(self, die);\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst orElseSucceed = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => catchExpected(self, _ => sync(f)));\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst ignore = self => matchMicro(self, {\n  onFailure: _ => void_,\n  onSuccess: _ => void_\n});\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst ignoreLogged = self => matchMicro(self, {\n  onFailure: failure => sync(() => console.error(failure)),\n  onSuccess: _ => void_\n});\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst option = self => match(self, {\n  onFailure: _ => _Option_js__WEBPACK_IMPORTED_MODULE_9__.none(),\n  onSuccess: _Option_js__WEBPACK_IMPORTED_MODULE_9__.some\n});\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst either = self => match(self, {\n  onFailure: _Either_js__WEBPACK_IMPORTED_MODULE_3__.left,\n  onSuccess: _Either_js__WEBPACK_IMPORTED_MODULE_3__.right\n});\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst retry = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(args => isMicro(args[0]), (self, options) => repeatResult(self, {\n  ...options,\n  while: result => result._tag === \"Left\" && result.left._tag === \"Expected\" && (options?.while === undefined || options.while(result.left.error))\n}));\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `Failure` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nconst withTrace = function () {\n  const prevLimit = globalThis.Error.stackTraceLimit;\n  globalThis.Error.stackTraceLimit = 2;\n  const error = new globalThis.Error();\n  globalThis.Error.stackTraceLimit = prevLimit;\n  function generate(name, failure) {\n    const stack = error.stack;\n    if (!stack) {\n      return failure;\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\");\n    if (!line) {\n      return failure;\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/);\n    return failureWithTrace(failure, `at ${name} (${lineMatch ? lineMatch[1] : line})`);\n  }\n  const f = name => self => unsafeMakeOptions(function (env, onResult) {\n    self[runSymbol](env, function (result) {\n      onResult(result._tag === \"Left\" ? _Either_js__WEBPACK_IMPORTED_MODULE_3__.left(generate(name, result.left)) : result);\n    });\n  }, false);\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0]);\n  }\n  return f(arguments[0]);\n};\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nconst matchFailureMicro = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => make(function (env, onResult) {\n  self[runSymbol](env, function (result) {\n    try {\n      const next = result._tag === \"Left\" ? options.onFailure(result.left) : options.onSuccess(result.right);\n      next[runSymbol](env, onResult);\n    } catch (err) {\n      onResult(ResultFailUnexpected(err));\n    }\n  });\n}));\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nconst matchFailure = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => matchFailureMicro(self, {\n  onFailure: failure => sync(() => options.onFailure(failure)),\n  onSuccess: value => sync(() => options.onSuccess(value))\n}));\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nconst matchMicro = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => matchFailureMicro(self, {\n  onFailure: failure => failure._tag === \"Expected\" ? options.onFailure(failure.error) : failWith(failure),\n  onSuccess: options.onSuccess\n}));\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => matchMicro(self, {\n  onFailure: error => sync(() => options.onFailure(error)),\n  onSuccess: value => sync(() => options.onSuccess(value))\n}));\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst sleep = millis => async(function (resume) {\n  const timeout = setTimeout(function () {\n    resume(void_);\n  }, millis);\n  return sync(() => {\n    return clearTimeout(timeout);\n  });\n});\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst delay = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, millis) => andThen(sleep(millis), self));\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst timeoutOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout)));\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nconst timeout = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, millis) => raceFirst(asSome(self), as(interruptible(sleep(millis)), _Option_js__WEBPACK_IMPORTED_MODULE_9__.none())));\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst MicroScopeTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/MicroScope\");\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst MicroScope = /*#__PURE__*/_Context_js__WEBPACK_IMPORTED_MODULE_4__.GenericTag(\"effect/Micro/MicroScope\");\nclass ScopeImpl {\n  [MicroScopeTypeId];\n  state = {\n    _tag: \"Open\",\n    finalizers: new Set()\n  };\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId;\n  }\n  unsafeAddFinalizer(finalizer) {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer);\n    }\n  }\n  addFinalizer(finalizer) {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer);\n        return void_;\n      }\n      return finalizer(this.state.result);\n    });\n  }\n  unsafeRemoveFinalizer(finalizer) {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer);\n    }\n  }\n  close(result) {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse();\n        this.state = {\n          _tag: \"Closed\",\n          result\n        };\n        return flatMap(forEach(finalizers, finalizer => asResult(finalizer(result))), results => asVoid(fromResult(_Either_js__WEBPACK_IMPORTED_MODULE_3__.all(results))));\n      }\n      return void_;\n    });\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new ScopeImpl();\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state;\n        return newScope;\n      }\n      function fin(result) {\n        return newScope.close(result);\n      }\n      this.state.finalizers.add(fin);\n      newScope.unsafeAddFinalizer(_ => sync(() => this.unsafeRemoveFinalizer(fin)));\n      return newScope;\n    });\n  }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scopeMake = /*#__PURE__*/sync(() => new ScopeImpl());\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scopeUnsafeMake = () => new ScopeImpl();\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scope = /*#__PURE__*/service(MicroScope);\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst provideScope = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, scope) => provideService(self, MicroScope, scope));\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst scoped = self => suspend(function () {\n  const scope = new ScopeImpl();\n  return onResult(provideService(self, MicroScope, scope), result => scope.close(result));\n});\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst acquireRelease = (acquire, release) => uninterruptible(flatMap(scope, scope => tap(acquire, a => scope.addFinalizer(result => release(a, result)))));\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst addFinalizer = finalizer => flatMap(scope, scope => scope.addFinalizer(finalizer));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `Result` of the executed effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst onResult = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => onResultIf(self, _Function_js__WEBPACK_IMPORTED_MODULE_0__.constTrue, f));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst onResultIf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, refinement, f) => uninterruptibleMask(restore => make(function (env, onResult) {\n  restore(self)[runSymbol](env, function (result) {\n    if (!refinement(result)) {\n      return onResult(result);\n    }\n    f(result)[runSymbol](env, function (finalizerResult) {\n      if (finalizerResult._tag === \"Left\") {\n        return onResult(finalizerResult);\n      }\n      onResult(result);\n    });\n  });\n})));\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst ensuring = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, finalizer) => onResult(self, _ => finalizer));\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `Failure` of the executed effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst onFailure = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => onResultIf(self, resultIsFailure, result => f(result.left)));\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst onAbort = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, finalizer) => onResultIf(self, resultIsAborted, _ => finalizer));\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nconst acquireUseRelease = (acquire, use, release) => uninterruptibleMask(restore => flatMap(acquire, a => flatMap(asResult(restore(use(a))), result => andThen(release(a, result), fromResult(result)))));\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nconst abort = /*#__PURE__*/make(function (env, onResult) {\n  const controller = envGet(env, currentAbortController);\n  controller.abort();\n  onResult(ResultAborted);\n});\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nconst uninterruptible = self => unsafeMakeOptions(function (env, onResult) {\n  const nextEnv = envMutate(env, function (env) {\n    env[currentInterruptible.key] = false;\n    env[currentAbortSignal.key] = new AbortController().signal;\n    return env;\n  });\n  self[runSymbol](nextEnv, onResult);\n}, false);\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n */\nconst uninterruptibleMask = f => unsafeMakeOptions((env, onResult) => {\n  const isInterruptible = envGet(env, currentInterruptible);\n  const effect = isInterruptible ? f(interruptible) : f(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n  const nextEnv = isInterruptible ? envMutate(env, function (env) {\n    env[currentInterruptible.key] = false;\n    env[currentAbortSignal.key] = new AbortController().signal;\n    return env;\n  }) : env;\n  effect[runSymbol](nextEnv, onResult);\n}, false);\n/**\n * Wrap the given `Micro` effect in an interruptible region, allowing the effect\n * to be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nconst interruptible = self => make((env, onResult) => {\n  const isInterruptible = envGet(env, currentInterruptible);\n  let newEnv = env;\n  if (!isInterruptible) {\n    const controller = envGet(env, currentAbortController);\n    newEnv = envMutate(env, function (env) {\n      env[currentInterruptible.key] = true;\n      env[currentAbortSignal.key] = controller.signal;\n      return env;\n    });\n  }\n  self[runSymbol](newEnv, onResult);\n});\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst all = (arg, options) => {\n  if (Array.isArray(arg) || (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_10__.isIterable)(arg)) {\n    return forEach(arg, _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity, options);\n  } else if (options?.discard) {\n    return forEach(Object.values(arg), _Function_js__WEBPACK_IMPORTED_MODULE_0__.identity, options);\n  }\n  return suspend(() => {\n    const out = {};\n    return as(forEach(Object.entries(arg), ([key, effect]) => map(effect, value => {\n      out[key] = value;\n    }), {\n      discard: true,\n      concurrency: options?.concurrency\n    }), out);\n  });\n};\n/**\n * For each element of the provided iterable, run the effect and collect the results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run in\n * parallel. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst forEach = (iterable, f, options) => make(function (env, onResult) {\n  const concurrencyOption = options?.concurrency === \"inherit\" ? envGet(env, currentConcurrency) : options?.concurrency ?? 1;\n  const concurrency = concurrencyOption === \"unbounded\" ? Number.POSITIVE_INFINITY : Math.max(1, concurrencyOption);\n  // abort\n  const [envWithSignal, onAbort] = forkSignal(env);\n  // iterate\n  let failure = undefined;\n  const items = Array.from(iterable);\n  let length = items.length;\n  const out = options?.discard ? undefined : new Array(length);\n  let index = 0;\n  let inProgress = 0;\n  let doneCount = 0;\n  let pumping = false;\n  function pump() {\n    pumping = true;\n    while (inProgress < concurrency && index < length) {\n      const currentIndex = index;\n      const item = items[currentIndex];\n      index++;\n      inProgress++;\n      try {\n        f(item, currentIndex)[runSymbol](envWithSignal, function (result) {\n          if (result._tag === \"Left\") {\n            if (failure === undefined) {\n              failure = result;\n              length = index;\n              onAbort();\n            }\n          } else if (out !== undefined) {\n            out[currentIndex] = result.right;\n          }\n          doneCount++;\n          inProgress--;\n          if (doneCount === length) {\n            onResult(failure ?? _Either_js__WEBPACK_IMPORTED_MODULE_3__.right(out));\n          } else if (!pumping && inProgress < concurrency) {\n            pump();\n          }\n        });\n      } catch (err) {\n        failure = ResultFailUnexpected(err);\n        length = index;\n        onAbort();\n      }\n    }\n    pumping = false;\n  }\n  pump();\n});\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst filter = (iterable, f, options) => filterMap(iterable, a => map(f(a), pass => {\n  pass = options?.negate ? !pass : pass;\n  return pass ? _Option_js__WEBPACK_IMPORTED_MODULE_9__.some(a) : _Option_js__WEBPACK_IMPORTED_MODULE_9__.none();\n}));\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nconst filterMap = (iterable, f, options) => suspend(() => {\n  const out = [];\n  return as(forEach(iterable, a => map(f(a), o => {\n    if (o._tag === \"Some\") {\n      out.push(o.value);\n    }\n  }), {\n    discard: true,\n    concurrency: options?.concurrency\n  }), out);\n});\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nconst Do = /*#__PURE__*/succeed({});\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bindTo(map);\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.bind(map, flatMap);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_11__.let_(map);\n\n// ----------------------------------------------------------------------------\n// handle & forking\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst HandleTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Handle\");\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst isHandle = u => typeof u === \"object\" && u !== null && HandleTypeId in u;\nclass HandleImpl {\n  parentSignal;\n  [HandleTypeId];\n  observers = new Set();\n  _result = undefined;\n  _controller;\n  isRoot;\n  constructor(parentSignal, controller) {\n    this.parentSignal = parentSignal;\n    this[HandleTypeId] = HandleTypeId;\n    this.isRoot = controller !== undefined;\n    this._controller = controller ?? new AbortController();\n    if (!this.isRoot) {\n      parentSignal.addEventListener(\"abort\", this.unsafeAbort);\n    }\n  }\n  unsafePoll() {\n    return this._result ?? null;\n  }\n  unsafeAbort = () => {\n    this._controller.abort();\n  };\n  emit(result) {\n    if (this._result) {\n      return;\n    }\n    this._result = result;\n    if (!this.isRoot) {\n      this.parentSignal.removeEventListener(\"abort\", this.unsafeAbort);\n    }\n    this.observers.forEach(observer => observer(result));\n    this.observers.clear();\n  }\n  addObserver(observer) {\n    if (this._result) {\n      return observer(this._result);\n    }\n    this.observers.add(observer);\n  }\n  removeObserver(observer) {\n    this.observers.delete(observer);\n  }\n  get await() {\n    return suspend(() => {\n      if (this._result) {\n        return succeed(this._result);\n      }\n      return async(resume => {\n        function observer(result) {\n          resume(succeed(result));\n        }\n        this.addObserver(observer);\n        return sync(() => {\n          this.removeObserver(observer);\n        });\n      });\n    });\n  }\n  get join() {\n    return flatMap(this.await, fromResult);\n  }\n  get abort() {\n    return suspend(() => {\n      this.unsafeAbort();\n      return this.await;\n    });\n  }\n}\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst fork = self => make(function (env, onResult) {\n  const signal = envGet(env, currentAbortSignal);\n  const handle = new HandleImpl(signal);\n  const nextEnv = envMutate(env, map => {\n    map[currentAbortController.key] = handle._controller;\n    map[currentAbortSignal.key] = handle._controller.signal;\n    return map;\n  });\n  yieldAdd(() => {\n    self[runSymbol](nextEnv, result => {\n      handle.emit(result);\n    });\n  });\n  onResult(_Either_js__WEBPACK_IMPORTED_MODULE_3__.right(handle));\n});\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst forkDaemon = self => make(function (env, onResult) {\n  const controller = new AbortController();\n  const handle = new HandleImpl(controller.signal, controller);\n  const nextEnv = envMutate(env, map => {\n    map[currentAbortController.key] = controller;\n    map[currentAbortSignal.key] = controller.signal;\n    return map;\n  });\n  yieldAdd(() => {\n    self[runSymbol](nextEnv, result => {\n      handle.emit(result);\n    });\n  });\n  onResult(_Either_js__WEBPACK_IMPORTED_MODULE_3__.right(handle));\n});\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst forkIn = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, scope) => uninterruptibleMask(restore => flatMap(scope.fork, scope => tap(restore(forkDaemon(onResult(self, result => scope.close(result)))), fiber => scope.addFinalizer(_ => asVoid(fiber.abort))))));\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nconst forkScoped = self => flatMap(scope, scope => forkIn(self, scope));\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n/**\n * Execute the `Micro` effect and return a `Handle` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((result) => {\n *   console.log(result)\n * })\n */\nconst runFork = (effect, options) => {\n  const controller = new AbortController();\n  const refs = Object.create(null);\n  refs[currentAbortController.key] = controller;\n  refs[currentAbortSignal.key] = controller.signal;\n  const env = envMake(refs);\n  const handle = new HandleImpl(controller.signal, controller);\n  effect[runSymbol](envSet(env, currentAbortSignal, handle._controller.signal), result => {\n    handle.emit(result);\n    if (options?.signal) {\n      options.signal.removeEventListener(\"abort\", handle.unsafeAbort);\n    }\n  });\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      handle.unsafeAbort();\n    } else {\n      options.signal.addEventListener(\"abort\", handle.unsafeAbort, {\n        once: true\n      });\n    }\n  }\n  return handle;\n};\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `Result` of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nconst runPromiseResult = (effect, options) => new Promise((resolve, _reject) => {\n  const handle = runFork(effect, options);\n  handle.addObserver(resolve);\n});\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nconst runPromise = (effect, options) => runPromiseResult(effect, options).then(result => {\n  if (result._tag === \"Left\") {\n    throw result.left;\n  }\n  return result.right;\n});\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `Result`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * FailureUnexpected containing the `Handle`.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nconst runSyncResult = effect => {\n  const handle = runFork(effect);\n  while (yieldState.tasks.length > 0) {\n    yieldRunTasks();\n  }\n  const result = handle.unsafePoll();\n  if (result === null) {\n    return ResultFailUnexpected(handle);\n  }\n  return result;\n};\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nconst runSync = effect => {\n  const result = runSyncResult(effect);\n  if (result._tag === \"Left\") {\n    throw result.left;\n  }\n  return result.right;\n};\nconst YieldableError = /*#__PURE__*/function () {\n  class YieldableError extends globalThis.Error {\n    [runSymbol](_env, onResult) {\n      onResult(ResultFail(this));\n    }\n    toString() {\n      return this.message ? `${this.name}: ${this.message}` : this.name;\n    }\n    toJSON() {\n      return {\n        ...this\n      };\n    }\n    [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n      const stack = this.stack;\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`;\n      }\n      return this.toString();\n    }\n  }\n  Object.assign(YieldableError.prototype, MicroProto, _internal_effectable_js__WEBPACK_IMPORTED_MODULE_12__.StructuralPrototype);\n  return YieldableError;\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nconst Error = /*#__PURE__*/function () {\n  return class extends YieldableError {\n    constructor(args) {\n      super();\n      if (args) {\n        Object.assign(this, args);\n      }\n    }\n  };\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nconst TaggedError = tag => {\n  class Base extends Error {\n    _tag = tag;\n  }\n  ;\n  Base.prototype.name = tag;\n  return Base;\n};\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nclass NoSuchElementException extends TaggedError(\"NoSuchElementException\") {}\n//# sourceMappingURL=Micro.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Micro.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Option.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Option.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Do: () => (/* binding */ Do),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   andThen: () => (/* binding */ andThen),\n/* harmony export */   ap: () => (/* binding */ ap),\n/* harmony export */   as: () => (/* binding */ as),\n/* harmony export */   asVoid: () => (/* binding */ asVoid),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   composeK: () => (/* binding */ composeK),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   containsWith: () => (/* binding */ containsWith),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   firstSomeOf: () => (/* binding */ firstSomeOf),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   flatMapNullable: () => (/* binding */ flatMapNullable),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   fromIterable: () => (/* binding */ fromIterable),\n/* harmony export */   fromNullable: () => (/* binding */ fromNullable),\n/* harmony export */   gen: () => (/* binding */ gen),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getOrElse: () => (/* binding */ getOrElse),\n/* harmony export */   getOrNull: () => (/* binding */ getOrNull),\n/* harmony export */   getOrThrow: () => (/* binding */ getOrThrow),\n/* harmony export */   getOrThrowWith: () => (/* binding */ getOrThrowWith),\n/* harmony export */   getOrUndefined: () => (/* binding */ getOrUndefined),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isNone: () => (/* binding */ isNone),\n/* harmony export */   isOption: () => (/* binding */ isOption),\n/* harmony export */   isSome: () => (/* binding */ isSome),\n/* harmony export */   \"let\": () => (/* binding */ let_),\n/* harmony export */   lift2: () => (/* binding */ lift2),\n/* harmony export */   liftNullable: () => (/* binding */ liftNullable),\n/* harmony export */   liftPredicate: () => (/* binding */ liftPredicate),\n/* harmony export */   liftThrowable: () => (/* binding */ liftThrowable),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   orElseEither: () => (/* binding */ orElseEither),\n/* harmony export */   orElseSome: () => (/* binding */ orElseSome),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   reduceCompact: () => (/* binding */ reduceCompact),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   tap: () => (/* binding */ tap),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toRefinement: () => (/* binding */ toRefinement),\n/* harmony export */   \"void\": () => (/* binding */ void_),\n/* harmony export */   zipLeft: () => (/* binding */ zipLeft),\n/* harmony export */   zipRight: () => (/* binding */ zipRight),\n/* harmony export */   zipWith: () => (/* binding */ zipWith)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/doNotation.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\");\n/* harmony import */ var _internal_either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/either.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/either.js\");\n/* harmony import */ var _internal_option_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n\n\n\n\n\n\n\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Option\");\n/**\n * Creates a new `Option` that represents the absence of a value.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst none = () => _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.none;\n/**\n * Creates a new `Option` that wraps the given value.\n *\n * @param value - The value to wrap.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst some = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.some;\n/**\n * Tests if a value is a `Option`.\n *\n * @param input - The value to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isOption(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isOption(Option.none()), true)\n * assert.deepStrictEqual(Option.isOption({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isOption = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isOption;\n/**\n * Determine if a `Option` is a `None`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isNone(Option.some(1)), false)\n * assert.deepStrictEqual(Option.isNone(Option.none()), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNone = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isNone;\n/**\n * Determine if a `Option` is a `Some`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isSome(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isSome(Option.none()), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isSome = _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.isSome;\n/**\n * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n * function when passed the `Option`'s value.\n *\n * @param self - The `Option` to match\n * @param onNone - The value to be returned if the `Option` is `None`\n * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a some containing 1'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nconst match = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, {\n  onNone,\n  onSome\n}) => isNone(self) ? onNone() : onSome(self.value));\n/**\n * Returns a type guard from a `Option` returning function.\n * This function ensures that a type guard definition is type-safe.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parsePositive = (n: number): Option.Option<number> =>\n *   n > 0 ? Option.some(n) : Option.none()\n *\n * const isPositive = Option.toRefinement(parsePositive)\n *\n * assert.deepStrictEqual(isPositive(1), true)\n * assert.deepStrictEqual(isPositive(-1), false)\n *\n * @category conversions\n * @since 2.0.0\n */\nconst toRefinement = f => a => isSome(f(a));\n/**\n * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`\n * if the `Iterable` is not empty, otherwise returns `None`.\n *\n * @param collection - The `Iterable` to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromIterable([1, 2, 3]), Option.some(1))\n * assert.deepStrictEqual(Option.fromIterable([]), Option.none())\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromIterable = collection => {\n  for (const a of collection) {\n    return some(a);\n  }\n  return none();\n};\n/**\n * Converts a `Either` to an `Option` discarding the error.\n *\n * Alias of {@link fromEither}.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Option.getRight(Either.left('err')), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getRight = _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getLeft(Either.right(\"ok\")), Option.none())\n * assert.deepStrictEqual(Option.getLeft(Either.left(\"a\")), Option.some(\"a\"))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getLeft = _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.getLeft;\n/**\n * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n *\n * @param self - The `Option` to get the value of.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone) => isNone(self) ? onNone() : self.value);\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.none()\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElse = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => isNone(self) ? that() : self);\n/**\n * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElseSome = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone) => isNone(self) ? some(onNone()) : self);\n/**\n * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n * which contains information about which of the two `Option`s has been chosen.\n *\n * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The second `Option` to be considered if the first `Option` is `None`.\n *\n * @category error handling\n * @since 2.0.0\n */\nconst orElseEither = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => isNone(self) ? map(that(), _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.right) : map(self, _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.left));\n/**\n * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.\n *\n * @param collection - An iterable collection of `Option` to be searched.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.firstSomeOf([Option.none(), Option.some(1), Option.some(2)]), Option.some(1))\n *\n * @category error handling\n * @since 2.0.0\n */\nconst firstSomeOf = collection => {\n  let out = none();\n  for (out of collection) {\n    if (isSome(out)) {\n      return out;\n    }\n  }\n  return out;\n};\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @param nullableValue - The nullable value to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromNullable(undefined), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(null), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(1), Option.some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst fromNullable = nullableValue => nullableValue == null ? none() : some(nullableValue);\n/**\n * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * assert.deepStrictEqual(parseOption('1'), Option.some(1))\n * assert.deepStrictEqual(parseOption('not a number'), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nconst liftNullable = f => (...a) => fromNullable(f(...a));\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrNull(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrNull(Option.none()), null)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrNull = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constNull);\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrUndefined(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrUndefined(Option.none()), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getOrUndefined = /*#__PURE__*/getOrElse(_Function_js__WEBPACK_IMPORTED_MODULE_1__.constUndefined);\n/**\n * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.\n *\n * This function is useful for any function that might throw an exception, allowing the developer to handle\n * the exception in a more functional way.\n *\n * @param f - the function that can throw exceptions.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * assert.deepStrictEqual(parse(\"1\"), Option.some(1))\n * assert.deepStrictEqual(parse(\"\"), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nconst liftThrowable = f => (...a) => {\n  try {\n    return some(f(...a));\n  } catch (e) {\n    return none();\n  }\n};\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Option` to extract the value from.\n * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getOrThrowWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, onNone) => {\n  if (isSome(self)) {\n    return self.value;\n  }\n  throw onNone();\n});\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Option` to extract the value from.\n * @throws `Error(\"getOrThrow called on a None\")`\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n *\n * @category conversions\n * @since 2.0.0\n */\nconst getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error(\"getOrThrow called on a None\"));\n/**\n * Maps the `Some` side of an `Option` value to a new `Option` value.\n *\n * @param self - An `Option` to map\n * @param f - The function to map over the value of the `Option`\n *\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : some(f(self.value)));\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.0.0\n */\nconst as = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, b) => map(self, () => b));\n/**\n * Maps the `Some` value of this `Option` to the `void` constant value.\n *\n * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.\n *\n * @category mapping\n * @since 2.0.0\n */\nconst asVoid = /*#__PURE__*/as(undefined);\nconst void_ = /*#__PURE__*/some(undefined);\n\n/**\n * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : f(self.value));\n/**\n * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst andThen = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => flatMap(self, a => {\n  const b = (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(f) ? f(a) : f;\n  return isOption(b) ? b : some(b);\n}));\n/**\n * This is `flatMap` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee1),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee2),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.none()\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst flatMapNullable = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : fromNullable(f(self.value)));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst flatten = /*#__PURE__*/flatMap(_Function_js__WEBPACK_IMPORTED_MODULE_1__.identity);\n/**\n * @category zipping\n * @since 2.0.0\n */\nconst zipRight = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => flatMap(self, () => that));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nconst composeK = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (afb, bfc) => a => flatMap(afb(a), bfc));\n/**\n * Sequences the specified `that` `Option` but ignores its value.\n *\n * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n *\n * @param that - The `Option` that will be ignored in the chain and discarded\n * @param self - The `Option` we care about\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zipLeft = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => tap(self, () => that));\n/**\n * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n * unless `f` returns `None`, in which case it returns `None`.\n *\n * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n *\n * @param f - Function to apply to the value of the `Option` if it is `Some`\n * @param self - The `Option` to apply the function to\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n *\n * @category sequencing\n * @since 2.0.0\n */\nconst tap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => flatMap(self, a => map(f(a), () => a)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = (self, that) => isSome(self) && isSome(that) ? some([self.value, that.value]) : none();\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = (self, collection) => {\n  if (isNone(self)) {\n    return none();\n  }\n  const out = [self.value];\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none();\n    }\n    out.push(o.value);\n  }\n  return some(out);\n};\n/**\n * Takes a structure of `Option`s and returns an `Option` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Option` will contain an array.\n *\n * @param fields - the struct of `Option`s to be sequenced.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.all([Option.some(1), Option.some(2)]), Option.some([1, 2]))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.some(\"hello\") }), Option.some({ a: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.none() }), Option.none())\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nconst all = input => {\n  if (Symbol.iterator in input) {\n    const out = [];\n    for (const o of input) {\n      if (isNone(o)) {\n        return none();\n      }\n      out.push(o.value);\n    }\n    return some(out);\n  }\n  const out = {};\n  for (const key of Object.keys(input)) {\n    const o = input[key];\n    if (isNone(o)) {\n      return none();\n    }\n    out[key] = o.value;\n  }\n  return some(out);\n};\n/**\n * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n *\n * @param self - The left-hand side of the zip operation\n * @param that - The right-hand side of the zip operation\n * @param f - The function used to combine the values of the two `Option`s\n *\n * @example\n * import { Option } from \"effect\"\n *\n * type Complex = [real: number, imaginary: number]\n *\n * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n *\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n *\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n *\n * @category zipping\n * @since 2.0.0\n */\nconst zipWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, that, f) => map(product(self, that), ([a, b]) => f(a, b)));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst ap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => zipWith(self, that, (f, a) => f(a)));\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n *\n * @param self - The Iterable of `Option<A>` to be reduced.\n * @param b - The initial value of the accumulator.\n * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n *\n * @category folding\n * @since 2.0.0\n */\nconst reduceCompact = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(3, (self, b, f) => {\n  let out = b;\n  for (const oa of self) {\n    if (isSome(oa)) {\n      out = f(out, oa.value);\n    }\n  }\n  return out;\n});\n/**\n * Transforms an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, the value is wrapped in an array.\n *\n * @param self - The `Option` to convert to an array.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.toArray(Option.some(1)), [1])\n * assert.deepStrictEqual(Option.toArray(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst toArray = self => isNone(self) ? [] : [self.value];\n/**\n * @category filtering\n * @since 2.0.0\n */\nconst partitionMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => {\n  if (isNone(self)) {\n    return [none(), none()];\n  }\n  const e = f(self.value);\n  return _internal_either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)];\n});\n/**\n * Maps over the value of an `Option` and filters out `None`s.\n *\n * Useful when in addition to filtering you also want to change the type of the `Option`.\n *\n * @param self - The `Option` to map over.\n * @param f - A function to apply to the value of the `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filterMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, f) => isNone(self) ? none() : f(self.value));\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @param predicate - A predicate function to apply to the `Option` value.\n * @param fb - The `Option` to filter.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * // predicate\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n *\n * // refinement\n * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filter = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, predicate) => filterMap(self, b => predicate(b) ? _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.some(b) : _internal_option_js__WEBPACK_IMPORTED_MODULE_0__.none));\n/**\n * @example\n * import { Option, Number } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.none()), true)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.some(1)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.none()), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(2)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(1)), true)\n *\n * @category equivalence\n * @since 2.0.0\n */\nconst getEquivalence = isEquivalent => _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value));\n/**\n * The `Order` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Order` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * const O = Option.getOrder(Number.Order)\n * assert.deepStrictEqual(O(Option.none(), Option.none()), 0)\n * assert.deepStrictEqual(O(Option.none(), Option.some(1)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.none()), 1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(2)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(1)), 0)\n *\n * @category sorting\n * @since 2.0.0\n */\nconst getOrder = O => _Order_js__WEBPACK_IMPORTED_MODULE_4__.make((self, that) => isSome(self) ? isSome(that) ? O(self.value, that.value) : 1 : -1);\n/**\n * Lifts a binary function into `Option`.\n *\n * @param f - The function to lift.\n *\n * @category lifting\n * @since 2.0.0\n */\nconst lift2 = f => (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, that) => zipWith(self, that, f));\n/**\n * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n * if the predicate returns `false`.\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getOption = Option.liftPredicate((n: number) => n >= 0)\n *\n * assert.deepStrictEqual(getOption(-1), Option.none())\n * assert.deepStrictEqual(getOption(1), Option.some(1))\n *\n * @category lifting\n * @since 2.0.0\n */\nconst liftPredicate = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (b, predicate) => predicate(b) ? some(b) : none());\n/**\n * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.\n *\n * @param equivalent - An `Equivalence` instance to compare values of the `Option`.\n * @param self - The `Option` to apply the comparison to.\n * @param a - The value to compare against the `Option`.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.containsWith(Number.Equivalence)(2)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.containsWith(Number.Equivalence)(2)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.containsWith(Number.Equivalence)(2)), false)\n *\n * @category elements\n * @since 2.0.0\n */\nconst containsWith = isEquivalent => (0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, a) => isNone(self) ? false : isEquivalent(self.value, a));\nconst _equivalence = /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_5__.equivalence();\n/**\n * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nconst contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * Check if a value in an `Option` type meets a certain predicate.\n *\n * @param self - The `Option` to check.\n * @param predicate - The condition to check.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n *\n * @since 2.0.0\n */\nconst exists = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_1__.dual)(2, (self, refinement) => isNone(self) ? false : refinement(self.value));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bindTo = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.bindTo(map);\nconst let_ = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.let_(map);\n\n/**\n * The \"do simulation\" in allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst bind = /*#__PURE__*/_internal_doNotation_js__WEBPACK_IMPORTED_MODULE_6__.bind(map, flatMap);\n/**\n * The \"do simulation\" in allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nconst Do = /*#__PURE__*/some({});\nconst adapter = /*#__PURE__*/_Utils_js__WEBPACK_IMPORTED_MODULE_7__.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */\nconst gen = (...args) => {\n  let f;\n  if (args.length === 1) {\n    f = args[0];\n  } else {\n    f = args[1].bind(args[0]);\n  }\n  const iterator = f(adapter);\n  let state = iterator.next();\n  if (state.done) {\n    return some(state.value);\n  } else {\n    let current = state.value;\n    if (_Utils_js__WEBPACK_IMPORTED_MODULE_7__.isGenKind(current)) {\n      current = current.value;\n    } else {\n      current = _Utils_js__WEBPACK_IMPORTED_MODULE_7__.yieldWrapGet(current);\n    }\n    if (isNone(current)) {\n      return current;\n    }\n    while (!state.done) {\n      state = iterator.next(current.value);\n      if (!state.done) {\n        current = state.value;\n        if (_Utils_js__WEBPACK_IMPORTED_MODULE_7__.isGenKind(current)) {\n          current = current.value;\n        } else {\n          current = _Utils_js__WEBPACK_IMPORTED_MODULE_7__.yieldWrapGet(current);\n        }\n        if (isNone(current)) {\n          return current;\n        }\n      }\n    }\n    return some(state.value);\n  }\n};\n//# sourceMappingURL=Option.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Order.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Order.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Date: () => (/* binding */ Date),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   combineAll: () => (/* binding */ combineAll),\n/* harmony export */   combineMany: () => (/* binding */ combineMany),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   greaterThan: () => (/* binding */ greaterThan),\n/* harmony export */   greaterThanOrEqualTo: () => (/* binding */ greaterThanOrEqualTo),\n/* harmony export */   lessThan: () => (/* binding */ lessThan),\n/* harmony export */   lessThanOrEqualTo: () => (/* binding */ lessThanOrEqualTo),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   reverse: () => (/* binding */ reverse),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   tuple: () => (/* binding */ tuple)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst make = compare => (self, that) => self === that ? 0 : compare(self, that);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst string = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst number = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst boolean = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nconst bigint = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @since 2.0.0\n */\nconst reverse = O => make((self, that) => O(that, self));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combine = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make((a1, a2) => {\n  const out = self(a1, a2);\n  if (out !== 0) {\n    return out;\n  }\n  return that(a1, a2);\n}));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineMany = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection) => make((a1, a2) => {\n  let out = self(a1, a2);\n  if (out !== 0) {\n    return out;\n  }\n  for (const O of collection) {\n    out = O(a1, a2);\n    if (out !== 0) {\n      return out;\n    }\n  }\n  return out;\n}));\n/**\n * @since 2.0.0\n */\nconst empty = () => make(() => 0);\n/**\n * @category combining\n * @since 2.0.0\n */\nconst combineAll = collection => combineMany(empty(), collection);\n/**\n * @category mapping\n * @since 2.0.0\n */\nconst mapInput = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => make((b1, b2) => self(f(b1), f(b2))));\n/**\n * @category instances\n * @since 2.0.0\n */\nconst Date = /*#__PURE__*/mapInput(number, date => date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => make(([xa, xb], [ya, yb]) => {\n  const o = self(xa, ya);\n  return o !== 0 ? o : that(xb, yb);\n}));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst all = collection => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length);\n    let collectionLength = 0;\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break;\n      }\n      const o = O(x[collectionLength], y[collectionLength]);\n      if (o !== 0) {\n        return o;\n      }\n      collectionLength++;\n    }\n    return 0;\n  });\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, collection) => {\n  const O = all(collection);\n  return make((x, y) => {\n    const o = self(x[0], y[0]);\n    return o !== 0 ? o : O(x.slice(1), y.slice(1));\n  });\n});\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst tuple = (...elements) => all(elements);\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst array = O => make((self, that) => {\n  const aLen = self.length;\n  const bLen = that.length;\n  const len = Math.min(aLen, bLen);\n  for (let i = 0; i < len; i++) {\n    const o = O(self[i], that[i]);\n    if (o !== 0) {\n      return o;\n    }\n  }\n  return number(aLen, bLen);\n});\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst struct = fields => {\n  const keys = Object.keys(fields);\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key]);\n      if (o !== 0) {\n        return o;\n      }\n    }\n    return 0;\n  });\n};\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nconst lessThan = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) === -1);\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nconst greaterThan = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) === 1);\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nconst lessThanOrEqualTo = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) !== 1);\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nconst greaterThanOrEqualTo = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => O(self, that) !== -1);\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nconst min = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => self === that || O(self, that) < 1 ? self : that);\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nconst max = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => self === that || O(self, that) > -1 ? self : that);\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nconst clamp = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => min(O)(options.maximum, max(O)(options.minimum, self)));\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nconst between = O => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, options) => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum));\n//# sourceMappingURL=Order.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL09yZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsa0RBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNPLGlDQUFpQyxrREFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLGtEQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixrREFBSTtBQUN4QztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsa0RBQUk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxzQkFBc0Isa0RBQUk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlCQUF5QixrREFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLGtEQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxrQ0FBa0Msa0RBQUk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGlCQUFpQixrREFBSTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08saUJBQWlCLGtEQUFJO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQSw2Q0FBNkMsd0JBQXdCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUJBQW1CLGtEQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxQkFBcUIsa0RBQUk7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vT3JkZXIuanM/ZDE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgT3JkZXJgIHR5cGUgY2xhc3Mgd2hpY2ggaXMgdXNlZCB0byBkZWZpbmUgYSB0b3RhbCBvcmRlcmluZyBvbiBzb21lIHR5cGUgYEFgLlxuICogQW4gb3JkZXIgaXMgZGVmaW5lZCBieSBhIHJlbGF0aW9uIGA8PWAsIHdoaWNoIG9iZXlzIHRoZSBmb2xsb3dpbmcgbGF3czpcbiAqXG4gKiAtIGVpdGhlciBgeCA8PSB5YCBvciBgeSA8PSB4YCAodG90YWxpdHkpXG4gKiAtIGlmIGB4IDw9IHlgIGFuZCBgeSA8PSB4YCwgdGhlbiBgeCA9PSB5YCAoYW50aXN5bW1ldHJ5KVxuICogLSBpZiBgeCA8PSB5YCBhbmQgYHkgPD0gemAsIHRoZW4gYHggPD0gemAgKHRyYW5zaXRpdml0eSlcbiAqXG4gKiBUaGUgdHJ1dGggdGFibGUgZm9yIGNvbXBhcmUgaXMgZGVmaW5lZCBhcyBmb2xsb3dzOlxuICpcbiAqIHwgYHggPD0geWAgfCBgeCA+PSB5YCB8IE9yZGVyaW5nIHwgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0gfCAtLS0tLS0tLSB8IC0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgYHRydWVgICAgfCBgdHJ1ZWAgICB8IGAwYCAgICAgIHwgY29ycmVzcG9uZHMgdG8geCA9PSB5IHxcbiAqIHwgYHRydWVgICAgfCBgZmFsc2VgICB8IGA8IDBgICAgIHwgY29ycmVzcG9uZHMgdG8geCA8IHkgIHxcbiAqIHwgYGZhbHNlYCAgfCBgdHJ1ZWAgICB8IGA+IDBgICAgIHwgY29ycmVzcG9uZHMgdG8geCA+IHkgIHxcbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0IHsgZHVhbCB9IGZyb20gXCIuL0Z1bmN0aW9uLmpzXCI7XG4vKipcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWFrZSA9IGNvbXBhcmUgPT4gKHNlbGYsIHRoYXQpID0+IHNlbGYgPT09IHRoYXQgPyAwIDogY29tcGFyZShzZWxmLCB0aGF0KTtcbi8qKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSAvKiNfX1BVUkVfXyovbWFrZSgoc2VsZiwgdGhhdCkgPT4gc2VsZiA8IHRoYXQgPyAtMSA6IDEpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG51bWJlciA9IC8qI19fUFVSRV9fKi9tYWtlKChzZWxmLCB0aGF0KSA9PiBzZWxmIDwgdGhhdCA/IC0xIDogMSk7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYm9vbGVhbiA9IC8qI19fUFVSRV9fKi9tYWtlKChzZWxmLCB0aGF0KSA9PiBzZWxmIDwgdGhhdCA/IC0xIDogMSk7XG4vKipcbiAqIEBjYXRlZ29yeSBpbnN0YW5jZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYmlnaW50ID0gLyojX19QVVJFX18qL21ha2UoKHNlbGYsIHRoYXQpID0+IHNlbGYgPCB0aGF0ID8gLTEgOiAxKTtcbi8qKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCByZXZlcnNlID0gTyA9PiBtYWtlKChzZWxmLCB0aGF0KSA9PiBPKHRoYXQsIHNlbGYpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb21iaW5lID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRoYXQpID0+IG1ha2UoKGExLCBhMikgPT4ge1xuICBjb25zdCBvdXQgPSBzZWxmKGExLCBhMik7XG4gIGlmIChvdXQgIT09IDApIHtcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHJldHVybiB0aGF0KGExLCBhMik7XG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgY29tYmluZU1hbnkgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgY29sbGVjdGlvbikgPT4gbWFrZSgoYTEsIGEyKSA9PiB7XG4gIGxldCBvdXQgPSBzZWxmKGExLCBhMik7XG4gIGlmIChvdXQgIT09IDApIHtcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIGZvciAoY29uc3QgTyBvZiBjb2xsZWN0aW9uKSB7XG4gICAgb3V0ID0gTyhhMSwgYTIpO1xuICAgIGlmIChvdXQgIT09IDApIHtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59KSk7XG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgZW1wdHkgPSAoKSA9PiBtYWtlKCgpID0+IDApO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29tYmluaW5nXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbWJpbmVBbGwgPSBjb2xsZWN0aW9uID0+IGNvbWJpbmVNYW55KGVtcHR5KCksIGNvbGxlY3Rpb24pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbWFwcGluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBJbnB1dCA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBmKSA9PiBtYWtlKChiMSwgYjIpID0+IHNlbGYoZihiMSksIGYoYjIpKSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaW5zdGFuY2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IERhdGUgPSAvKiNfX1BVUkVfXyovbWFwSW5wdXQobnVtYmVyLCBkYXRlID0+IGRhdGUuZ2V0VGltZSgpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmluZ1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9kdWN0ID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIHRoYXQpID0+IG1ha2UoKFt4YSwgeGJdLCBbeWEsIHliXSkgPT4ge1xuICBjb25zdCBvID0gc2VsZih4YSwgeWEpO1xuICByZXR1cm4gbyAhPT0gMCA/IG8gOiB0aGF0KHhiLCB5Yik7XG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgYWxsID0gY29sbGVjdGlvbiA9PiB7XG4gIHJldHVybiBtYWtlKCh4LCB5KSA9PiB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oeC5sZW5ndGgsIHkubGVuZ3RoKTtcbiAgICBsZXQgY29sbGVjdGlvbkxlbmd0aCA9IDA7XG4gICAgZm9yIChjb25zdCBPIG9mIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uTGVuZ3RoID49IGxlbikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IG8gPSBPKHhbY29sbGVjdGlvbkxlbmd0aF0sIHlbY29sbGVjdGlvbkxlbmd0aF0pO1xuICAgICAgaWYgKG8gIT09IDApIHtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgICB9XG4gICAgICBjb2xsZWN0aW9uTGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9KTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5pbmdcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgcHJvZHVjdE1hbnkgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgY29sbGVjdGlvbikgPT4ge1xuICBjb25zdCBPID0gYWxsKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gbWFrZSgoeCwgeSkgPT4ge1xuICAgIGNvbnN0IG8gPSBzZWxmKHhbMF0sIHlbMF0pO1xuICAgIHJldHVybiBvICE9PSAwID8gbyA6IE8oeC5zbGljZSgxKSwgeS5zbGljZSgxKSk7XG4gIH0pO1xufSk7XG4vKipcbiAqIFNpbWlsYXIgdG8gYFByb21pc2UuYWxsYCBidXQgb3BlcmF0ZXMgb24gYE9yZGVyYHMuXG4gKlxuICogYGBgXG4gKiBbT3JkZXI8QT4sIE9yZGVyPEI+LCAuLi5dIC0+IE9yZGVyPFtBLCBCLCAuLi5dPlxuICogYGBgXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGBPcmRlcmAgZm9yIGEgdHVwbGUgb2YgdmFsdWVzIGJhc2VkIG9uIHRoZSBnaXZlbiBgT3JkZXJgcyBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSB0dXBsZS5cbiAqIFRoZSByZXR1cm5lZCBgT3JkZXJgIGNvbXBhcmVzIHR3byB0dXBsZXMgb2YgdGhlIHNhbWUgdHlwZSBieSBhcHBseWluZyB0aGUgY29ycmVzcG9uZGluZyBgT3JkZXJgIHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgdHVwbGUuXG4gKiBJdCBpcyB1c2VmdWwgd2hlbiB5b3UgbmVlZCB0byBjb21wYXJlIHR3byB0dXBsZXMgb2YgdGhlIHNhbWUgdHlwZSBhbmQgeW91IGhhdmUgYSBzcGVjaWZpYyB3YXkgb2YgY29tcGFyaW5nIGVhY2ggZWxlbWVudFxuICogb2YgdGhlIHR1cGxlLlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0dXBsZSA9ICguLi5lbGVtZW50cykgPT4gYWxsKGVsZW1lbnRzKTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGBPcmRlcmAgZm9yIGFuIGFycmF5IG9mIHZhbHVlcyBiYXNlZCBvbiBhIGdpdmVuIGBPcmRlcmAgZm9yIHRoZSBlbGVtZW50cyBvZiB0aGUgYXJyYXkuXG4gKiBUaGUgcmV0dXJuZWQgYE9yZGVyYCBjb21wYXJlcyB0d28gYXJyYXlzIGJ5IGFwcGx5aW5nIHRoZSBnaXZlbiBgT3JkZXJgIHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXlzLlxuICogSWYgYWxsIGVsZW1lbnRzIGFyZSBlcXVhbCwgdGhlIGFycmF5cyBhcmUgdGhlbiBjb21wYXJlZCBiYXNlZCBvbiB0aGVpciBsZW5ndGguXG4gKiBJdCBpcyB1c2VmdWwgd2hlbiB5b3UgbmVlZCB0byBjb21wYXJlIHR3byBhcnJheXMgb2YgdGhlIHNhbWUgdHlwZSBhbmQgeW91IGhhdmUgYSBzcGVjaWZpYyB3YXkgb2YgY29tcGFyaW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkuXG4gKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGFycmF5ID0gTyA9PiBtYWtlKChzZWxmLCB0aGF0KSA9PiB7XG4gIGNvbnN0IGFMZW4gPSBzZWxmLmxlbmd0aDtcbiAgY29uc3QgYkxlbiA9IHRoYXQubGVuZ3RoO1xuICBjb25zdCBsZW4gPSBNYXRoLm1pbihhTGVuLCBiTGVuKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IG8gPSBPKHNlbGZbaV0sIHRoYXRbaV0pO1xuICAgIGlmIChvICE9PSAwKSB7XG4gICAgICByZXR1cm4gbztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlcihhTGVuLCBiTGVuKTtcbn0pO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgYE9yZGVyYCBmb3IgYSBzdHJ1Y3Qgb2YgdmFsdWVzIGJhc2VkIG9uIHRoZSBnaXZlbiBgT3JkZXJgc1xuICogZm9yIGVhY2ggcHJvcGVydHkgaW4gdGhlIHN0cnVjdC5cbiAqXG4gKiBAY2F0ZWdvcnkgY29tYmluYXRvcnNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc3RydWN0ID0gZmllbGRzID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkcyk7XG4gIHJldHVybiBtYWtlKChzZWxmLCB0aGF0KSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgY29uc3QgbyA9IGZpZWxkc1trZXldKHNlbGZba2V5XSwgdGhhdFtrZXldKTtcbiAgICAgIGlmIChvICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSk7XG59O1xuLyoqXG4gKiBUZXN0IHdoZXRoZXIgb25lIHZhbHVlIGlzIF9zdHJpY3RseSBsZXNzIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbiA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSA9PT0gLTEpO1xuLyoqXG4gKiBUZXN0IHdoZXRoZXIgb25lIHZhbHVlIGlzIF9zdHJpY3RseSBncmVhdGVyIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbiA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSA9PT0gMSk7XG4vKipcbiAqIFRlc3Qgd2hldGhlciBvbmUgdmFsdWUgaXMgX25vbi1zdHJpY3RseSBsZXNzIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbk9yRXF1YWxUbyA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSAhPT0gMSk7XG4vKipcbiAqIFRlc3Qgd2hldGhlciBvbmUgdmFsdWUgaXMgX25vbi1zdHJpY3RseSBncmVhdGVyIHRoYW5fIGFub3RoZXIuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbk9yRXF1YWxUbyA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gTyhzZWxmLCB0aGF0KSAhPT0gLTEpO1xuLyoqXG4gKiBUYWtlIHRoZSBtaW5pbXVtIG9mIHR3byB2YWx1ZXMuIElmIHRoZXkgYXJlIGNvbnNpZGVyZWQgZXF1YWwsIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBjaG9zZW4uXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtaW4gPSBPID0+IGR1YWwoMiwgKHNlbGYsIHRoYXQpID0+IHNlbGYgPT09IHRoYXQgfHwgTyhzZWxmLCB0aGF0KSA8IDEgPyBzZWxmIDogdGhhdCk7XG4vKipcbiAqIFRha2UgdGhlIG1heGltdW0gb2YgdHdvIHZhbHVlcy4gSWYgdGhleSBhcmUgY29uc2lkZXJlZCBlcXVhbCwgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGNob3Nlbi5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG1heCA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gc2VsZiA9PT0gdGhhdCB8fCBPKHNlbGYsIHRoYXQpID4gLTEgPyBzZWxmIDogdGhhdCk7XG4vKipcbiAqIENsYW1wIGEgdmFsdWUgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgT3JkZXIsIE51bWJlciB9IGZyb20gXCJlZmZlY3RcIlxuICpcbiAqIGNvbnN0IGNsYW1wID0gT3JkZXIuY2xhbXAoTnVtYmVyLk9yZGVyKSh7IG1pbmltdW06IDEsIG1heGltdW06IDUgfSlcbiAqXG4gKiBhc3NlcnQuZXF1YWwoY2xhbXAoMyksIDMpXG4gKiBhc3NlcnQuZXF1YWwoY2xhbXAoMCksIDEpXG4gKiBhc3NlcnQuZXF1YWwoY2xhbXAoNiksIDUpXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjbGFtcCA9IE8gPT4gZHVhbCgyLCAoc2VsZiwgb3B0aW9ucykgPT4gbWluKE8pKG9wdGlvbnMubWF4aW11bSwgbWF4KE8pKG9wdGlvbnMubWluaW11bSwgc2VsZikpKTtcbi8qKlxuICogVGVzdCB3aGV0aGVyIGEgdmFsdWUgaXMgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bSAoaW5jbHVzaXZlKS5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJldHdlZW4gPSBPID0+IGR1YWwoMiwgKHNlbGYsIG9wdGlvbnMpID0+ICFsZXNzVGhhbihPKShzZWxmLCBvcHRpb25zLm1pbmltdW0pICYmICFncmVhdGVyVGhhbihPKShzZWxmLCBvcHRpb25zLm1heGltdW0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9yZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Order.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Pipeable.js":
/*!**************************************************!*\
  !*** ./node_modules/effect/dist/esm/Pipeable.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pipeArguments: () => (/* binding */ pipeArguments)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */\n/**\n * @since 2.0.0\n */\nconst pipeArguments = (self, args) => {\n  switch (args.length) {\n    case 1:\n      return args[0](self);\n    case 2:\n      return args[1](args[0](self));\n    case 3:\n      return args[2](args[1](args[0](self)));\n    case 4:\n      return args[3](args[2](args[1](args[0](self))));\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))));\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))));\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))));\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))));\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))));\n    default:\n      {\n        let ret = self;\n        for (let i = 0, len = args.length; i < len; i++) {\n          ret = args[i](ret);\n        }\n        return ret;\n      }\n  }\n};\n//# sourceMappingURL=Pipeable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL1BpcGVhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vUGlwZWFibGUuanM/ZTMxYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG4vKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgY29uc3QgcGlwZUFyZ3VtZW50cyA9IChzZWxmLCBhcmdzKSA9PiB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYXJnc1swXShzZWxmKTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gYXJnc1sxXShhcmdzWzBdKHNlbGYpKTtcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gYXJnc1szXShhcmdzWzJdKGFyZ3NbMV0oYXJnc1swXShzZWxmKSkpKTtcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gYXJnc1s0XShhcmdzWzNdKGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSkpKTtcbiAgICBjYXNlIDY6XG4gICAgICByZXR1cm4gYXJnc1s1XShhcmdzWzRdKGFyZ3NbM10oYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKSkpKTtcbiAgICBjYXNlIDc6XG4gICAgICByZXR1cm4gYXJnc1s2XShhcmdzWzVdKGFyZ3NbNF0oYXJnc1szXShhcmdzWzJdKGFyZ3NbMV0oYXJnc1swXShzZWxmKSkpKSkpKTtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gYXJnc1s3XShhcmdzWzZdKGFyZ3NbNV0oYXJnc1s0XShhcmdzWzNdKGFyZ3NbMl0oYXJnc1sxXShhcmdzWzBdKHNlbGYpKSkpKSkpKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gYXJnc1s4XShhcmdzWzddKGFyZ3NbNl0oYXJnc1s1XShhcmdzWzRdKGFyZ3NbM10oYXJnc1syXShhcmdzWzFdKGFyZ3NbMF0oc2VsZikpKSkpKSkpKTtcbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBsZXQgcmV0ID0gc2VsZjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFyZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICByZXQgPSBhcmdzW2ldKHJldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBpcGVhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Pipeable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Predicate.js":
/*!***************************************************!*\
  !*** ./node_modules/effect/dist/esm/Predicate.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   and: () => (/* binding */ and),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   eqv: () => (/* binding */ eqv),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   hasProperty: () => (/* binding */ hasProperty),\n/* harmony export */   implies: () => (/* binding */ implies),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDate: () => (/* binding */ isDate),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isNever: () => (/* binding */ isNever),\n/* harmony export */   isNotNull: () => (/* binding */ isNotNull),\n/* harmony export */   isNotNullable: () => (/* binding */ isNotNullable),\n/* harmony export */   isNotUndefined: () => (/* binding */ isNotUndefined),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNullable: () => (/* binding */ isNullable),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isReadonlyRecord: () => (/* binding */ isReadonlyRecord),\n/* harmony export */   isRecord: () => (/* binding */ isRecord),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSymbol: () => (/* binding */ isSymbol),\n/* harmony export */   isTagged: () => (/* binding */ isTagged),\n/* harmony export */   isTruthy: () => (/* binding */ isTruthy),\n/* harmony export */   isTupleOf: () => (/* binding */ isTupleOf),\n/* harmony export */   isTupleOfAtLeast: () => (/* binding */ isTupleOfAtLeast),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isUnknown: () => (/* binding */ isUnknown),\n/* harmony export */   mapInput: () => (/* binding */ mapInput),\n/* harmony export */   nand: () => (/* binding */ nand),\n/* harmony export */   nor: () => (/* binding */ nor),\n/* harmony export */   not: () => (/* binding */ not),\n/* harmony export */   or: () => (/* binding */ or),\n/* harmony export */   product: () => (/* binding */ product),\n/* harmony export */   productMany: () => (/* binding */ productMany),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   struct: () => (/* binding */ struct),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   xor: () => (/* binding */ xor)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/**\n * @since 2.0.0\n */\n\n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n * @param f - a function to transform `B` to `A`.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst mapInput = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => b => self(f(b)));\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n *\n * @example\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nconst isTupleOf = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => self.length === n);\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n *\n * @example\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nconst isTupleOfAtLeast = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, n) => self.length >= n);\n/**\n * Tests if a value is `truthy`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isTruthy = input => !!input;\n/**\n * Tests if a value is a `Set`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isSet = input => input instanceof Set;\n/**\n * Tests if a value is a `Map`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isMap = input => input instanceof Map;\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isString = input => typeof input === \"string\";\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNumber = input => typeof input === \"number\";\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isBoolean = input => typeof input === \"boolean\";\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isBigInt = input => typeof input === \"bigint\";\n/**\n * Tests if a value is a `symbol`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isSymbol = input => typeof input === \"symbol\";\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isFunction = _Function_js__WEBPACK_IMPORTED_MODULE_0__.isFunction;\n/**\n * Tests if a value is `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isUndefined = input => input === undefined;\n/**\n * Tests if a value is not `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNotUndefined = input => input !== undefined;\n/**\n * Tests if a value is `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNull = input => input === null;\n/**\n * Tests if a value is not `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNotNull = input => input !== null;\n/**\n * A guard that always fails.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNever = _ => false;\n/**\n * A guard that always succeeds.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isUnknown = _ => true;\nconst isRecordOrArray = input => typeof input === \"object\" && input !== null;\n/**\n * Tests if a value is an `object`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isObject = input => isRecordOrArray(input) || isFunction(input);\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @param property - The field to check within the object.\n * @param self - The value to examine.\n *\n * @category guards\n * @since 2.0.0\n */\nconst hasProperty = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, property) => isObject(self) && property in self);\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @param input - The value to test.\n * @param tag - The tag to test for.\n *\n * @example\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isTagged = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, tag) => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag);\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNullable = input => input === null || input === undefined;\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isNotNullable = input => input !== null && input !== undefined;\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isError = input => input instanceof Error;\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isUint8Array = input => input instanceof Uint8Array;\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isDate = input => input instanceof Date;\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isIterable = input => hasProperty(input, Symbol.iterator);\n/**\n * A guard that succeeds when the input is a record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isRecord = input => isRecordOrArray(input) && !Array.isArray(input);\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isReadonlyRecord = isRecord;\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nconst isPromise = input => hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch);\n/**\n * @category guards\n * @since 2.0.0\n */\nconst isPromiseLike = input => hasProperty(input, \"then\") && isFunction(input.then);\n/**\n * @since 2.0.0\n */\nconst compose = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (ab, bc) => a => ab(a) && bc(a));\n/**\n * @category combining\n * @since 2.0.0\n */\nconst product = (self, that) => ([a, b]) => self(a) && that(b);\n/**\n * @category combining\n * @since 2.0.0\n */\nconst all = collection => {\n  return as => {\n    let collectionIndex = 0;\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break;\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false;\n      }\n      collectionIndex++;\n    }\n    return true;\n  };\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nconst productMany = (self, collection) => {\n  const rest = all(collection);\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail);\n};\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * ```\n *\n * @since 2.0.0\n */\nconst tuple = (...elements) => all(elements);\n/**\n * @since 2.0.0\n */\nconst struct = fields => {\n  const keys = Object.keys(fields);\n  return a => {\n    for (const key of keys) {\n      if (!fields[key](a[key])) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n/**\n * Negates the result of a given predicate.\n *\n * @param self - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst not = self => a => !self(a);\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst or = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) || that(a));\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst and = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) && that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst xor = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) !== that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst eqv = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => self(a) === that(a));\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nconst implies = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (antecedent, consequent) => a => antecedent(a) ? consequent(a) : true);\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst nor = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => !(self(a) || that(a)));\n/**\n * @category combinators\n * @since 2.0.0\n */\nconst nand = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => a => !(self(a) && that(a)));\n/**\n * @category elements\n * @since 2.0.0\n */\nconst every = collection => a => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * @category elements\n * @since 2.0.0\n */\nconst some = collection => a => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true;\n    }\n  }\n  return false;\n};\n//# sourceMappingURL=Predicate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Predicate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Record.js":
/*!************************************************!*\
  !*** ./node_modules/effect/dist/esm/Record.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collect: () => (/* binding */ collect),\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   filterMap: () => (/* binding */ filterMap),\n/* harmony export */   fromEntries: () => (/* binding */ fromEntries),\n/* harmony export */   fromIterableBy: () => (/* binding */ fromIterableBy),\n/* harmony export */   fromIterableWith: () => (/* binding */ fromIterableWith),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getLefts: () => (/* binding */ getLefts),\n/* harmony export */   getRights: () => (/* binding */ getRights),\n/* harmony export */   getSomes: () => (/* binding */ getSomes),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   isEmptyReadonlyRecord: () => (/* binding */ isEmptyReadonlyRecord),\n/* harmony export */   isEmptyRecord: () => (/* binding */ isEmptyRecord),\n/* harmony export */   isSubrecord: () => (/* binding */ isSubrecord),\n/* harmony export */   isSubrecordBy: () => (/* binding */ isSubrecordBy),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapEntries: () => (/* binding */ mapEntries),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys),\n/* harmony export */   modify: () => (/* binding */ modify),\n/* harmony export */   modifyOption: () => (/* binding */ modifyOption),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   partitionMap: () => (/* binding */ partitionMap),\n/* harmony export */   pop: () => (/* binding */ pop),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   replace: () => (/* binding */ replace),\n/* harmony export */   replaceOption: () => (/* binding */ replaceOption),\n/* harmony export */   separate: () => (/* binding */ separate),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   singleton: () => (/* binding */ singleton),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   toEntries: () => (/* binding */ toEntries),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   values: () => (/* binding */ values)\n/* harmony export */ });\n/* harmony import */ var _Either_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Either.js */ \"(ssr)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Option.js */ \"(ssr)/./node_modules/effect/dist/esm/Option.js\");\n/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\n\n\n\n\n/**\n * Creates a new, empty record.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst empty = () => ({});\n/**\n * Determine if a record is empty.\n *\n * @param self - record to test for emptiness.\n *\n * @example\n * import { isEmptyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyRecord({}), true);\n * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEmptyRecord = self => keys(self).length === 0;\n/**\n * Determine if a record is empty.\n *\n * @param self - record to test for emptiness.\n *\n * @example\n * import { isEmptyReadonlyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);\n * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);\n *\n * @category guards\n * @since 2.0.0\n */\nconst isEmptyReadonlyRecord = isEmptyRecord;\n/**\n * Takes an iterable and a projection function and returns a record.\n * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n *\n * @param self - An iterable of values to be mapped to a record.\n * @param f - A projection function that maps values of the iterable to a tuple of a key and a value.\n *\n * @example\n * import { fromIterableWith } from \"effect/Record\"\n *\n * const input = [1, 2, 3, 4]\n *\n * assert.deepStrictEqual(\n *   fromIterableWith(input, a => [String(a), a * 2]),\n *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromIterableWith = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = empty();\n  for (const a of self) {\n    const [k, b] = f(a);\n    out[k] = b;\n  }\n  return out;\n});\n/**\n * Creates a new record from an iterable, utilizing the provided function to determine the key for each element.\n *\n * @param items - An iterable containing elements.\n * @param f - A function that extracts the key for each element.\n *\n * @example\n * import { fromIterableBy } from \"effect/Record\"\n *\n * const users = [\n *   { id: \"2\", name: \"name2\" },\n *   { id: \"1\", name: \"name1\" }\n * ]\n *\n * assert.deepStrictEqual(\n *   fromIterableBy(users, user => user.id),\n *   {\n *     \"2\": { id: \"2\", name: \"name2\" },\n *     \"1\": { id: \"1\", name: \"name1\" }\n *   }\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nconst fromIterableBy = (items, f) => fromIterableWith(items, a => [f(a), a]);\n/**\n * Builds a record from an iterable of key-value pairs.\n *\n * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the\n * previous ones. So the resulting record will only have the value of the last occurrence of each key.\n *\n * @param self - The iterable of key-value pairs.\n *\n * @example\n * import { fromEntries } from \"effect/Record\"\n *\n * const input: Array<[string, number]> = [[\"a\", 1], [\"b\", 2]]\n *\n * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })\n *\n * @since 2.0.0\n * @category constructors\n */\nconst fromEntries = Object.fromEntries;\n/**\n * Transforms the values of a record into an `Array` with a custom mapping function.\n *\n * @param self - The record to transform.\n * @param f - The custom mapping function to apply to each key/value of the record.\n *\n * @example\n * import { collect } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst collect = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = [];\n  for (const key of keys(self)) {\n    out.push(f(key, self[key]));\n  }\n  return out;\n});\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { toEntries } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(toEntries(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nconst toEntries = /*#__PURE__*/collect((key, value) => [key, value]);\n/**\n * Returns the number of key/value pairs in a record.\n *\n * @param self - A record to calculate the number of key/value pairs in.\n *\n * @example\n * import { size } from \"effect/Record\";\n *\n * assert.deepStrictEqual(size({ a: \"a\", b: 1, c: true }), 3);\n *\n * @since 2.0.0\n */\nconst size = self => keys(self).length;\n/**\n * Check if a given `key` exists in a record.\n *\n * @param self - the record to look in.\n * @param key - the key to look for in the record.\n *\n * @example\n * import { empty, has } from \"effect/Record\"\n *\n * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n *\n * @since 2.0.0\n */\nconst has = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key) => Object.prototype.hasOwnProperty.call(self, key));\n/**\n * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n *\n * @param self - The record to retrieve value from.\n * @param key - Key to retrieve from record.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n *\n * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n *\n * @since 2.0.0\n */\nconst get = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key) => has(self, key) ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.some(self[key]) : _Option_js__WEBPACK_IMPORTED_MODULE_1__.none());\n/**\n * Apply a function to the element at the specified key, creating a new record.\n * If the key does not exist, the record is returned unchanged.\n *\n * @param self - The record to be updated.\n * @param key - The key of the element to modify.\n * @param f - The function to apply to the element.\n *\n * @example\n * import { Record as R } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 }, 'a', f),\n *  { a: 6 }\n * )\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n *  { a: 3 }\n * )\n *\n * @since 2.0.0\n */\nconst modify = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, f) => {\n  if (!has(self, key)) {\n    return {\n      ...self\n    };\n  }\n  return {\n    ...self,\n    [key]: f(self[key])\n  };\n});\n/**\n * Apply a function to the element at the specified key, creating a new record,\n * or return `None` if the key doesn't exist.\n *\n * @param self - The record to be updated.\n * @param key - The key of the element to modify.\n * @param f - The function to apply to the element.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 }, 'a', f),\n *  Option.some({ a: 6 })\n * )\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n *  Option.none()\n * )\n *\n * @since 2.0.0\n */\nconst modifyOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, f) => {\n  if (!has(self, key)) {\n    return _Option_js__WEBPACK_IMPORTED_MODULE_1__.none();\n  }\n  return _Option_js__WEBPACK_IMPORTED_MODULE_1__.some({\n    ...self,\n    [key]: f(self[key])\n  });\n});\n/**\n * Replaces a value in the record with the new value passed as parameter.\n *\n * @param self - The record to be updated.\n * @param key - The key to search for in the record.\n * @param b - The new value to replace the existing value with.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n *   Option.some({ a: 10, b: 2, c: 3 })\n * )\n * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n *\n * @since 2.0.0\n */\nconst replaceOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, b) => modifyOption(self, key, () => b));\n/**\n * If the given key exists in the record, returns a new record with the key removed,\n * otherwise returns a copy of the original record.\n *\n * @param self - the record to remove the key from.\n * @param key - the key to remove from the record.\n *\n * @example\n * import { remove } from \"effect/Record\"\n *\n * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n *\n * @since 2.0.0\n */\nconst remove = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key) => {\n  if (!has(self, key)) {\n    return {\n      ...self\n    };\n  }\n  const out = {\n    ...self\n  };\n  delete out[key];\n  return out;\n});\n/**\n * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n * of a tuple with the value and the record with the removed property.\n * If the key is not present, returns `O.none`.\n *\n * @param self - The input record.\n * @param key - The key of the property to retrieve.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n *\n * @category record\n * @since 2.0.0\n */\nconst pop = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, key) => has(self, key) ? _Option_js__WEBPACK_IMPORTED_MODULE_1__.some([self[key], remove(self, key)]) : _Option_js__WEBPACK_IMPORTED_MODULE_1__.none());\n/**\n * Maps a record into another record by applying a transformation function to each of its values.\n *\n * @param self - The record to be mapped.\n * @param f - A transformation function that will be applied to each of the values in the record.\n *\n * @example\n * import { map } from \"effect/Record\"\n *\n * const f = (n: number) => `-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n *\n * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n *\n * @category mapping\n * @since 2.0.0\n */\nconst map = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = {\n    ...self\n  };\n  for (const key of keys(self)) {\n    out[key] = f(self[key], key);\n  }\n  return out;\n});\n/**\n * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n *\n * @example\n * import { mapKeys } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapKeys = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = {};\n  for (const key of keys(self)) {\n    const a = self[key];\n    out[f(key, a)] = a;\n  }\n  return out;\n});\n/**\n * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n *\n * @example\n * import { mapEntries } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapEntries = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = {};\n  for (const key of keys(self)) {\n    const [k, b] = f(self[key], key);\n    out[k] = b;\n  }\n  return out;\n});\n/**\n * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n * If the function returns `Some`, the key-value pair is included in the output record.\n *\n * @param self - The input record.\n * @param f - The transformation function.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n *\n * @since 2.0.0\n */\nconst filterMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const out = empty();\n  for (const key of keys(self)) {\n    const o = f(self[key], key);\n    if (_Option_js__WEBPACK_IMPORTED_MODULE_1__.isSome(o)) {\n      out[key] = o.value;\n    }\n  }\n  return out;\n});\n/**\n * Selects properties from a record whose values match the given predicate.\n *\n * @param self - The record to filter.\n * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n *\n * @example\n * import { filter } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3, d: 4 }\n * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n *\n * @category filtering\n * @since 2.0.0\n */\nconst filter = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  const out = empty();\n  for (const key of keys(self)) {\n    if (predicate(self[key], key)) {\n      out[key] = self[key];\n    }\n  }\n  return out;\n});\n/**\n * Given a record with `Option` values, returns a new record containing only the `Some` values, preserving the original keys.\n *\n * @param self - A record with `Option` values.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getSomes({ a: Option.some(1), b: Option.none(), c: Option.some(2) }),\n *   { a: 1, c: 2 }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getSomes = /*#__PURE__*/filterMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Given a record with `Either` values, returns a new record containing only the `Left` values, preserving the original keys.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getLefts({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { b: \"err\" }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getLefts = self => {\n  const out = empty();\n  for (const key of keys(self)) {\n    const value = self[key];\n    if (_Either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(value)) {\n      out[key] = value.left;\n    }\n  }\n  return out;\n};\n/**\n * Given a record with `Either` values, returns a new record containing only the `Right` values, preserving the original keys.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getRights({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { a: 1, c: 2 }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst getRights = self => {\n  const out = empty();\n  for (const key of keys(self)) {\n    const value = self[key];\n    if (_Either_js__WEBPACK_IMPORTED_MODULE_2__.isRight(value)) {\n      out[key] = value.right;\n    }\n  }\n  return out;\n};\n/**\n * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n *\n * @param self - The record to partition.\n * @param f - The predicate function to apply to each element.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n *\n * @category filtering\n * @since 2.0.0\n */\nconst partitionMap = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => {\n  const left = empty();\n  const right = empty();\n  for (const key of keys(self)) {\n    const e = f(self[key], key);\n    if (_Either_js__WEBPACK_IMPORTED_MODULE_2__.isLeft(e)) {\n      left[key] = e.left;\n    } else {\n      right[key] = e.right;\n    }\n  }\n  return [left, right];\n});\n/**\n * Partitions a record of `Either` values into two separate records,\n * one with the `Left` values and one with the `Right` values.\n *\n * @param self - the record to partition.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.separate({ a: Either.left(\"e\"), b: Either.right(1) }),\n *   [{ a: \"e\" }, { b: 1 }]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst separate = /*#__PURE__*/partitionMap(_Function_js__WEBPACK_IMPORTED_MODULE_0__.identity);\n/**\n * Partitions a record into two separate records based on the result of a predicate function.\n *\n * @param self - The input record to partition.\n * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n *\n * @example\n * import { partition } from \"effect/Record\"\n *\n * assert.deepStrictEqual(\n *   partition({ a: 1, b: 3 }, (n) => n > 2),\n *   [{ a: 1 }, { b: 3 }]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nconst partition = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  const left = empty();\n  const right = empty();\n  for (const key of keys(self)) {\n    if (predicate(self[key], key)) {\n      right[key] = self[key];\n    } else {\n      left[key] = self[key];\n    }\n  }\n  return [left, right];\n});\n/**\n * Retrieve the keys of a given record as an array.\n *\n * @param self - The object for which you want to get the keys.\n *\n * @since 2.0.0\n */\nconst keys = self => Object.keys(self);\n/**\n * Retrieve the values of a given record as an array.\n *\n * @param self - The object for which you want to get the values.\n *\n * @since 2.0.0\n */\nconst values = self => collect(self, (_, a) => a);\n/**\n * Add a new key-value pair or update an existing key's value in a record.\n *\n * @param self - The record to which you want to add or update a key-value pair.\n * @param key - The key you want to add or update.\n * @param values - The value you want to associate with the key.\n *\n * @example\n * import { set } from \"effect/Record\"\n *\n * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.0.0\n */\nconst set = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, value) => {\n  return {\n    ...self,\n    [key]: value\n  };\n});\n/**\n * Replace a key's value in a record and return the updated record.\n * If the key does not exist in the record, a copy of the original record is returned.\n *\n * @param self - The original record.\n * @param key - The key to replace.\n * @param value - The new value to associate with the key.\n *\n * @example\n * import { Record } from \"effect\"\n *\n * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n *\n * @since 2.0.0\n */\nconst replace = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, key, value) => {\n  if (has(self, key)) {\n    return {\n      ...self,\n      [key]: value\n    };\n  }\n  return {\n    ...self\n  };\n});\n/**\n * Check if all the keys and values in one record are also found in another record.\n *\n * @param self - The first record to check.\n * @param that - The second record to compare against.\n * @param equivalence - A function to compare values.\n *\n * @since 2.0.0\n */\nconst isSubrecordBy = equivalence => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => {\n  for (const key of keys(self)) {\n    if (!has(that, key) || !equivalence(self[key], that[key])) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n * This comparison uses default equality checks (`Equal.equivalence()`).\n *\n * @param self - The first record to check.\n * @param that - The second record to compare against.\n *\n * @since 2.0.0\n */\nconst isSubrecord = /*#__PURE__*/isSubrecordBy( /*#__PURE__*/_Equal_js__WEBPACK_IMPORTED_MODULE_3__.equivalence());\n/**\n * Reduce a record to a single value by combining its entries with a specified function.\n *\n * @param self - The record to reduce.\n * @param zero - The initial value of the accumulator.\n * @param f - The function to combine entries (accumulator, value, key).\n *\n * @category folding\n * @since 2.0.0\n */\nconst reduce = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, zero, f) => {\n  let out = zero;\n  for (const key of keys(self)) {\n    out = f(out, self[key], key);\n  }\n  return out;\n});\n/**\n * Check if all entries in a record meet a specific condition.\n *\n * @param self - The record to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 2.0.0\n */\nconst every = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, refinement) => {\n  for (const key of keys(self)) {\n    if (!refinement(self[key], key)) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Check if any entry in a record meets a specific condition.\n *\n * @param self - The record to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 2.0.0\n */\nconst some = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, predicate) => {\n  for (const key of keys(self)) {\n    if (predicate(self[key], key)) {\n      return true;\n    }\n  }\n  return false;\n});\n/**\n * Merge two records, preserving entries that exist in either of the records.\n *\n * @param self - The first record.\n * @param that - The second record to combine with the first.\n * @param combine - A function to specify how to merge entries with the same key.\n *\n * @since 2.0.0\n */\nconst union = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, combine) => {\n  if (isEmptyRecord(self)) {\n    return {\n      ...that\n    };\n  }\n  if (isEmptyRecord(that)) {\n    return {\n      ...self\n    };\n  }\n  const out = empty();\n  for (const key of keys(self)) {\n    if (has(that, key)) {\n      out[key] = combine(self[key], that[key]);\n    } else {\n      out[key] = self[key];\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(out, key)) {\n      out[key] = that[key];\n    }\n  }\n  return out;\n});\n/**\n * Merge two records, retaining only the entries that exist in both records.\n *\n * @param self - The first record.\n * @param that - The second record to merge with the first.\n * @param combine - A function to specify how to merge entries with the same key.\n *\n * @since 2.0.0\n */\nconst intersection = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, that, combine) => {\n  const out = empty();\n  if (isEmptyRecord(self) || isEmptyRecord(that)) {\n    return out;\n  }\n  for (const key of keys(self)) {\n    if (has(that, key)) {\n      out[key] = combine(self[key], that[key]);\n    }\n  }\n  return out;\n});\n/**\n * Merge two records, preserving only the entries that are unique to each record.\n *\n * @param self - The first record.\n * @param that - The second record to compare with the first.\n *\n * @since 2.0.0\n */\nconst difference = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => {\n  if (isEmptyRecord(self)) {\n    return {\n      ...that\n    };\n  }\n  if (isEmptyRecord(that)) {\n    return {\n      ...self\n    };\n  }\n  const out = {};\n  for (const key of keys(self)) {\n    if (!has(that, key)) {\n      out[key] = self[key];\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(self, key)) {\n      out[key] = that[key];\n    }\n  }\n  return out;\n});\n/**\n * Create an `Equivalence` for records using the provided `Equivalence` for values.\n *\n * @param equivalence - An `Equivalence` for the values contained in the records.\n *\n * @category instances\n * @since 2.0.0\n */\nconst getEquivalence = equivalence => {\n  const is = isSubrecordBy(equivalence);\n  return (self, that) => is(self, that) && is(that, self);\n};\n/**\n * Create a non-empty record from a single element.\n *\n * @param key - The key for the element.\n * @param value - The value associated with the key.\n *\n * @category constructors\n * @since 2.0.0\n */\nconst singleton = (key, value) => ({\n  [key]: value\n});\n//# sourceMappingURL=Record.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Record.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Tuple.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Tuple.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendElement: () => (/* binding */ appendElement),\n/* harmony export */   at: () => (/* binding */ at),\n/* harmony export */   getEquivalence: () => (/* binding */ getEquivalence),\n/* harmony export */   getFirst: () => (/* binding */ getFirst),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getSecond: () => (/* binding */ getSecond),\n/* harmony export */   isTupleOf: () => (/* reexport safe */ _Predicate_js__WEBPACK_IMPORTED_MODULE_3__.isTupleOf),\n/* harmony export */   isTupleOfAtLeast: () => (/* reexport safe */ _Predicate_js__WEBPACK_IMPORTED_MODULE_3__.isTupleOfAtLeast),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapFirst: () => (/* binding */ mapFirst),\n/* harmony export */   mapSecond: () => (/* binding */ mapSecond),\n/* harmony export */   swap: () => (/* binding */ swap)\n/* harmony export */ });\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Equivalence.js */ \"(ssr)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Order_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Order.js */ \"(ssr)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\n\n\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @param elements - The list of elements to create the tuple from.\n *\n * @example\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n *\n * @category constructors\n * @since 2.0.0\n */\nconst make = (...elements) => elements;\n/**\n * Return the first element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n *\n * @category getters\n * @since 2.0.0\n */\nconst getFirst = self => self[0];\n/**\n * Return the second element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n *\n * @category getters\n * @since 2.0.0\n */\nconst getSecond = self => self[1];\n/**\n * Transforms both elements of a tuple using the given functions.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n * @param g - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapBoth = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, {\n  onFirst,\n  onSecond\n}) => [onFirst(self[0]), onSecond(self[1])]);\n/**\n * Transforms the first component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n *\n * @example\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapFirst = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => [f(self[0]), self[1]]);\n/**\n * Transforms the second component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nconst mapSecond = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, f) => [self[0], f(self[1])]);\n/**\n * Swaps the two elements of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n *\n * @since 2.0.0\n */\nconst swap = self => [self[1], self[0]];\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst getEquivalence = _Equivalence_js__WEBPACK_IMPORTED_MODULE_1__.tuple;\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nconst getOrder = _Order_js__WEBPACK_IMPORTED_MODULE_2__.tuple;\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */\nconst appendElement = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, that) => [...self, that]);\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @param self - A tuple from which to retrieve the element.\n * @param index - The index of the element to retrieve.\n *\n * @example\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n *\n * @category getters\n * @since 3.4.0\n */\nconst at = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, index) => self[index]);\n\n//# sourceMappingURL=Tuple.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Tuple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/Utils.js":
/*!***********************************************!*\
  !*** ./node_modules/effect/dist/esm/Utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenKindImpl: () => (/* binding */ GenKindImpl),\n/* harmony export */   GenKindTypeId: () => (/* binding */ GenKindTypeId),\n/* harmony export */   PCGRandom: () => (/* binding */ PCGRandom),\n/* harmony export */   SingleShotGen: () => (/* binding */ SingleShotGen),\n/* harmony export */   YieldWrap: () => (/* binding */ YieldWrap),\n/* harmony export */   YieldWrapTypeId: () => (/* binding */ YieldWrapTypeId),\n/* harmony export */   adapter: () => (/* binding */ adapter),\n/* harmony export */   internalCall: () => (/* binding */ internalCall),\n/* harmony export */   isGenKind: () => (/* binding */ isGenKind),\n/* harmony export */   makeGenKind: () => (/* binding */ makeGenKind),\n/* harmony export */   structuralRegion: () => (/* binding */ structuralRegion),\n/* harmony export */   structuralRegionState: () => (/* binding */ structuralRegionState),\n/* harmony export */   yieldWrapGet: () => (/* binding */ yieldWrapGet)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _GlobalValue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GlobalValue.js */ \"(ssr)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/errors.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/errors.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n/**\n * @category symbols\n * @since 2.0.0\n */\nconst GenKindTypeId = /*#__PURE__*/Symbol.for(\"effect/Gen/GenKind\");\n/**\n * @category predicates\n * @since 3.0.6\n */\nconst isGenKind = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(u) && GenKindTypeId in u;\n/**\n * @category constructors\n * @since 2.0.0\n */\nclass GenKindImpl {\n  value;\n  constructor(\n  /**\n   * @since 2.0.0\n   */\n  value) {\n    this.value = value;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return _Function_js__WEBPACK_IMPORTED_MODULE_1__.identity;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  [GenKindTypeId] = GenKindTypeId;\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator]() {\n    return new SingleShotGen(this);\n  }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nclass SingleShotGen {\n  self;\n  called = false;\n  constructor(self) {\n    this.self = self;\n  }\n  /**\n   * @since 2.0.0\n   */\n  next(a) {\n    return this.called ? {\n      value: a,\n      done: true\n    } : (this.called = true, {\n      value: this.self,\n      done: false\n    });\n  }\n  /**\n   * @since 2.0.0\n   */\n  return(a) {\n    return {\n      value: a,\n      done: true\n    };\n  }\n  /**\n   * @since 2.0.0\n   */\n  throw(e) {\n    throw e;\n  }\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator]() {\n    return new SingleShotGen(this.self);\n  }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nconst makeGenKind = kind => new GenKindImpl(kind);\n/**\n * @category adapters\n * @since 2.0.0\n */\nconst adapter = () => function () {\n  let x = arguments[0];\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x);\n  }\n  return new GenKindImpl(x);\n};\nconst defaultIncHi = 0x14057b7e;\nconst defaultIncLo = 0xf767814f;\nconst MUL_HI = 0x5851f42d >>> 0;\nconst MUL_LO = 0x4c957f2d >>> 0;\nconst BIT_53 = 9007199254740992.0;\nconst BIT_27 = 134217728.0;\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nclass PCGRandom {\n  _state;\n  constructor(seedHi, seedLo, incHi, incLo) {\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedLo) && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedHi)) {\n      seedLo = Math.random() * 0xffffffff >>> 0;\n      seedHi = 0;\n    } else if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(seedLo)) {\n      seedLo = seedHi;\n      seedHi = 0;\n    }\n    if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incLo) && (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo;\n      incHi = this._state ? this._state[2] : defaultIncHi;\n    } else if ((0,_Predicate_js__WEBPACK_IMPORTED_MODULE_0__.isNullable)(incLo)) {\n      incLo = incHi;\n      incHi = 0;\n    }\n    this._state = new Int32Array([0, 0, incHi >>> 0, ((incLo || 0) | 1) >>> 0]);\n    this._next();\n    add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);\n    this._next();\n    return this;\n  }\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState() {\n    return [this._state[0], this._state[1], this._state[2], this._state[3]];\n  }\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state) {\n    this._state[0] = state[0];\n    this._state[1] = state[1];\n    this._state[2] = state[2];\n    this._state[3] = state[3] | 1;\n  }\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max) {\n    if (!max) {\n      return this._next();\n    }\n    max = max >>> 0;\n    if ((max & max - 1) === 0) {\n      return this._next() & max - 1; // fast path for power of 2\n    }\n    let num = 0;\n    const skew = (-max >>> 0) % max >>> 0;\n    for (num = this._next(); num < skew; num = this._next()) {\n      // this loop will rarely execute more than twice,\n      // and is intentionally empty\n    }\n    return num % max;\n  }\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0;\n    const lo = (this._next() & 0x07ffffff) * 1.0;\n    return (hi * BIT_27 + lo) / BIT_53;\n  }\n  /** @internal */\n  _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0] >>> 0;\n    const oldLo = this._state[1] >>> 0;\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);\n    add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18;\n    let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;\n    xsHi = (xsHi ^ oldHi) >>> 0;\n    xsLo = (xsLo ^ oldLo) >>> 0;\n    const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27;\n    const rot2 = (-rot >>> 0 & 31) >>> 0;\n    return (xorshifted >>> rot | xorshifted << rot2) >>> 0;\n  }\n}\nfunction mul64(out, aHi, aLo, bHi, bLo) {\n  let c1 = (aLo >>> 16) * (bLo & 0xffff) >>> 0;\n  let c0 = (aLo & 0xffff) * (bLo >>> 16) >>> 0;\n  let lo = (aLo & 0xffff) * (bLo & 0xffff) >>> 0;\n  let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;\n  c0 = c0 << 16 >>> 0;\n  lo = lo + c0 >>> 0;\n  if (lo >>> 0 < c0 >>> 0) {\n    hi = hi + 1 >>> 0;\n  }\n  c1 = c1 << 16 >>> 0;\n  lo = lo + c1 >>> 0;\n  if (lo >>> 0 < c1 >>> 0) {\n    hi = hi + 1 >>> 0;\n  }\n  hi = hi + Math.imul(aLo, bHi) >>> 0;\n  hi = hi + Math.imul(aHi, bLo) >>> 0;\n  out[0] = hi;\n  out[1] = lo;\n}\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(out, aHi, aLo, bHi, bLo) {\n  let hi = aHi + bHi >>> 0;\n  const lo = aLo + bLo >>> 0;\n  if (lo >>> 0 < aLo >>> 0) {\n    hi = hi + 1 | 0;\n  }\n  out[0] = hi;\n  out[1] = lo;\n}\n/**\n * @since 3.0.6\n */\nconst YieldWrapTypeId = /*#__PURE__*/Symbol.for(\"effect/Utils/YieldWrap\");\n/**\n * @since 3.0.6\n */\nclass YieldWrap {\n  /**\n   * @since 3.0.6\n   */\n  #value;\n  constructor(value) {\n    this.#value = value;\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId]() {\n    return this.#value;\n  }\n}\n/**\n * @since 3.0.6\n */\nfunction yieldWrapGet(self) {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]();\n  }\n  throw new Error((0,_internal_errors_js__WEBPACK_IMPORTED_MODULE_2__.getBugErrorMessage)(\"yieldWrapGet\"));\n}\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nconst structuralRegionState = /*#__PURE__*/(0,_GlobalValue_js__WEBPACK_IMPORTED_MODULE_3__.globalValue)(\"effect/Utils/isStructuralRegion\", () => ({\n  enabled: false,\n  tester: undefined\n}));\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nconst structuralRegion = (body, tester) => {\n  const current = structuralRegionState.enabled;\n  const currentTester = structuralRegionState.tester;\n  structuralRegionState.enabled = true;\n  if (tester) {\n    structuralRegionState.tester = tester;\n  }\n  try {\n    return body();\n  } finally {\n    structuralRegionState.enabled = current;\n    structuralRegionState.tester = currentTester;\n  }\n};\nconst tracingFunction = name => {\n  const wrap = {\n    [name](body) {\n      return body();\n    }\n  };\n  return function (fn) {\n    return wrap[name](fn);\n  };\n};\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nconst internalCall = /*#__PURE__*/tracingFunction(\"effect_internal_function\");\n//# sourceMappingURL=Utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/array.js":
/*!********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/array.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */\n/** @internal */\nconst isNonEmptyArray = self => self.length > 0;\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvYXJyYXkuanM/OThkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNOb25FbXB0eUFycmF5ID0gc2VsZiA9PiBzZWxmLmxlbmd0aCA+IDA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/context.js":
/*!**********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/context.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextProto: () => (/* binding */ ContextProto),\n/* harmony export */   STMTypeId: () => (/* binding */ STMTypeId),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   TagProto: () => (/* binding */ TagProto),\n/* harmony export */   TagTypeId: () => (/* binding */ TagTypeId),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getOption: () => (/* binding */ getOption),\n/* harmony export */   isContext: () => (/* binding */ isContext),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeContext: () => (/* binding */ makeContext),\n/* harmony export */   makeGenericTag: () => (/* binding */ makeGenericTag),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   unsafeGet: () => (/* binding */ unsafeGet)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _option_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n\n\n\n\n\n\n\n\n/** @internal */\nconst TagTypeId = /*#__PURE__*/Symbol.for(\"effect/Context/Tag\");\n/** @internal */\nconst STMSymbolKey = \"effect/STM\";\n/** @internal */\nconst STMTypeId = /*#__PURE__*/Symbol.for(STMSymbolKey);\n/** @internal */\nconst TagProto = {\n  ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n  _tag: \"Tag\",\n  _op: \"Tag\",\n  [STMTypeId]: _effectable_js__WEBPACK_IMPORTED_MODULE_0__.effectVariance,\n  [TagTypeId]: {\n    _Service: _ => _,\n    _Identifier: _ => _\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  },\n  toJSON() {\n    return {\n      _id: \"Tag\",\n      key: this.key,\n      stack: this.stack\n    };\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  of(self) {\n    return self;\n  },\n  context(self) {\n    return make(this, self);\n  }\n};\n/** @internal */\nconst makeGenericTag = key => {\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 2;\n  const creationError = new Error();\n  Error.stackTraceLimit = limit;\n  const tag = Object.create(TagProto);\n  Object.defineProperty(tag, \"stack\", {\n    get() {\n      return creationError.stack;\n    }\n  });\n  tag.key = key;\n  return tag;\n};\n/** @internal */\nconst Tag = id => () => {\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 2;\n  const creationError = new Error();\n  Error.stackTraceLimit = limit;\n  function TagClass() {}\n  Object.setPrototypeOf(TagClass, TagProto);\n  TagClass.key = id;\n  Object.defineProperty(TagClass, \"stack\", {\n    get() {\n      return creationError.stack;\n    }\n  });\n  return TagClass;\n};\n/** @internal */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Context\");\n/** @internal */\nconst ContextProto = {\n  [TypeId]: {\n    _Services: _ => _\n  },\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    if (isContext(that)) {\n      if (this.unsafeMap.size === that.unsafeMap.size) {\n        for (const k of this.unsafeMap.keys()) {\n          if (!that.unsafeMap.has(k) || !_Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.number(this.unsafeMap.size));\n  },\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  },\n  toJSON() {\n    return {\n      _id: \"Context\",\n      services: Array.from(this.unsafeMap).map(_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)\n    };\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n};\n/** @internal */\nconst makeContext = unsafeMap => {\n  const context = Object.create(ContextProto);\n  context.unsafeMap = unsafeMap;\n  return context;\n};\nconst serviceNotFoundError = tag => {\n  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`);\n  if (tag.stack) {\n    const lines = tag.stack.split(\"\\n\");\n    if (lines.length > 2) {\n      const afterAt = lines[2].match(/at (.*)/);\n      if (afterAt) {\n        error.message = error.message + ` (defined at ${afterAt[1]})`;\n      }\n    }\n  }\n  if (error.stack) {\n    const lines = error.stack.split(\"\\n\");\n    lines.splice(1, 3);\n    error.stack = lines.join(\"\\n\");\n  }\n  return error;\n};\n/** @internal */\nconst isContext = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, TypeId);\n/** @internal */\nconst isTag = u => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_5__.hasProperty)(u, TagTypeId);\nconst _empty = /*#__PURE__*/makeContext( /*#__PURE__*/new Map());\n/** @internal */\nconst empty = () => _empty;\n/** @internal */\nconst make = (tag, service) => makeContext(new Map([[tag.key, service]]));\n/** @internal */\nconst add = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(3, (self, tag, service) => {\n  const map = new Map(self.unsafeMap);\n  map.set(tag.key, service);\n  return makeContext(map);\n});\n/** @internal */\nconst unsafeGet = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    throw serviceNotFoundError(tag);\n  }\n  return self.unsafeMap.get(tag.key);\n});\n/** @internal */\nconst get = unsafeGet;\n/** @internal */\nconst getOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return _option_js__WEBPACK_IMPORTED_MODULE_7__.none;\n  }\n  return _option_js__WEBPACK_IMPORTED_MODULE_7__.some(self.unsafeMap.get(tag.key));\n});\n/** @internal */\nconst merge = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, that) => {\n  const map = new Map(self.unsafeMap);\n  for (const [tag, s] of that.unsafeMap) {\n    map.set(tag, s);\n  }\n  return makeContext(map);\n});\n/** @internal */\nconst pick = (...tags) => self => {\n  const tagSet = new Set(tags.map(_ => _.key));\n  const newEnv = new Map();\n  for (const [tag, s] of self.unsafeMap.entries()) {\n    if (tagSet.has(tag)) {\n      newEnv.set(tag, s);\n    }\n  }\n  return makeContext(newEnv);\n};\n/** @internal */\nconst omit = (...tags) => self => {\n  const newEnv = new Map(self.unsafeMap);\n  for (const tag of tags) {\n    newEnv.delete(tag.key);\n  }\n  return makeContext(newEnv);\n};\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js":
/*!*************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/doNotation.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   bindTo: () => (/* binding */ bindTo),\n/* harmony export */   let_: () => (/* binding */ let_)\n/* harmony export */ });\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n\n/** @internal */\nconst let_ = map => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, name, f) => map(self, a => Object.assign({}, a, {\n  [name]: f(a)\n})));\n/** @internal */\nconst bindTo = map => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (self, name) => map(self, a => ({\n  [name]: a\n})));\n/** @internal */\nconst bind = (map, flatMap) => (0,_Function_js__WEBPACK_IMPORTED_MODULE_0__.dual)(3, (self, name, f) => flatMap(self, a => map(f(a), b => Object.assign({}, a, {\n  [name]: b\n}))));\n//# sourceMappingURL=doNotation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2RvTm90YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzQztBQUN0QztBQUNPLG9CQUFvQixrREFBSSxzREFBc0Q7QUFDckY7QUFDQSxDQUFDO0FBQ0Q7QUFDTyxzQkFBc0Isa0RBQUk7QUFDakM7QUFDQSxDQUFDO0FBQ0Q7QUFDTywrQkFBK0Isa0RBQUkseUVBQXlFO0FBQ25IO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtYWkvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2RvTm90YXRpb24uanM/NzNlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkdWFsIH0gZnJvbSBcIi4uL0Z1bmN0aW9uLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbGV0XyA9IG1hcCA9PiBkdWFsKDMsIChzZWxmLCBuYW1lLCBmKSA9PiBtYXAoc2VsZiwgYSA9PiBPYmplY3QuYXNzaWduKHt9LCBhLCB7XG4gIFtuYW1lXTogZihhKVxufSkpKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBiaW5kVG8gPSBtYXAgPT4gZHVhbCgyLCAoc2VsZiwgbmFtZSkgPT4gbWFwKHNlbGYsIGEgPT4gKHtcbiAgW25hbWVdOiBhXG59KSkpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGJpbmQgPSAobWFwLCBmbGF0TWFwKSA9PiBkdWFsKDMsIChzZWxmLCBuYW1lLCBmKSA9PiBmbGF0TWFwKHNlbGYsIGEgPT4gbWFwKGYoYSksIGIgPT4gT2JqZWN0LmFzc2lnbih7fSwgYSwge1xuICBbbmFtZV06IGJcbn0pKSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9Ob3RhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/doNotation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/effectable.js":
/*!*************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/effectable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base: () => (/* binding */ Base),\n/* harmony export */   ChannelTypeId: () => (/* binding */ ChannelTypeId),\n/* harmony export */   CommitPrototype: () => (/* binding */ CommitPrototype),\n/* harmony export */   EffectPrototype: () => (/* binding */ EffectPrototype),\n/* harmony export */   EffectTypeId: () => (/* binding */ EffectTypeId),\n/* harmony export */   SinkTypeId: () => (/* binding */ SinkTypeId),\n/* harmony export */   StreamTypeId: () => (/* binding */ StreamTypeId),\n/* harmony export */   StructuralBase: () => (/* binding */ StructuralBase),\n/* harmony export */   StructuralCommitPrototype: () => (/* binding */ StructuralCommitPrototype),\n/* harmony export */   StructuralPrototype: () => (/* binding */ StructuralPrototype),\n/* harmony export */   effectVariance: () => (/* binding */ effectVariance)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Pipeable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Pipeable.js */ \"(ssr)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils.js */ \"(ssr)/./node_modules/effect/dist/esm/Utils.js\");\n/* harmony import */ var _opCodes_effect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./opCodes/effect.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/version.js\");\n\n\n\n\n\n\n/** @internal */\nconst EffectTypeId = /*#__PURE__*/Symbol.for(\"effect/Effect\");\n/** @internal */\nconst StreamTypeId = /*#__PURE__*/Symbol.for(\"effect/Stream\");\n/** @internal */\nconst SinkTypeId = /*#__PURE__*/Symbol.for(\"effect/Sink\");\n/** @internal */\nconst ChannelTypeId = /*#__PURE__*/Symbol.for(\"effect/Channel\");\n/** @internal */\nconst effectVariance = {\n  /* c8 ignore next */\n  _R: _ => _,\n  /* c8 ignore next */\n  _E: _ => _,\n  /* c8 ignore next */\n  _A: _ => _,\n  _V: /*#__PURE__*/_version_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentVersion()\n};\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: _ => _,\n  /* c8 ignore next */\n  _In: _ => _,\n  /* c8 ignore next */\n  _L: _ => _,\n  /* c8 ignore next */\n  _E: _ => _,\n  /* c8 ignore next */\n  _R: _ => _\n};\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: _ => _,\n  /* c8 ignore next */\n  _InErr: _ => _,\n  /* c8 ignore next */\n  _InElem: _ => _,\n  /* c8 ignore next */\n  _InDone: _ => _,\n  /* c8 ignore next */\n  _OutErr: _ => _,\n  /* c8 ignore next */\n  _OutElem: _ => _,\n  /* c8 ignore next */\n  _OutDone: _ => _\n};\n/** @internal */\nconst EffectPrototype = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_1__.symbol](that) {\n    return this === that;\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_2__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_2__.random(this));\n  },\n  [Symbol.iterator]() {\n    return new _Utils_js__WEBPACK_IMPORTED_MODULE_3__.SingleShotGen(new _Utils_js__WEBPACK_IMPORTED_MODULE_3__.YieldWrap(this));\n  },\n  pipe() {\n    return (0,_Pipeable_js__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n  }\n};\n/** @internal */\nconst StructuralPrototype = {\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_2__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_2__.structure(this));\n  },\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_1__.symbol](that) {\n    const selfKeys = Object.keys(this);\n    const thatKeys = Object.keys(that);\n    if (selfKeys.length !== thatKeys.length) {\n      return false;\n    }\n    for (const key of selfKeys) {\n      if (!(key in that && _Equal_js__WEBPACK_IMPORTED_MODULE_1__.equals(this[key], that[key]))) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n/** @internal */\nconst CommitPrototype = {\n  ...EffectPrototype,\n  _op: _opCodes_effect_js__WEBPACK_IMPORTED_MODULE_5__.OP_COMMIT\n};\n/** @internal */\nconst StructuralCommitPrototype = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n};\n/** @internal */\nconst Base = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = CommitPrototype;\n  return Base;\n}();\n/** @internal */\nconst StructuralBase = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype;\n  return Base;\n}();\n//# sourceMappingURL=effectable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VmZmVjdGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDRjtBQUNZO0FBQ1E7QUFDUjtBQUNQO0FBQ3hDO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBEQUF5QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2Q0FBWTtBQUNmO0FBQ0EsR0FBRztBQUNILEdBQUcsNENBQVc7QUFDZCxXQUFXLDRDQUFXLE9BQU8sNENBQVc7QUFDeEMsR0FBRztBQUNIO0FBQ0EsZUFBZSxvREFBYSxLQUFLLGdEQUFTO0FBQzFDLEdBQUc7QUFDSDtBQUNBLFdBQVcsMkRBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ087QUFDUCxHQUFHLDRDQUFXO0FBQ2QsV0FBVyw0Q0FBVyxPQUFPLCtDQUFjO0FBQzNDLEdBQUc7QUFDSCxHQUFHLDZDQUFZO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDZDQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLE9BQU8seURBQWlCO0FBQ3hCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lZmZlY3RhYmxlLmpzP2QxMWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcIi4uL0VxdWFsLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBwaXBlQXJndW1lbnRzIH0gZnJvbSBcIi4uL1BpcGVhYmxlLmpzXCI7XG5pbXBvcnQgeyBTaW5nbGVTaG90R2VuLCBZaWVsZFdyYXAgfSBmcm9tIFwiLi4vVXRpbHMuanNcIjtcbmltcG9ydCAqIGFzIE9wQ29kZXMgZnJvbSBcIi4vb3BDb2Rlcy9lZmZlY3QuanNcIjtcbmltcG9ydCAqIGFzIHZlcnNpb24gZnJvbSBcIi4vdmVyc2lvbi5qc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEVmZmVjdFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0VmZmVjdFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJlYW1UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9TdHJlYW1cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgU2lua1R5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L1NpbmtcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgQ2hhbm5lbFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0NoYW5uZWxcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZWZmZWN0VmFyaWFuY2UgPSB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9SOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9FOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9BOiBfID0+IF8sXG4gIF9WOiAvKiNfX1BVUkVfXyovdmVyc2lvbi5nZXRDdXJyZW50VmVyc2lvbigpXG59O1xuY29uc3Qgc2lua1ZhcmlhbmNlID0ge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfQTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSW46IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0w6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0U6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX1I6IF8gPT4gX1xufTtcbmNvbnN0IGNoYW5uZWxWYXJpYW5jZSA9IHtcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0VudjogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSW5FcnI6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX0luRWxlbTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSW5Eb25lOiBfID0+IF8sXG4gIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gIF9PdXRFcnI6IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX091dEVsZW06IF8gPT4gXyxcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgX091dERvbmU6IF8gPT4gX1xufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBFZmZlY3RQcm90b3R5cGUgPSB7XG4gIFtFZmZlY3RUeXBlSWRdOiBlZmZlY3RWYXJpYW5jZSxcbiAgW1N0cmVhbVR5cGVJZF06IGVmZmVjdFZhcmlhbmNlLFxuICBbU2lua1R5cGVJZF06IHNpbmtWYXJpYW5jZSxcbiAgW0NoYW5uZWxUeXBlSWRdOiBjaGFubmVsVmFyaWFuY2UsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gdGhpcyA9PT0gdGhhdDtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jYWNoZWQodGhpcywgSGFzaC5yYW5kb20odGhpcykpO1xuICB9LFxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gbmV3IFNpbmdsZVNob3RHZW4obmV3IFlpZWxkV3JhcCh0aGlzKSk7XG4gIH0sXG4gIHBpcGUoKSB7XG4gICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsUHJvdG90eXBlID0ge1xuICBbSGFzaC5zeW1ib2xdKCkge1xuICAgIHJldHVybiBIYXNoLmNhY2hlZCh0aGlzLCBIYXNoLnN0cnVjdHVyZSh0aGlzKSk7XG4gIH0sXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICBjb25zdCBzZWxmS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGNvbnN0IHRoYXRLZXlzID0gT2JqZWN0LmtleXModGhhdCk7XG4gICAgaWYgKHNlbGZLZXlzLmxlbmd0aCAhPT0gdGhhdEtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIHNlbGZLZXlzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gdGhhdCAmJiBFcXVhbC5lcXVhbHModGhpc1trZXldLCB0aGF0W2tleV0pKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IENvbW1pdFByb3RvdHlwZSA9IHtcbiAgLi4uRWZmZWN0UHJvdG90eXBlLFxuICBfb3A6IE9wQ29kZXMuT1BfQ09NTUlUXG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFN0cnVjdHVyYWxDb21taXRQcm90b3R5cGUgPSB7XG4gIC4uLkNvbW1pdFByb3RvdHlwZSxcbiAgLi4uU3RydWN0dXJhbFByb3RvdHlwZVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBCYXNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZSgpIHt9XG4gIEJhc2UucHJvdG90eXBlID0gQ29tbWl0UHJvdG90eXBlO1xuICByZXR1cm4gQmFzZTtcbn0oKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBTdHJ1Y3R1cmFsQmFzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2UoKSB7fVxuICBCYXNlLnByb3RvdHlwZSA9IFN0cnVjdHVyYWxDb21taXRQcm90b3R5cGU7XG4gIHJldHVybiBCYXNlO1xufSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWZmZWN0YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/either.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/either.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   getLeft: () => (/* binding */ getLeft),\n/* harmony export */   getRight: () => (/* binding */ getRight),\n/* harmony export */   isEither: () => (/* binding */ isEither),\n/* harmony export */   isLeft: () => (/* binding */ isLeft),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   right: () => (/* binding */ right)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Function_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Function.js */ \"(ssr)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/* harmony import */ var _option_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./option.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/option.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n\n\n\n/**\n * @internal\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Either\");\nconst CommonProto = {\n  ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n  [TypeId]: {\n    _R: _ => _\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  }\n};\nconst RightProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isEither(that) && isRight(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.right, that.right);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.right));\n  },\n  toJSON() {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.right)\n    };\n  }\n});\nconst LeftProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isEither(that) && isLeft(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.left, that.left);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.left));\n  },\n  toJSON() {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.left)\n    };\n  }\n});\n/** @internal */\nconst isEither = input => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_4__.hasProperty)(input, TypeId);\n/** @internal */\nconst isLeft = ma => ma._tag === \"Left\";\n/** @internal */\nconst isRight = ma => ma._tag === \"Right\";\n/** @internal */\nconst left = left => {\n  const a = Object.create(LeftProto);\n  a.left = left;\n  return a;\n};\n/** @internal */\nconst right = right => {\n  const a = Object.create(RightProto);\n  a.right = right;\n  return a;\n};\n/** @internal */\nconst getLeft = self => isRight(self) ? _option_js__WEBPACK_IMPORTED_MODULE_5__.none : _option_js__WEBPACK_IMPORTED_MODULE_5__.some(self.left);\n/** @internal */\nconst getRight = self => isLeft(self) ? _option_js__WEBPACK_IMPORTED_MODULE_5__.none : _option_js__WEBPACK_IMPORTED_MODULE_5__.some(self.right);\n/** @internal */\nconst fromOption = /*#__PURE__*/(0,_Function_js__WEBPACK_IMPORTED_MODULE_6__.dual)(2, (self, onNone) => _option_js__WEBPACK_IMPORTED_MODULE_5__.isNone(self) ? left(onNone()) : right(self.value));\n//# sourceMappingURL=either.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2VpdGhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3FDO0FBQ0M7QUFDSDtBQUNtQztBQUN4QjtBQUNJO0FBQ1o7QUFDdEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLEtBQUssMkRBQWU7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHLDhEQUFpQjtBQUNwQjtBQUNBLEdBQUc7QUFDSDtBQUNBLFdBQVcsdURBQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsNkNBQVk7QUFDZiw4Q0FBOEMsNkNBQVk7QUFDMUQsR0FBRztBQUNILEdBQUcsNENBQVc7QUFDZCxXQUFXLDZDQUFZLENBQUMsMENBQVMsYUFBYSwwQ0FBUztBQUN2RCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVEQUFNO0FBQ25CO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2Q0FBWTtBQUNmLDZDQUE2Qyw2Q0FBWTtBQUN6RCxHQUFHO0FBQ0gsR0FBRyw0Q0FBVztBQUNkLFdBQVcsNkNBQVksQ0FBQywwQ0FBUyxhQUFhLDBDQUFTO0FBQ3ZELEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQU07QUFDbEI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPLDBCQUEwQiwwREFBVztBQUM1QztBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0NBQXdDLDRDQUFXLEdBQUcsNENBQVc7QUFDeEU7QUFDTyx3Q0FBd0MsNENBQVcsR0FBRyw0Q0FBVztBQUN4RTtBQUNPLGdDQUFnQyxrREFBSSxzQkFBc0IsOENBQWE7QUFDOUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvZWl0aGVyLmpzPzI0MTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcIi4uL0VxdWFsLmpzXCI7XG5pbXBvcnQgeyBkdWFsIH0gZnJvbSBcIi4uL0Z1bmN0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gXCIuLi9IYXNoLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXQsIE5vZGVJbnNwZWN0U3ltYm9sLCB0b0pTT04gfSBmcm9tIFwiLi4vSW5zcGVjdGFibGUuanNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uL1ByZWRpY2F0ZS5qc1wiO1xuaW1wb3J0IHsgRWZmZWN0UHJvdG90eXBlIH0gZnJvbSBcIi4vZWZmZWN0YWJsZS5qc1wiO1xuaW1wb3J0ICogYXMgb3B0aW9uIGZyb20gXCIuL29wdGlvbi5qc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiZWZmZWN0L0VpdGhlclwiKTtcbmNvbnN0IENvbW1vblByb3RvID0ge1xuICAuLi5FZmZlY3RQcm90b3R5cGUsXG4gIFtUeXBlSWRdOiB7XG4gICAgX1I6IF8gPT4gX1xuICB9LFxuICBbTm9kZUluc3BlY3RTeW1ib2xdKCkge1xuICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xuICB9LFxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZm9ybWF0KHRoaXMudG9KU09OKCkpO1xuICB9XG59O1xuY29uc3QgUmlnaHRQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKCAvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJSaWdodFwiLFxuICBfb3A6IFwiUmlnaHRcIixcbiAgW0VxdWFsLnN5bWJvbF0odGhhdCkge1xuICAgIHJldHVybiBpc0VpdGhlcih0aGF0KSAmJiBpc1JpZ2h0KHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLnJpZ2h0LCB0aGF0LnJpZ2h0KTtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jb21iaW5lKEhhc2guaGFzaCh0aGlzLl90YWcpKShIYXNoLmhhc2godGhpcy5yaWdodCkpO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJFaXRoZXJcIixcbiAgICAgIF90YWc6IHRoaXMuX3RhZyxcbiAgICAgIHJpZ2h0OiB0b0pTT04odGhpcy5yaWdodClcbiAgICB9O1xuICB9XG59KTtcbmNvbnN0IExlZnRQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKCAvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJMZWZ0XCIsXG4gIF9vcDogXCJMZWZ0XCIsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gaXNFaXRoZXIodGhhdCkgJiYgaXNMZWZ0KHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLmxlZnQsIHRoYXQubGVmdCk7XG4gIH0sXG4gIFtIYXNoLnN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIEhhc2guY29tYmluZShIYXNoLmhhc2godGhpcy5fdGFnKSkoSGFzaC5oYXNoKHRoaXMubGVmdCkpO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJFaXRoZXJcIixcbiAgICAgIF90YWc6IHRoaXMuX3RhZyxcbiAgICAgIGxlZnQ6IHRvSlNPTih0aGlzLmxlZnQpXG4gICAgfTtcbiAgfVxufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNFaXRoZXIgPSBpbnB1dCA9PiBoYXNQcm9wZXJ0eShpbnB1dCwgVHlwZUlkKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc0xlZnQgPSBtYSA9PiBtYS5fdGFnID09PSBcIkxlZnRcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc1JpZ2h0ID0gbWEgPT4gbWEuX3RhZyA9PT0gXCJSaWdodFwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGxlZnQgPSBsZWZ0ID0+IHtcbiAgY29uc3QgYSA9IE9iamVjdC5jcmVhdGUoTGVmdFByb3RvKTtcbiAgYS5sZWZ0ID0gbGVmdDtcbiAgcmV0dXJuIGE7XG59O1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHJpZ2h0ID0gcmlnaHQgPT4ge1xuICBjb25zdCBhID0gT2JqZWN0LmNyZWF0ZShSaWdodFByb3RvKTtcbiAgYS5yaWdodCA9IHJpZ2h0O1xuICByZXR1cm4gYTtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0TGVmdCA9IHNlbGYgPT4gaXNSaWdodChzZWxmKSA/IG9wdGlvbi5ub25lIDogb3B0aW9uLnNvbWUoc2VsZi5sZWZ0KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRSaWdodCA9IHNlbGYgPT4gaXNMZWZ0KHNlbGYpID8gb3B0aW9uLm5vbmUgOiBvcHRpb24uc29tZShzZWxmLnJpZ2h0KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBmcm9tT3B0aW9uID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIG9uTm9uZSkgPT4gb3B0aW9uLmlzTm9uZShzZWxmKSA/IGxlZnQob25Ob25lKCkpIDogcmlnaHQoc2VsZi52YWx1ZSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWl0aGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/either.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/errors.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBugErrorMessage: () => (/* binding */ getBugErrorMessage)\n/* harmony export */ });\n/**\n * @since 2.0.0\n */\n/** @internal */\nconst getBugErrorMessage = message => `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyw4Q0FBOEMsU0FBUztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9lcnJvcnMuanM/Y2Q5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0QnVnRXJyb3JNZXNzYWdlID0gbWVzc2FnZSA9PiBgQlVHOiAke21lc3NhZ2V9IC0gcGxlYXNlIHJlcG9ydCBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vRWZmZWN0LVRTL2VmZmVjdC9pc3N1ZXNgO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/opCodes/effect.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OP_ASYNC: () => (/* binding */ OP_ASYNC),\n/* harmony export */   OP_COMMIT: () => (/* binding */ OP_COMMIT),\n/* harmony export */   OP_FAILURE: () => (/* binding */ OP_FAILURE),\n/* harmony export */   OP_ON_FAILURE: () => (/* binding */ OP_ON_FAILURE),\n/* harmony export */   OP_ON_SUCCESS: () => (/* binding */ OP_ON_SUCCESS),\n/* harmony export */   OP_ON_SUCCESS_AND_FAILURE: () => (/* binding */ OP_ON_SUCCESS_AND_FAILURE),\n/* harmony export */   OP_REVERT_FLAGS: () => (/* binding */ OP_REVERT_FLAGS),\n/* harmony export */   OP_SUCCESS: () => (/* binding */ OP_SUCCESS),\n/* harmony export */   OP_SYNC: () => (/* binding */ OP_SYNC),\n/* harmony export */   OP_TAG: () => (/* binding */ OP_TAG),\n/* harmony export */   OP_UPDATE_RUNTIME_FLAGS: () => (/* binding */ OP_UPDATE_RUNTIME_FLAGS),\n/* harmony export */   OP_WHILE: () => (/* binding */ OP_WHILE),\n/* harmony export */   OP_WITH_RUNTIME: () => (/* binding */ OP_WITH_RUNTIME),\n/* harmony export */   OP_YIELD: () => (/* binding */ OP_YIELD)\n/* harmony export */ });\n/** @internal */\nconst OP_ASYNC = \"Async\";\n/** @internal */\nconst OP_COMMIT = \"Commit\";\n/** @internal */\nconst OP_FAILURE = \"Failure\";\n/** @internal */\nconst OP_ON_FAILURE = \"OnFailure\";\n/** @internal */\nconst OP_ON_SUCCESS = \"OnSuccess\";\n/** @internal */\nconst OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\";\n/** @internal */\nconst OP_SUCCESS = \"Success\";\n/** @internal */\nconst OP_SYNC = \"Sync\";\n/** @internal */\nconst OP_TAG = \"Tag\";\n/** @internal */\nconst OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\";\n/** @internal */\nconst OP_WHILE = \"While\";\n/** @internal */\nconst OP_WITH_RUNTIME = \"WithRuntime\";\n/** @internal */\nconst OP_YIELD = \"Yield\";\n/** @internal */\nconst OP_REVERT_FLAGS = \"RevertFlags\";\n//# sourceMappingURL=effect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL29wQ29kZXMvZWZmZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9vcENvZGVzL2VmZmVjdC5qcz9hOTVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9BU1lOQyA9IFwiQXN5bmNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9DT01NSVQgPSBcIkNvbW1pdFwiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX0ZBSUxVUkUgPSBcIkZhaWx1cmVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9PTl9GQUlMVVJFID0gXCJPbkZhaWx1cmVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9PTl9TVUNDRVNTID0gXCJPblN1Y2Nlc3NcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9PTl9TVUNDRVNTX0FORF9GQUlMVVJFID0gXCJPblN1Y2Nlc3NBbmRGYWlsdXJlXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfU1VDQ0VTUyA9IFwiU3VjY2Vzc1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1NZTkMgPSBcIlN5bmNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9UQUcgPSBcIlRhZ1wiO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE9QX1VQREFURV9SVU5USU1FX0ZMQUdTID0gXCJVcGRhdGVSdW50aW1lRmxhZ3NcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9XSElMRSA9IFwiV2hpbGVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBPUF9XSVRIX1JVTlRJTUUgPSBcIldpdGhSdW50aW1lXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfWUlFTEQgPSBcIllpZWxkXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgT1BfUkVWRVJUX0ZMQUdTID0gXCJSZXZlcnRGbGFnc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWZmZWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/opCodes/effect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/option.js":
/*!*********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/option.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNone: () => (/* binding */ isNone),\n/* harmony export */   isOption: () => (/* binding */ isOption),\n/* harmony export */   isSome: () => (/* binding */ isSome),\n/* harmony export */   none: () => (/* binding */ none),\n/* harmony export */   some: () => (/* binding */ some)\n/* harmony export */ });\n/* harmony import */ var _Equal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Equal.js */ \"(ssr)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Hash.js */ \"(ssr)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var _Inspectable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Inspectable.js */ \"(ssr)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var _Predicate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Predicate.js */ \"(ssr)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _effectable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effectable.js */ \"(ssr)/./node_modules/effect/dist/esm/internal/effectable.js\");\n/**\n * @since 2.0.0\n */\n\n\n\n\n\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Option\");\nconst CommonProto = {\n  ..._effectable_js__WEBPACK_IMPORTED_MODULE_0__.EffectPrototype,\n  [TypeId]: {\n    _A: _ => _\n  },\n  [_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.format)(this.toJSON());\n  }\n};\nconst SomeProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isOption(that) && isSome(that) && _Equal_js__WEBPACK_IMPORTED_MODULE_2__.equals(this.value, that.value);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.cached(this, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.combine(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this._tag))(_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(this.value)));\n  },\n  toJSON() {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: (0,_Inspectable_js__WEBPACK_IMPORTED_MODULE_1__.toJSON)(this.value)\n    };\n  }\n});\nconst NoneHash = /*#__PURE__*/_Hash_js__WEBPACK_IMPORTED_MODULE_3__.hash(\"None\");\nconst NoneProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [_Equal_js__WEBPACK_IMPORTED_MODULE_2__.symbol](that) {\n    return isOption(that) && isNone(that);\n  },\n  [_Hash_js__WEBPACK_IMPORTED_MODULE_3__.symbol]() {\n    return NoneHash;\n  },\n  toJSON() {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    };\n  }\n});\n/** @internal */\nconst isOption = input => (0,_Predicate_js__WEBPACK_IMPORTED_MODULE_4__.hasProperty)(input, TypeId);\n/** @internal */\nconst isNone = fa => fa._tag === \"None\";\n/** @internal */\nconst isSome = fa => fa._tag === \"Some\";\n/** @internal */\nconst none = /*#__PURE__*/Object.create(NoneProto);\n/** @internal */\nconst some = value => {\n  const a = Object.create(SomeProto);\n  a.value = value;\n  return a;\n};\n//# sourceMappingURL=option.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL29wdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3FDO0FBQ0Y7QUFDbUM7QUFDeEI7QUFDSTtBQUNsRDtBQUNBO0FBQ0EsS0FBSywyREFBZTtBQUNwQjtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUcsOERBQWlCO0FBQ3BCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsV0FBVyx1REFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyw2Q0FBWTtBQUNmLDZDQUE2Qyw2Q0FBWTtBQUN6RCxHQUFHO0FBQ0gsR0FBRyw0Q0FBVztBQUNkLFdBQVcsNENBQVcsT0FBTyw2Q0FBWSxDQUFDLDBDQUFTLGFBQWEsMENBQVM7QUFDekUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1REFBTTtBQUNuQjtBQUNBO0FBQ0EsQ0FBQztBQUNELDhCQUE4QiwwQ0FBUztBQUN2QztBQUNBO0FBQ0E7QUFDQSxHQUFHLDZDQUFZO0FBQ2Y7QUFDQSxHQUFHO0FBQ0gsR0FBRyw0Q0FBVztBQUNkO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPLDBCQUEwQiwwREFBVztBQUM1QztBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWFpLy4vbm9kZV9tb2R1bGVzL2VmZmVjdC9kaXN0L2VzbS9pbnRlcm5hbC9vcHRpb24uanM/NzZhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5pbXBvcnQgKiBhcyBFcXVhbCBmcm9tIFwiLi4vRXF1YWwuanNcIjtcbmltcG9ydCAqIGFzIEhhc2ggZnJvbSBcIi4uL0hhc2guanNcIjtcbmltcG9ydCB7IGZvcm1hdCwgTm9kZUluc3BlY3RTeW1ib2wsIHRvSlNPTiB9IGZyb20gXCIuLi9JbnNwZWN0YWJsZS5qc1wiO1xuaW1wb3J0IHsgaGFzUHJvcGVydHkgfSBmcm9tIFwiLi4vUHJlZGljYXRlLmpzXCI7XG5pbXBvcnQgeyBFZmZlY3RQcm90b3R5cGUgfSBmcm9tIFwiLi9lZmZlY3RhYmxlLmpzXCI7XG5jb25zdCBUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcImVmZmVjdC9PcHRpb25cIik7XG5jb25zdCBDb21tb25Qcm90byA9IHtcbiAgLi4uRWZmZWN0UHJvdG90eXBlLFxuICBbVHlwZUlkXToge1xuICAgIF9BOiBfID0+IF9cbiAgfSxcbiAgW05vZGVJbnNwZWN0U3ltYm9sXSgpIHtcbiAgICByZXR1cm4gdGhpcy50b0pTT04oKTtcbiAgfSxcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGZvcm1hdCh0aGlzLnRvSlNPTigpKTtcbiAgfVxufTtcbmNvbnN0IFNvbWVQcm90byA9IC8qI19fUFVSRV9fKi9PYmplY3QuYXNzaWduKCAvKiNfX1BVUkVfXyovT2JqZWN0LmNyZWF0ZShDb21tb25Qcm90byksIHtcbiAgX3RhZzogXCJTb21lXCIsXG4gIF9vcDogXCJTb21lXCIsXG4gIFtFcXVhbC5zeW1ib2xdKHRoYXQpIHtcbiAgICByZXR1cm4gaXNPcHRpb24odGhhdCkgJiYgaXNTb21lKHRoYXQpICYmIEVxdWFsLmVxdWFscyh0aGlzLnZhbHVlLCB0aGF0LnZhbHVlKTtcbiAgfSxcbiAgW0hhc2guc3ltYm9sXSgpIHtcbiAgICByZXR1cm4gSGFzaC5jYWNoZWQodGhpcywgSGFzaC5jb21iaW5lKEhhc2guaGFzaCh0aGlzLl90YWcpKShIYXNoLmhhc2godGhpcy52YWx1ZSkpKTtcbiAgfSxcbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfaWQ6IFwiT3B0aW9uXCIsXG4gICAgICBfdGFnOiB0aGlzLl90YWcsXG4gICAgICB2YWx1ZTogdG9KU09OKHRoaXMudmFsdWUpXG4gICAgfTtcbiAgfVxufSk7XG5jb25zdCBOb25lSGFzaCA9IC8qI19fUFVSRV9fKi9IYXNoLmhhc2goXCJOb25lXCIpO1xuY29uc3QgTm9uZVByb3RvID0gLyojX19QVVJFX18qL09iamVjdC5hc3NpZ24oIC8qI19fUFVSRV9fKi9PYmplY3QuY3JlYXRlKENvbW1vblByb3RvKSwge1xuICBfdGFnOiBcIk5vbmVcIixcbiAgX29wOiBcIk5vbmVcIixcbiAgW0VxdWFsLnN5bWJvbF0odGhhdCkge1xuICAgIHJldHVybiBpc09wdGlvbih0aGF0KSAmJiBpc05vbmUodGhhdCk7XG4gIH0sXG4gIFtIYXNoLnN5bWJvbF0oKSB7XG4gICAgcmV0dXJuIE5vbmVIYXNoO1xuICB9LFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9pZDogXCJPcHRpb25cIixcbiAgICAgIF90YWc6IHRoaXMuX3RhZ1xuICAgIH07XG4gIH1cbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzT3B0aW9uID0gaW5wdXQgPT4gaGFzUHJvcGVydHkoaW5wdXQsIFR5cGVJZCk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNOb25lID0gZmEgPT4gZmEuX3RhZyA9PT0gXCJOb25lXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaXNTb21lID0gZmEgPT4gZmEuX3RhZyA9PT0gXCJTb21lXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3Qgbm9uZSA9IC8qI19fUFVSRV9fKi9PYmplY3QuY3JlYXRlKE5vbmVQcm90byk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3Qgc29tZSA9IHZhbHVlID0+IHtcbiAgY29uc3QgYSA9IE9iamVjdC5jcmVhdGUoU29tZVByb3RvKTtcbiAgYS52YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gYTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/option.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/singleShotGen.js":
/*!****************************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/singleShotGen.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SingleShotGen: () => (/* binding */ SingleShotGen)\n/* harmony export */ });\n/** @internal */\nclass SingleShotGen {\n  self;\n  called = false;\n  constructor(self) {\n    this.self = self;\n  }\n  next(a) {\n    return this.called ? {\n      value: a,\n      done: true\n    } : (this.called = true, {\n      value: this.self,\n      done: false\n    });\n  }\n  return(a) {\n    return {\n      value: a,\n      done: true\n    };\n  }\n  throw(e) {\n    throw e;\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(this.self);\n  }\n}\n//# sourceMappingURL=singleShotGen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL3NpbmdsZVNob3RHZW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvc2luZ2xlU2hvdEdlbi5qcz9jMzY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBTaW5nbGVTaG90R2VuIHtcbiAgc2VsZjtcbiAgY2FsbGVkID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKHNlbGYpIHtcbiAgICB0aGlzLnNlbGYgPSBzZWxmO1xuICB9XG4gIG5leHQoYSkge1xuICAgIHJldHVybiB0aGlzLmNhbGxlZCA/IHtcbiAgICAgIHZhbHVlOiBhLFxuICAgICAgZG9uZTogdHJ1ZVxuICAgIH0gOiAodGhpcy5jYWxsZWQgPSB0cnVlLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zZWxmLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4oYSkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogYSxcbiAgICAgIGRvbmU6IHRydWVcbiAgICB9O1xuICB9XG4gIHRocm93KGUpIHtcbiAgICB0aHJvdyBlO1xuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBuZXcgU2luZ2xlU2hvdEdlbih0aGlzLnNlbGYpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW5nbGVTaG90R2VuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/singleShotGen.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/effect/dist/esm/internal/version.js":
/*!**********************************************************!*\
  !*** ./node_modules/effect/dist/esm/internal/version.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentVersion: () => (/* binding */ getCurrentVersion),\n/* harmony export */   setCurrentVersion: () => (/* binding */ setCurrentVersion)\n/* harmony export */ });\nlet moduleVersion = \"3.4.5\";\nconst getCurrentVersion = () => moduleVersion;\nconst setCurrentVersion = version => {\n  moduleVersion = version;\n};\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZWZmZWN0L2Rpc3QvZXNtL2ludGVybmFsL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNPO0FBQ0E7QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1haS8uL25vZGVfbW9kdWxlcy9lZmZlY3QvZGlzdC9lc20vaW50ZXJuYWwvdmVyc2lvbi5qcz8wNTAxIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBtb2R1bGVWZXJzaW9uID0gXCIzLjQuNVwiO1xuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRWZXJzaW9uID0gKCkgPT4gbW9kdWxlVmVyc2lvbjtcbmV4cG9ydCBjb25zdCBzZXRDdXJyZW50VmVyc2lvbiA9IHZlcnNpb24gPT4ge1xuICBtb2R1bGVWZXJzaW9uID0gdmVyc2lvbjtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effect/dist/esm/internal/version.js\n");

/***/ })

};
;